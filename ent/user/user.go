// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeBoards holds the string denoting the boards edge name in mutations.
	EdgeBoards = "boards"
	// EdgeBoardLike holds the string denoting the board_like edge name in mutations.
	EdgeBoardLike = "board_like"
	// EdgeBookMarks holds the string denoting the book_marks edge name in mutations.
	EdgeBookMarks = "book_marks"
	// EdgeCommentLike holds the string denoting the comment_like edge name in mutations.
	EdgeCommentLike = "comment_like"
	// EdgeComments holds the string denoting the comments edge name in mutations.
	EdgeComments = "comments"
	// EdgeCommentMention holds the string denoting the comment_mention edge name in mutations.
	EdgeCommentMention = "comment_mention"
	// EdgeBoardReport holds the string denoting the board_report edge name in mutations.
	EdgeBoardReport = "board_report"
	// EdgeCommentReport holds the string denoting the comment_report edge name in mutations.
	EdgeCommentReport = "comment_report"
	// Table holds the table name of the user in the database.
	Table = "users"
	// BoardsTable is the table that holds the boards relation/edge.
	BoardsTable = "boards"
	// BoardsInverseTable is the table name for the Board entity.
	// It exists in this package in order to avoid circular dependency with the "board" package.
	BoardsInverseTable = "boards"
	// BoardsColumn is the table column denoting the boards relation/edge.
	BoardsColumn = "user_id"
	// BoardLikeTable is the table that holds the board_like relation/edge.
	BoardLikeTable = "board_likes"
	// BoardLikeInverseTable is the table name for the BoardLike entity.
	// It exists in this package in order to avoid circular dependency with the "boardlike" package.
	BoardLikeInverseTable = "board_likes"
	// BoardLikeColumn is the table column denoting the board_like relation/edge.
	BoardLikeColumn = "user_id"
	// BookMarksTable is the table that holds the book_marks relation/edge.
	BookMarksTable = "book_marks"
	// BookMarksInverseTable is the table name for the BookMark entity.
	// It exists in this package in order to avoid circular dependency with the "bookmark" package.
	BookMarksInverseTable = "book_marks"
	// BookMarksColumn is the table column denoting the book_marks relation/edge.
	BookMarksColumn = "user_id"
	// CommentLikeTable is the table that holds the comment_like relation/edge.
	CommentLikeTable = "comment_likes"
	// CommentLikeInverseTable is the table name for the CommentLike entity.
	// It exists in this package in order to avoid circular dependency with the "commentlike" package.
	CommentLikeInverseTable = "comment_likes"
	// CommentLikeColumn is the table column denoting the comment_like relation/edge.
	CommentLikeColumn = "user_id"
	// CommentsTable is the table that holds the comments relation/edge.
	CommentsTable = "comments"
	// CommentsInverseTable is the table name for the Comment entity.
	// It exists in this package in order to avoid circular dependency with the "comment" package.
	CommentsInverseTable = "comments"
	// CommentsColumn is the table column denoting the comments relation/edge.
	CommentsColumn = "user_id"
	// CommentMentionTable is the table that holds the comment_mention relation/edge.
	CommentMentionTable = "comment_mentions"
	// CommentMentionInverseTable is the table name for the CommentMention entity.
	// It exists in this package in order to avoid circular dependency with the "commentmention" package.
	CommentMentionInverseTable = "comment_mentions"
	// CommentMentionColumn is the table column denoting the comment_mention relation/edge.
	CommentMentionColumn = "user_id"
	// BoardReportTable is the table that holds the board_report relation/edge.
	BoardReportTable = "board_reports"
	// BoardReportInverseTable is the table name for the BoardReport entity.
	// It exists in this package in order to avoid circular dependency with the "boardreport" package.
	BoardReportInverseTable = "board_reports"
	// BoardReportColumn is the table column denoting the board_report relation/edge.
	BoardReportColumn = "reporter_id"
	// CommentReportTable is the table that holds the comment_report relation/edge.
	CommentReportTable = "comment_reports"
	// CommentReportInverseTable is the table name for the CommentReport entity.
	// It exists in this package in order to avoid circular dependency with the "commentreport" package.
	CommentReportInverseTable = "comment_reports"
	// CommentReportColumn is the table column denoting the comment_report relation/edge.
	CommentReportColumn = "reporter_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldEmail,
	FieldPassword,
	FieldName,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	PasswordValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByBoardsCount orders the results by boards count.
func ByBoardsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBoardsStep(), opts...)
	}
}

// ByBoards orders the results by boards terms.
func ByBoards(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBoardsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByBoardLikeCount orders the results by board_like count.
func ByBoardLikeCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBoardLikeStep(), opts...)
	}
}

// ByBoardLike orders the results by board_like terms.
func ByBoardLike(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBoardLikeStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByBookMarksCount orders the results by book_marks count.
func ByBookMarksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBookMarksStep(), opts...)
	}
}

// ByBookMarks orders the results by book_marks terms.
func ByBookMarks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBookMarksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCommentLikeCount orders the results by comment_like count.
func ByCommentLikeCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCommentLikeStep(), opts...)
	}
}

// ByCommentLike orders the results by comment_like terms.
func ByCommentLike(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCommentLikeStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCommentsCount orders the results by comments count.
func ByCommentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCommentsStep(), opts...)
	}
}

// ByComments orders the results by comments terms.
func ByComments(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCommentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCommentMentionCount orders the results by comment_mention count.
func ByCommentMentionCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCommentMentionStep(), opts...)
	}
}

// ByCommentMention orders the results by comment_mention terms.
func ByCommentMention(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCommentMentionStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByBoardReportCount orders the results by board_report count.
func ByBoardReportCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBoardReportStep(), opts...)
	}
}

// ByBoardReport orders the results by board_report terms.
func ByBoardReport(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBoardReportStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCommentReportCount orders the results by comment_report count.
func ByCommentReportCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCommentReportStep(), opts...)
	}
}

// ByCommentReport orders the results by comment_report terms.
func ByCommentReport(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCommentReportStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newBoardsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BoardsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, BoardsTable, BoardsColumn),
	)
}
func newBoardLikeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BoardLikeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, BoardLikeTable, BoardLikeColumn),
	)
}
func newBookMarksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BookMarksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, BookMarksTable, BookMarksColumn),
	)
}
func newCommentLikeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CommentLikeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CommentLikeTable, CommentLikeColumn),
	)
}
func newCommentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CommentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CommentsTable, CommentsColumn),
	)
}
func newCommentMentionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CommentMentionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CommentMentionTable, CommentMentionColumn),
	)
}
func newBoardReportStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BoardReportInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, BoardReportTable, BoardReportColumn),
	)
}
func newCommentReportStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CommentReportInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CommentReportTable, CommentReportColumn),
	)
}
