// Code generated by ent, DO NOT EDIT.

package comment

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/leeeeeoy/go_study/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldID, id))
}

// Text applies equality check predicate on the "text" field. It's identical to TextEQ.
func Text(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldText, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldUserID, v))
}

// BoardID applies equality check predicate on the "board_id" field. It's identical to BoardIDEQ.
func BoardID(v int) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldBoardID, v))
}

// LikeCount applies equality check predicate on the "like_count" field. It's identical to LikeCountEQ.
func LikeCount(v int) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldLikeCount, v))
}

// ReportCount applies equality check predicate on the "report_count" field. It's identical to ReportCountEQ.
func ReportCount(v int) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldReportCount, v))
}

// LanguageType applies equality check predicate on the "language_type" field. It's identical to LanguageTypeEQ.
func LanguageType(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldLanguageType, v))
}

// AuthorHeart applies equality check predicate on the "author_heart" field. It's identical to AuthorHeartEQ.
func AuthorHeart(v bool) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldAuthorHeart, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldUpdatedAt, v))
}

// TextEQ applies the EQ predicate on the "text" field.
func TextEQ(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldText, v))
}

// TextNEQ applies the NEQ predicate on the "text" field.
func TextNEQ(v string) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldText, v))
}

// TextIn applies the In predicate on the "text" field.
func TextIn(vs ...string) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldText, vs...))
}

// TextNotIn applies the NotIn predicate on the "text" field.
func TextNotIn(vs ...string) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldText, vs...))
}

// TextGT applies the GT predicate on the "text" field.
func TextGT(v string) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldText, v))
}

// TextGTE applies the GTE predicate on the "text" field.
func TextGTE(v string) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldText, v))
}

// TextLT applies the LT predicate on the "text" field.
func TextLT(v string) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldText, v))
}

// TextLTE applies the LTE predicate on the "text" field.
func TextLTE(v string) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldText, v))
}

// TextContains applies the Contains predicate on the "text" field.
func TextContains(v string) predicate.Comment {
	return predicate.Comment(sql.FieldContains(FieldText, v))
}

// TextHasPrefix applies the HasPrefix predicate on the "text" field.
func TextHasPrefix(v string) predicate.Comment {
	return predicate.Comment(sql.FieldHasPrefix(FieldText, v))
}

// TextHasSuffix applies the HasSuffix predicate on the "text" field.
func TextHasSuffix(v string) predicate.Comment {
	return predicate.Comment(sql.FieldHasSuffix(FieldText, v))
}

// TextEqualFold applies the EqualFold predicate on the "text" field.
func TextEqualFold(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEqualFold(FieldText, v))
}

// TextContainsFold applies the ContainsFold predicate on the "text" field.
func TextContainsFold(v string) predicate.Comment {
	return predicate.Comment(sql.FieldContainsFold(FieldText, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.Comment {
	return predicate.Comment(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.Comment {
	return predicate.Comment(sql.FieldNotNull(FieldUserID))
}

// BoardIDEQ applies the EQ predicate on the "board_id" field.
func BoardIDEQ(v int) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldBoardID, v))
}

// BoardIDNEQ applies the NEQ predicate on the "board_id" field.
func BoardIDNEQ(v int) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldBoardID, v))
}

// BoardIDIn applies the In predicate on the "board_id" field.
func BoardIDIn(vs ...int) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldBoardID, vs...))
}

// BoardIDNotIn applies the NotIn predicate on the "board_id" field.
func BoardIDNotIn(vs ...int) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldBoardID, vs...))
}

// BoardIDIsNil applies the IsNil predicate on the "board_id" field.
func BoardIDIsNil() predicate.Comment {
	return predicate.Comment(sql.FieldIsNull(FieldBoardID))
}

// BoardIDNotNil applies the NotNil predicate on the "board_id" field.
func BoardIDNotNil() predicate.Comment {
	return predicate.Comment(sql.FieldNotNull(FieldBoardID))
}

// LikeCountEQ applies the EQ predicate on the "like_count" field.
func LikeCountEQ(v int) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldLikeCount, v))
}

// LikeCountNEQ applies the NEQ predicate on the "like_count" field.
func LikeCountNEQ(v int) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldLikeCount, v))
}

// LikeCountIn applies the In predicate on the "like_count" field.
func LikeCountIn(vs ...int) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldLikeCount, vs...))
}

// LikeCountNotIn applies the NotIn predicate on the "like_count" field.
func LikeCountNotIn(vs ...int) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldLikeCount, vs...))
}

// LikeCountGT applies the GT predicate on the "like_count" field.
func LikeCountGT(v int) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldLikeCount, v))
}

// LikeCountGTE applies the GTE predicate on the "like_count" field.
func LikeCountGTE(v int) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldLikeCount, v))
}

// LikeCountLT applies the LT predicate on the "like_count" field.
func LikeCountLT(v int) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldLikeCount, v))
}

// LikeCountLTE applies the LTE predicate on the "like_count" field.
func LikeCountLTE(v int) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldLikeCount, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldStatus, vs...))
}

// ReportCountEQ applies the EQ predicate on the "report_count" field.
func ReportCountEQ(v int) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldReportCount, v))
}

// ReportCountNEQ applies the NEQ predicate on the "report_count" field.
func ReportCountNEQ(v int) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldReportCount, v))
}

// ReportCountIn applies the In predicate on the "report_count" field.
func ReportCountIn(vs ...int) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldReportCount, vs...))
}

// ReportCountNotIn applies the NotIn predicate on the "report_count" field.
func ReportCountNotIn(vs ...int) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldReportCount, vs...))
}

// ReportCountGT applies the GT predicate on the "report_count" field.
func ReportCountGT(v int) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldReportCount, v))
}

// ReportCountGTE applies the GTE predicate on the "report_count" field.
func ReportCountGTE(v int) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldReportCount, v))
}

// ReportCountLT applies the LT predicate on the "report_count" field.
func ReportCountLT(v int) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldReportCount, v))
}

// ReportCountLTE applies the LTE predicate on the "report_count" field.
func ReportCountLTE(v int) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldReportCount, v))
}

// LanguageTypeEQ applies the EQ predicate on the "language_type" field.
func LanguageTypeEQ(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldLanguageType, v))
}

// LanguageTypeNEQ applies the NEQ predicate on the "language_type" field.
func LanguageTypeNEQ(v string) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldLanguageType, v))
}

// LanguageTypeIn applies the In predicate on the "language_type" field.
func LanguageTypeIn(vs ...string) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldLanguageType, vs...))
}

// LanguageTypeNotIn applies the NotIn predicate on the "language_type" field.
func LanguageTypeNotIn(vs ...string) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldLanguageType, vs...))
}

// LanguageTypeGT applies the GT predicate on the "language_type" field.
func LanguageTypeGT(v string) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldLanguageType, v))
}

// LanguageTypeGTE applies the GTE predicate on the "language_type" field.
func LanguageTypeGTE(v string) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldLanguageType, v))
}

// LanguageTypeLT applies the LT predicate on the "language_type" field.
func LanguageTypeLT(v string) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldLanguageType, v))
}

// LanguageTypeLTE applies the LTE predicate on the "language_type" field.
func LanguageTypeLTE(v string) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldLanguageType, v))
}

// LanguageTypeContains applies the Contains predicate on the "language_type" field.
func LanguageTypeContains(v string) predicate.Comment {
	return predicate.Comment(sql.FieldContains(FieldLanguageType, v))
}

// LanguageTypeHasPrefix applies the HasPrefix predicate on the "language_type" field.
func LanguageTypeHasPrefix(v string) predicate.Comment {
	return predicate.Comment(sql.FieldHasPrefix(FieldLanguageType, v))
}

// LanguageTypeHasSuffix applies the HasSuffix predicate on the "language_type" field.
func LanguageTypeHasSuffix(v string) predicate.Comment {
	return predicate.Comment(sql.FieldHasSuffix(FieldLanguageType, v))
}

// LanguageTypeEqualFold applies the EqualFold predicate on the "language_type" field.
func LanguageTypeEqualFold(v string) predicate.Comment {
	return predicate.Comment(sql.FieldEqualFold(FieldLanguageType, v))
}

// LanguageTypeContainsFold applies the ContainsFold predicate on the "language_type" field.
func LanguageTypeContainsFold(v string) predicate.Comment {
	return predicate.Comment(sql.FieldContainsFold(FieldLanguageType, v))
}

// AuthorHeartEQ applies the EQ predicate on the "author_heart" field.
func AuthorHeartEQ(v bool) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldAuthorHeart, v))
}

// AuthorHeartNEQ applies the NEQ predicate on the "author_heart" field.
func AuthorHeartNEQ(v bool) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldAuthorHeart, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Comment {
	return predicate.Comment(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasBoard applies the HasEdge predicate on the "board" edge.
func HasBoard() predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BoardTable, BoardColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBoardWith applies the HasEdge predicate on the "board" edge with a given conditions (other predicates).
func HasBoardWith(preds ...predicate.Board) predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		step := newBoardStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCommentLike applies the HasEdge predicate on the "comment_like" edge.
func HasCommentLike() predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CommentLikeTable, CommentLikeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCommentLikeWith applies the HasEdge predicate on the "comment_like" edge with a given conditions (other predicates).
func HasCommentLikeWith(preds ...predicate.CommentLike) predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		step := newCommentLikeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCommentMention applies the HasEdge predicate on the "comment_mention" edge.
func HasCommentMention() predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CommentMentionTable, CommentMentionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCommentMentionWith applies the HasEdge predicate on the "comment_mention" edge with a given conditions (other predicates).
func HasCommentMentionWith(preds ...predicate.CommentMention) predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		step := newCommentMentionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCommentReport applies the HasEdge predicate on the "comment_report" edge.
func HasCommentReport() predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CommentReportTable, CommentReportColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCommentReportWith applies the HasEdge predicate on the "comment_report" edge with a given conditions (other predicates).
func HasCommentReportWith(preds ...predicate.CommentReport) predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		step := newCommentReportStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Comment) predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Comment) predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Comment) predicate.Comment {
	return predicate.Comment(func(s *sql.Selector) {
		p(s.Not())
	})
}
