// Code generated by ent, DO NOT EDIT.

package comment

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the comment type in the database.
	Label = "comment"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldText holds the string denoting the text field in the database.
	FieldText = "text"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldBoardID holds the string denoting the board_id field in the database.
	FieldBoardID = "board_id"
	// FieldLikeCount holds the string denoting the like_count field in the database.
	FieldLikeCount = "like_count"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldLanguageType holds the string denoting the language_type field in the database.
	FieldLanguageType = "language_type"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeBoard holds the string denoting the board edge name in mutations.
	EdgeBoard = "board"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeCommentLike holds the string denoting the comment_like edge name in mutations.
	EdgeCommentLike = "comment_like"
	// EdgeCommentMention holds the string denoting the comment_mention edge name in mutations.
	EdgeCommentMention = "comment_mention"
	// Table holds the table name of the comment in the database.
	Table = "comments"
	// BoardTable is the table that holds the board relation/edge.
	BoardTable = "comments"
	// BoardInverseTable is the table name for the Board entity.
	// It exists in this package in order to avoid circular dependency with the "board" package.
	BoardInverseTable = "boards"
	// BoardColumn is the table column denoting the board relation/edge.
	BoardColumn = "board_id"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "comments"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// CommentLikeTable is the table that holds the comment_like relation/edge.
	CommentLikeTable = "comment_likes"
	// CommentLikeInverseTable is the table name for the CommentLike entity.
	// It exists in this package in order to avoid circular dependency with the "commentlike" package.
	CommentLikeInverseTable = "comment_likes"
	// CommentLikeColumn is the table column denoting the comment_like relation/edge.
	CommentLikeColumn = "comment_id"
	// CommentMentionTable is the table that holds the comment_mention relation/edge.
	CommentMentionTable = "comment_mentions"
	// CommentMentionInverseTable is the table name for the CommentMention entity.
	// It exists in this package in order to avoid circular dependency with the "commentmention" package.
	CommentMentionInverseTable = "comment_mentions"
	// CommentMentionColumn is the table column denoting the comment_mention relation/edge.
	CommentMentionColumn = "comment_id"
)

// Columns holds all SQL columns for comment fields.
var Columns = []string{
	FieldID,
	FieldText,
	FieldUserID,
	FieldBoardID,
	FieldLikeCount,
	FieldStatus,
	FieldLanguageType,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusActivate Status = "activate"
	StatusDeleted  Status = "deleted"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusActivate, StatusDeleted:
		return nil
	default:
		return fmt.Errorf("comment: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Comment queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByText orders the results by the text field.
func ByText(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldText, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByBoardID orders the results by the board_id field.
func ByBoardID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBoardID, opts...).ToFunc()
}

// ByLikeCount orders the results by the like_count field.
func ByLikeCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLikeCount, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByLanguageType orders the results by the language_type field.
func ByLanguageType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLanguageType, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByBoardField orders the results by board field.
func ByBoardField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBoardStep(), sql.OrderByField(field, opts...))
	}
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByCommentLikeCount orders the results by comment_like count.
func ByCommentLikeCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCommentLikeStep(), opts...)
	}
}

// ByCommentLike orders the results by comment_like terms.
func ByCommentLike(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCommentLikeStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCommentMentionCount orders the results by comment_mention count.
func ByCommentMentionCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCommentMentionStep(), opts...)
	}
}

// ByCommentMention orders the results by comment_mention terms.
func ByCommentMention(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCommentMentionStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newBoardStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BoardInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, BoardTable, BoardColumn),
	)
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newCommentLikeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CommentLikeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CommentLikeTable, CommentLikeColumn),
	)
}
func newCommentMentionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CommentMentionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CommentMentionTable, CommentMentionColumn),
	)
}
