// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/leeeeeoy/go_study/ent/board"
	"github.com/leeeeeoy/go_study/ent/boardlike"
	"github.com/leeeeeoy/go_study/ent/predicate"
	"github.com/leeeeeoy/go_study/ent/user"
)

// BoardLikeUpdate is the builder for updating BoardLike entities.
type BoardLikeUpdate struct {
	config
	hooks    []Hook
	mutation *BoardLikeMutation
}

// Where appends a list predicates to the BoardLikeUpdate builder.
func (blu *BoardLikeUpdate) Where(ps ...predicate.BoardLike) *BoardLikeUpdate {
	blu.mutation.Where(ps...)
	return blu
}

// SetUserID sets the "user_id" field.
func (blu *BoardLikeUpdate) SetUserID(i int) *BoardLikeUpdate {
	blu.mutation.SetUserID(i)
	return blu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (blu *BoardLikeUpdate) SetNillableUserID(i *int) *BoardLikeUpdate {
	if i != nil {
		blu.SetUserID(*i)
	}
	return blu
}

// ClearUserID clears the value of the "user_id" field.
func (blu *BoardLikeUpdate) ClearUserID() *BoardLikeUpdate {
	blu.mutation.ClearUserID()
	return blu
}

// SetBoardID sets the "board_id" field.
func (blu *BoardLikeUpdate) SetBoardID(i int) *BoardLikeUpdate {
	blu.mutation.SetBoardID(i)
	return blu
}

// SetNillableBoardID sets the "board_id" field if the given value is not nil.
func (blu *BoardLikeUpdate) SetNillableBoardID(i *int) *BoardLikeUpdate {
	if i != nil {
		blu.SetBoardID(*i)
	}
	return blu
}

// ClearBoardID clears the value of the "board_id" field.
func (blu *BoardLikeUpdate) ClearBoardID() *BoardLikeUpdate {
	blu.mutation.ClearBoardID()
	return blu
}

// SetCreatedAt sets the "created_at" field.
func (blu *BoardLikeUpdate) SetCreatedAt(t time.Time) *BoardLikeUpdate {
	blu.mutation.SetCreatedAt(t)
	return blu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (blu *BoardLikeUpdate) SetNillableCreatedAt(t *time.Time) *BoardLikeUpdate {
	if t != nil {
		blu.SetCreatedAt(*t)
	}
	return blu
}

// SetUser sets the "user" edge to the User entity.
func (blu *BoardLikeUpdate) SetUser(u *User) *BoardLikeUpdate {
	return blu.SetUserID(u.ID)
}

// SetBoard sets the "board" edge to the Board entity.
func (blu *BoardLikeUpdate) SetBoard(b *Board) *BoardLikeUpdate {
	return blu.SetBoardID(b.ID)
}

// Mutation returns the BoardLikeMutation object of the builder.
func (blu *BoardLikeUpdate) Mutation() *BoardLikeMutation {
	return blu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (blu *BoardLikeUpdate) ClearUser() *BoardLikeUpdate {
	blu.mutation.ClearUser()
	return blu
}

// ClearBoard clears the "board" edge to the Board entity.
func (blu *BoardLikeUpdate) ClearBoard() *BoardLikeUpdate {
	blu.mutation.ClearBoard()
	return blu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (blu *BoardLikeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, blu.sqlSave, blu.mutation, blu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (blu *BoardLikeUpdate) SaveX(ctx context.Context) int {
	affected, err := blu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (blu *BoardLikeUpdate) Exec(ctx context.Context) error {
	_, err := blu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (blu *BoardLikeUpdate) ExecX(ctx context.Context) {
	if err := blu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (blu *BoardLikeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(boardlike.Table, boardlike.Columns, sqlgraph.NewFieldSpec(boardlike.FieldID, field.TypeInt))
	if ps := blu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := blu.mutation.CreatedAt(); ok {
		_spec.SetField(boardlike.FieldCreatedAt, field.TypeTime, value)
	}
	if blu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   boardlike.UserTable,
			Columns: []string{boardlike.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := blu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   boardlike.UserTable,
			Columns: []string{boardlike.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if blu.mutation.BoardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   boardlike.BoardTable,
			Columns: []string{boardlike.BoardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(board.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := blu.mutation.BoardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   boardlike.BoardTable,
			Columns: []string{boardlike.BoardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(board.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, blu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{boardlike.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	blu.mutation.done = true
	return n, nil
}

// BoardLikeUpdateOne is the builder for updating a single BoardLike entity.
type BoardLikeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BoardLikeMutation
}

// SetUserID sets the "user_id" field.
func (bluo *BoardLikeUpdateOne) SetUserID(i int) *BoardLikeUpdateOne {
	bluo.mutation.SetUserID(i)
	return bluo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (bluo *BoardLikeUpdateOne) SetNillableUserID(i *int) *BoardLikeUpdateOne {
	if i != nil {
		bluo.SetUserID(*i)
	}
	return bluo
}

// ClearUserID clears the value of the "user_id" field.
func (bluo *BoardLikeUpdateOne) ClearUserID() *BoardLikeUpdateOne {
	bluo.mutation.ClearUserID()
	return bluo
}

// SetBoardID sets the "board_id" field.
func (bluo *BoardLikeUpdateOne) SetBoardID(i int) *BoardLikeUpdateOne {
	bluo.mutation.SetBoardID(i)
	return bluo
}

// SetNillableBoardID sets the "board_id" field if the given value is not nil.
func (bluo *BoardLikeUpdateOne) SetNillableBoardID(i *int) *BoardLikeUpdateOne {
	if i != nil {
		bluo.SetBoardID(*i)
	}
	return bluo
}

// ClearBoardID clears the value of the "board_id" field.
func (bluo *BoardLikeUpdateOne) ClearBoardID() *BoardLikeUpdateOne {
	bluo.mutation.ClearBoardID()
	return bluo
}

// SetCreatedAt sets the "created_at" field.
func (bluo *BoardLikeUpdateOne) SetCreatedAt(t time.Time) *BoardLikeUpdateOne {
	bluo.mutation.SetCreatedAt(t)
	return bluo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bluo *BoardLikeUpdateOne) SetNillableCreatedAt(t *time.Time) *BoardLikeUpdateOne {
	if t != nil {
		bluo.SetCreatedAt(*t)
	}
	return bluo
}

// SetUser sets the "user" edge to the User entity.
func (bluo *BoardLikeUpdateOne) SetUser(u *User) *BoardLikeUpdateOne {
	return bluo.SetUserID(u.ID)
}

// SetBoard sets the "board" edge to the Board entity.
func (bluo *BoardLikeUpdateOne) SetBoard(b *Board) *BoardLikeUpdateOne {
	return bluo.SetBoardID(b.ID)
}

// Mutation returns the BoardLikeMutation object of the builder.
func (bluo *BoardLikeUpdateOne) Mutation() *BoardLikeMutation {
	return bluo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (bluo *BoardLikeUpdateOne) ClearUser() *BoardLikeUpdateOne {
	bluo.mutation.ClearUser()
	return bluo
}

// ClearBoard clears the "board" edge to the Board entity.
func (bluo *BoardLikeUpdateOne) ClearBoard() *BoardLikeUpdateOne {
	bluo.mutation.ClearBoard()
	return bluo
}

// Where appends a list predicates to the BoardLikeUpdate builder.
func (bluo *BoardLikeUpdateOne) Where(ps ...predicate.BoardLike) *BoardLikeUpdateOne {
	bluo.mutation.Where(ps...)
	return bluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bluo *BoardLikeUpdateOne) Select(field string, fields ...string) *BoardLikeUpdateOne {
	bluo.fields = append([]string{field}, fields...)
	return bluo
}

// Save executes the query and returns the updated BoardLike entity.
func (bluo *BoardLikeUpdateOne) Save(ctx context.Context) (*BoardLike, error) {
	return withHooks(ctx, bluo.sqlSave, bluo.mutation, bluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bluo *BoardLikeUpdateOne) SaveX(ctx context.Context) *BoardLike {
	node, err := bluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bluo *BoardLikeUpdateOne) Exec(ctx context.Context) error {
	_, err := bluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bluo *BoardLikeUpdateOne) ExecX(ctx context.Context) {
	if err := bluo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bluo *BoardLikeUpdateOne) sqlSave(ctx context.Context) (_node *BoardLike, err error) {
	_spec := sqlgraph.NewUpdateSpec(boardlike.Table, boardlike.Columns, sqlgraph.NewFieldSpec(boardlike.FieldID, field.TypeInt))
	id, ok := bluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BoardLike.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, boardlike.FieldID)
		for _, f := range fields {
			if !boardlike.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != boardlike.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bluo.mutation.CreatedAt(); ok {
		_spec.SetField(boardlike.FieldCreatedAt, field.TypeTime, value)
	}
	if bluo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   boardlike.UserTable,
			Columns: []string{boardlike.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bluo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   boardlike.UserTable,
			Columns: []string{boardlike.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bluo.mutation.BoardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   boardlike.BoardTable,
			Columns: []string{boardlike.BoardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(board.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bluo.mutation.BoardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   boardlike.BoardTable,
			Columns: []string{boardlike.BoardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(board.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BoardLike{config: bluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{boardlike.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bluo.mutation.done = true
	return _node, nil
}
