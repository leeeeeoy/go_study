// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/leeeeeoy/go_study/ent/comment"
	"github.com/leeeeeoy/go_study/ent/commentreport"
	"github.com/leeeeeoy/go_study/ent/predicate"
	"github.com/leeeeeoy/go_study/ent/reporttype"
	"github.com/leeeeeoy/go_study/ent/user"
)

// CommentReportUpdate is the builder for updating CommentReport entities.
type CommentReportUpdate struct {
	config
	hooks    []Hook
	mutation *CommentReportMutation
}

// Where appends a list predicates to the CommentReportUpdate builder.
func (cru *CommentReportUpdate) Where(ps ...predicate.CommentReport) *CommentReportUpdate {
	cru.mutation.Where(ps...)
	return cru
}

// SetCommentID sets the "comment_id" field.
func (cru *CommentReportUpdate) SetCommentID(i int) *CommentReportUpdate {
	cru.mutation.SetCommentID(i)
	return cru
}

// SetNillableCommentID sets the "comment_id" field if the given value is not nil.
func (cru *CommentReportUpdate) SetNillableCommentID(i *int) *CommentReportUpdate {
	if i != nil {
		cru.SetCommentID(*i)
	}
	return cru
}

// ClearCommentID clears the value of the "comment_id" field.
func (cru *CommentReportUpdate) ClearCommentID() *CommentReportUpdate {
	cru.mutation.ClearCommentID()
	return cru
}

// SetReportTypeID sets the "report_type_id" field.
func (cru *CommentReportUpdate) SetReportTypeID(i int) *CommentReportUpdate {
	cru.mutation.SetReportTypeID(i)
	return cru
}

// SetNillableReportTypeID sets the "report_type_id" field if the given value is not nil.
func (cru *CommentReportUpdate) SetNillableReportTypeID(i *int) *CommentReportUpdate {
	if i != nil {
		cru.SetReportTypeID(*i)
	}
	return cru
}

// ClearReportTypeID clears the value of the "report_type_id" field.
func (cru *CommentReportUpdate) ClearReportTypeID() *CommentReportUpdate {
	cru.mutation.ClearReportTypeID()
	return cru
}

// SetReporterID sets the "reporter_id" field.
func (cru *CommentReportUpdate) SetReporterID(i int) *CommentReportUpdate {
	cru.mutation.SetReporterID(i)
	return cru
}

// SetNillableReporterID sets the "reporter_id" field if the given value is not nil.
func (cru *CommentReportUpdate) SetNillableReporterID(i *int) *CommentReportUpdate {
	if i != nil {
		cru.SetReporterID(*i)
	}
	return cru
}

// ClearReporterID clears the value of the "reporter_id" field.
func (cru *CommentReportUpdate) ClearReporterID() *CommentReportUpdate {
	cru.mutation.ClearReporterID()
	return cru
}

// SetDesc sets the "desc" field.
func (cru *CommentReportUpdate) SetDesc(s string) *CommentReportUpdate {
	cru.mutation.SetDesc(s)
	return cru
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (cru *CommentReportUpdate) SetNillableDesc(s *string) *CommentReportUpdate {
	if s != nil {
		cru.SetDesc(*s)
	}
	return cru
}

// ClearDesc clears the value of the "desc" field.
func (cru *CommentReportUpdate) ClearDesc() *CommentReportUpdate {
	cru.mutation.ClearDesc()
	return cru
}

// SetStatus sets the "status" field.
func (cru *CommentReportUpdate) SetStatus(c commentreport.Status) *CommentReportUpdate {
	cru.mutation.SetStatus(c)
	return cru
}

// SetCreatedAt sets the "created_at" field.
func (cru *CommentReportUpdate) SetCreatedAt(t time.Time) *CommentReportUpdate {
	cru.mutation.SetCreatedAt(t)
	return cru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cru *CommentReportUpdate) SetNillableCreatedAt(t *time.Time) *CommentReportUpdate {
	if t != nil {
		cru.SetCreatedAt(*t)
	}
	return cru
}

// SetUpdatedAt sets the "updated_at" field.
func (cru *CommentReportUpdate) SetUpdatedAt(t time.Time) *CommentReportUpdate {
	cru.mutation.SetUpdatedAt(t)
	return cru
}

// SetUserID sets the "user" edge to the User entity by ID.
func (cru *CommentReportUpdate) SetUserID(id int) *CommentReportUpdate {
	cru.mutation.SetUserID(id)
	return cru
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (cru *CommentReportUpdate) SetNillableUserID(id *int) *CommentReportUpdate {
	if id != nil {
		cru = cru.SetUserID(*id)
	}
	return cru
}

// SetUser sets the "user" edge to the User entity.
func (cru *CommentReportUpdate) SetUser(u *User) *CommentReportUpdate {
	return cru.SetUserID(u.ID)
}

// SetComment sets the "comment" edge to the Comment entity.
func (cru *CommentReportUpdate) SetComment(c *Comment) *CommentReportUpdate {
	return cru.SetCommentID(c.ID)
}

// SetReportType sets the "report_type" edge to the ReportType entity.
func (cru *CommentReportUpdate) SetReportType(r *ReportType) *CommentReportUpdate {
	return cru.SetReportTypeID(r.ID)
}

// Mutation returns the CommentReportMutation object of the builder.
func (cru *CommentReportUpdate) Mutation() *CommentReportMutation {
	return cru.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (cru *CommentReportUpdate) ClearUser() *CommentReportUpdate {
	cru.mutation.ClearUser()
	return cru
}

// ClearComment clears the "comment" edge to the Comment entity.
func (cru *CommentReportUpdate) ClearComment() *CommentReportUpdate {
	cru.mutation.ClearComment()
	return cru
}

// ClearReportType clears the "report_type" edge to the ReportType entity.
func (cru *CommentReportUpdate) ClearReportType() *CommentReportUpdate {
	cru.mutation.ClearReportType()
	return cru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cru *CommentReportUpdate) Save(ctx context.Context) (int, error) {
	cru.defaults()
	return withHooks(ctx, cru.sqlSave, cru.mutation, cru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cru *CommentReportUpdate) SaveX(ctx context.Context) int {
	affected, err := cru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cru *CommentReportUpdate) Exec(ctx context.Context) error {
	_, err := cru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cru *CommentReportUpdate) ExecX(ctx context.Context) {
	if err := cru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cru *CommentReportUpdate) defaults() {
	if _, ok := cru.mutation.UpdatedAt(); !ok {
		v := commentreport.UpdateDefaultUpdatedAt()
		cru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cru *CommentReportUpdate) check() error {
	if v, ok := cru.mutation.Status(); ok {
		if err := commentreport.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "CommentReport.status": %w`, err)}
		}
	}
	return nil
}

func (cru *CommentReportUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(commentreport.Table, commentreport.Columns, sqlgraph.NewFieldSpec(commentreport.FieldID, field.TypeInt))
	if ps := cru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cru.mutation.Desc(); ok {
		_spec.SetField(commentreport.FieldDesc, field.TypeString, value)
	}
	if cru.mutation.DescCleared() {
		_spec.ClearField(commentreport.FieldDesc, field.TypeString)
	}
	if value, ok := cru.mutation.Status(); ok {
		_spec.SetField(commentreport.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := cru.mutation.CreatedAt(); ok {
		_spec.SetField(commentreport.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cru.mutation.UpdatedAt(); ok {
		_spec.SetField(commentreport.FieldUpdatedAt, field.TypeTime, value)
	}
	if cru.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   commentreport.UserTable,
			Columns: []string{commentreport.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cru.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   commentreport.UserTable,
			Columns: []string{commentreport.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cru.mutation.CommentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   commentreport.CommentTable,
			Columns: []string{commentreport.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cru.mutation.CommentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   commentreport.CommentTable,
			Columns: []string{commentreport.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cru.mutation.ReportTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   commentreport.ReportTypeTable,
			Columns: []string{commentreport.ReportTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reporttype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cru.mutation.ReportTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   commentreport.ReportTypeTable,
			Columns: []string{commentreport.ReportTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reporttype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{commentreport.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cru.mutation.done = true
	return n, nil
}

// CommentReportUpdateOne is the builder for updating a single CommentReport entity.
type CommentReportUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CommentReportMutation
}

// SetCommentID sets the "comment_id" field.
func (cruo *CommentReportUpdateOne) SetCommentID(i int) *CommentReportUpdateOne {
	cruo.mutation.SetCommentID(i)
	return cruo
}

// SetNillableCommentID sets the "comment_id" field if the given value is not nil.
func (cruo *CommentReportUpdateOne) SetNillableCommentID(i *int) *CommentReportUpdateOne {
	if i != nil {
		cruo.SetCommentID(*i)
	}
	return cruo
}

// ClearCommentID clears the value of the "comment_id" field.
func (cruo *CommentReportUpdateOne) ClearCommentID() *CommentReportUpdateOne {
	cruo.mutation.ClearCommentID()
	return cruo
}

// SetReportTypeID sets the "report_type_id" field.
func (cruo *CommentReportUpdateOne) SetReportTypeID(i int) *CommentReportUpdateOne {
	cruo.mutation.SetReportTypeID(i)
	return cruo
}

// SetNillableReportTypeID sets the "report_type_id" field if the given value is not nil.
func (cruo *CommentReportUpdateOne) SetNillableReportTypeID(i *int) *CommentReportUpdateOne {
	if i != nil {
		cruo.SetReportTypeID(*i)
	}
	return cruo
}

// ClearReportTypeID clears the value of the "report_type_id" field.
func (cruo *CommentReportUpdateOne) ClearReportTypeID() *CommentReportUpdateOne {
	cruo.mutation.ClearReportTypeID()
	return cruo
}

// SetReporterID sets the "reporter_id" field.
func (cruo *CommentReportUpdateOne) SetReporterID(i int) *CommentReportUpdateOne {
	cruo.mutation.SetReporterID(i)
	return cruo
}

// SetNillableReporterID sets the "reporter_id" field if the given value is not nil.
func (cruo *CommentReportUpdateOne) SetNillableReporterID(i *int) *CommentReportUpdateOne {
	if i != nil {
		cruo.SetReporterID(*i)
	}
	return cruo
}

// ClearReporterID clears the value of the "reporter_id" field.
func (cruo *CommentReportUpdateOne) ClearReporterID() *CommentReportUpdateOne {
	cruo.mutation.ClearReporterID()
	return cruo
}

// SetDesc sets the "desc" field.
func (cruo *CommentReportUpdateOne) SetDesc(s string) *CommentReportUpdateOne {
	cruo.mutation.SetDesc(s)
	return cruo
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (cruo *CommentReportUpdateOne) SetNillableDesc(s *string) *CommentReportUpdateOne {
	if s != nil {
		cruo.SetDesc(*s)
	}
	return cruo
}

// ClearDesc clears the value of the "desc" field.
func (cruo *CommentReportUpdateOne) ClearDesc() *CommentReportUpdateOne {
	cruo.mutation.ClearDesc()
	return cruo
}

// SetStatus sets the "status" field.
func (cruo *CommentReportUpdateOne) SetStatus(c commentreport.Status) *CommentReportUpdateOne {
	cruo.mutation.SetStatus(c)
	return cruo
}

// SetCreatedAt sets the "created_at" field.
func (cruo *CommentReportUpdateOne) SetCreatedAt(t time.Time) *CommentReportUpdateOne {
	cruo.mutation.SetCreatedAt(t)
	return cruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cruo *CommentReportUpdateOne) SetNillableCreatedAt(t *time.Time) *CommentReportUpdateOne {
	if t != nil {
		cruo.SetCreatedAt(*t)
	}
	return cruo
}

// SetUpdatedAt sets the "updated_at" field.
func (cruo *CommentReportUpdateOne) SetUpdatedAt(t time.Time) *CommentReportUpdateOne {
	cruo.mutation.SetUpdatedAt(t)
	return cruo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (cruo *CommentReportUpdateOne) SetUserID(id int) *CommentReportUpdateOne {
	cruo.mutation.SetUserID(id)
	return cruo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (cruo *CommentReportUpdateOne) SetNillableUserID(id *int) *CommentReportUpdateOne {
	if id != nil {
		cruo = cruo.SetUserID(*id)
	}
	return cruo
}

// SetUser sets the "user" edge to the User entity.
func (cruo *CommentReportUpdateOne) SetUser(u *User) *CommentReportUpdateOne {
	return cruo.SetUserID(u.ID)
}

// SetComment sets the "comment" edge to the Comment entity.
func (cruo *CommentReportUpdateOne) SetComment(c *Comment) *CommentReportUpdateOne {
	return cruo.SetCommentID(c.ID)
}

// SetReportType sets the "report_type" edge to the ReportType entity.
func (cruo *CommentReportUpdateOne) SetReportType(r *ReportType) *CommentReportUpdateOne {
	return cruo.SetReportTypeID(r.ID)
}

// Mutation returns the CommentReportMutation object of the builder.
func (cruo *CommentReportUpdateOne) Mutation() *CommentReportMutation {
	return cruo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (cruo *CommentReportUpdateOne) ClearUser() *CommentReportUpdateOne {
	cruo.mutation.ClearUser()
	return cruo
}

// ClearComment clears the "comment" edge to the Comment entity.
func (cruo *CommentReportUpdateOne) ClearComment() *CommentReportUpdateOne {
	cruo.mutation.ClearComment()
	return cruo
}

// ClearReportType clears the "report_type" edge to the ReportType entity.
func (cruo *CommentReportUpdateOne) ClearReportType() *CommentReportUpdateOne {
	cruo.mutation.ClearReportType()
	return cruo
}

// Where appends a list predicates to the CommentReportUpdate builder.
func (cruo *CommentReportUpdateOne) Where(ps ...predicate.CommentReport) *CommentReportUpdateOne {
	cruo.mutation.Where(ps...)
	return cruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cruo *CommentReportUpdateOne) Select(field string, fields ...string) *CommentReportUpdateOne {
	cruo.fields = append([]string{field}, fields...)
	return cruo
}

// Save executes the query and returns the updated CommentReport entity.
func (cruo *CommentReportUpdateOne) Save(ctx context.Context) (*CommentReport, error) {
	cruo.defaults()
	return withHooks(ctx, cruo.sqlSave, cruo.mutation, cruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cruo *CommentReportUpdateOne) SaveX(ctx context.Context) *CommentReport {
	node, err := cruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cruo *CommentReportUpdateOne) Exec(ctx context.Context) error {
	_, err := cruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cruo *CommentReportUpdateOne) ExecX(ctx context.Context) {
	if err := cruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cruo *CommentReportUpdateOne) defaults() {
	if _, ok := cruo.mutation.UpdatedAt(); !ok {
		v := commentreport.UpdateDefaultUpdatedAt()
		cruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cruo *CommentReportUpdateOne) check() error {
	if v, ok := cruo.mutation.Status(); ok {
		if err := commentreport.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "CommentReport.status": %w`, err)}
		}
	}
	return nil
}

func (cruo *CommentReportUpdateOne) sqlSave(ctx context.Context) (_node *CommentReport, err error) {
	if err := cruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(commentreport.Table, commentreport.Columns, sqlgraph.NewFieldSpec(commentreport.FieldID, field.TypeInt))
	id, ok := cruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CommentReport.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, commentreport.FieldID)
		for _, f := range fields {
			if !commentreport.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != commentreport.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cruo.mutation.Desc(); ok {
		_spec.SetField(commentreport.FieldDesc, field.TypeString, value)
	}
	if cruo.mutation.DescCleared() {
		_spec.ClearField(commentreport.FieldDesc, field.TypeString)
	}
	if value, ok := cruo.mutation.Status(); ok {
		_spec.SetField(commentreport.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := cruo.mutation.CreatedAt(); ok {
		_spec.SetField(commentreport.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cruo.mutation.UpdatedAt(); ok {
		_spec.SetField(commentreport.FieldUpdatedAt, field.TypeTime, value)
	}
	if cruo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   commentreport.UserTable,
			Columns: []string{commentreport.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cruo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   commentreport.UserTable,
			Columns: []string{commentreport.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cruo.mutation.CommentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   commentreport.CommentTable,
			Columns: []string{commentreport.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cruo.mutation.CommentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   commentreport.CommentTable,
			Columns: []string{commentreport.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cruo.mutation.ReportTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   commentreport.ReportTypeTable,
			Columns: []string{commentreport.ReportTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reporttype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cruo.mutation.ReportTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   commentreport.ReportTypeTable,
			Columns: []string{commentreport.ReportTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reporttype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CommentReport{config: cruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{commentreport.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cruo.mutation.done = true
	return _node, nil
}
