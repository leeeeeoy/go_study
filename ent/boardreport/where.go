// Code generated by ent, DO NOT EDIT.

package boardreport

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/leeeeeoy/go_study/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.BoardReport {
	return predicate.BoardReport(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.BoardReport {
	return predicate.BoardReport(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.BoardReport {
	return predicate.BoardReport(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.BoardReport {
	return predicate.BoardReport(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.BoardReport {
	return predicate.BoardReport(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.BoardReport {
	return predicate.BoardReport(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.BoardReport {
	return predicate.BoardReport(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.BoardReport {
	return predicate.BoardReport(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.BoardReport {
	return predicate.BoardReport(sql.FieldLTE(FieldID, id))
}

// BoardID applies equality check predicate on the "board_id" field. It's identical to BoardIDEQ.
func BoardID(v int) predicate.BoardReport {
	return predicate.BoardReport(sql.FieldEQ(FieldBoardID, v))
}

// ReportTypeID applies equality check predicate on the "report_type_id" field. It's identical to ReportTypeIDEQ.
func ReportTypeID(v int) predicate.BoardReport {
	return predicate.BoardReport(sql.FieldEQ(FieldReportTypeID, v))
}

// ReporterID applies equality check predicate on the "reporter_id" field. It's identical to ReporterIDEQ.
func ReporterID(v int) predicate.BoardReport {
	return predicate.BoardReport(sql.FieldEQ(FieldReporterID, v))
}

// Comment applies equality check predicate on the "comment" field. It's identical to CommentEQ.
func Comment(v string) predicate.BoardReport {
	return predicate.BoardReport(sql.FieldEQ(FieldComment, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.BoardReport {
	return predicate.BoardReport(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.BoardReport {
	return predicate.BoardReport(sql.FieldEQ(FieldUpdatedAt, v))
}

// BoardIDEQ applies the EQ predicate on the "board_id" field.
func BoardIDEQ(v int) predicate.BoardReport {
	return predicate.BoardReport(sql.FieldEQ(FieldBoardID, v))
}

// BoardIDNEQ applies the NEQ predicate on the "board_id" field.
func BoardIDNEQ(v int) predicate.BoardReport {
	return predicate.BoardReport(sql.FieldNEQ(FieldBoardID, v))
}

// BoardIDIn applies the In predicate on the "board_id" field.
func BoardIDIn(vs ...int) predicate.BoardReport {
	return predicate.BoardReport(sql.FieldIn(FieldBoardID, vs...))
}

// BoardIDNotIn applies the NotIn predicate on the "board_id" field.
func BoardIDNotIn(vs ...int) predicate.BoardReport {
	return predicate.BoardReport(sql.FieldNotIn(FieldBoardID, vs...))
}

// BoardIDIsNil applies the IsNil predicate on the "board_id" field.
func BoardIDIsNil() predicate.BoardReport {
	return predicate.BoardReport(sql.FieldIsNull(FieldBoardID))
}

// BoardIDNotNil applies the NotNil predicate on the "board_id" field.
func BoardIDNotNil() predicate.BoardReport {
	return predicate.BoardReport(sql.FieldNotNull(FieldBoardID))
}

// ReportTypeIDEQ applies the EQ predicate on the "report_type_id" field.
func ReportTypeIDEQ(v int) predicate.BoardReport {
	return predicate.BoardReport(sql.FieldEQ(FieldReportTypeID, v))
}

// ReportTypeIDNEQ applies the NEQ predicate on the "report_type_id" field.
func ReportTypeIDNEQ(v int) predicate.BoardReport {
	return predicate.BoardReport(sql.FieldNEQ(FieldReportTypeID, v))
}

// ReportTypeIDIn applies the In predicate on the "report_type_id" field.
func ReportTypeIDIn(vs ...int) predicate.BoardReport {
	return predicate.BoardReport(sql.FieldIn(FieldReportTypeID, vs...))
}

// ReportTypeIDNotIn applies the NotIn predicate on the "report_type_id" field.
func ReportTypeIDNotIn(vs ...int) predicate.BoardReport {
	return predicate.BoardReport(sql.FieldNotIn(FieldReportTypeID, vs...))
}

// ReportTypeIDIsNil applies the IsNil predicate on the "report_type_id" field.
func ReportTypeIDIsNil() predicate.BoardReport {
	return predicate.BoardReport(sql.FieldIsNull(FieldReportTypeID))
}

// ReportTypeIDNotNil applies the NotNil predicate on the "report_type_id" field.
func ReportTypeIDNotNil() predicate.BoardReport {
	return predicate.BoardReport(sql.FieldNotNull(FieldReportTypeID))
}

// ReporterIDEQ applies the EQ predicate on the "reporter_id" field.
func ReporterIDEQ(v int) predicate.BoardReport {
	return predicate.BoardReport(sql.FieldEQ(FieldReporterID, v))
}

// ReporterIDNEQ applies the NEQ predicate on the "reporter_id" field.
func ReporterIDNEQ(v int) predicate.BoardReport {
	return predicate.BoardReport(sql.FieldNEQ(FieldReporterID, v))
}

// ReporterIDIn applies the In predicate on the "reporter_id" field.
func ReporterIDIn(vs ...int) predicate.BoardReport {
	return predicate.BoardReport(sql.FieldIn(FieldReporterID, vs...))
}

// ReporterIDNotIn applies the NotIn predicate on the "reporter_id" field.
func ReporterIDNotIn(vs ...int) predicate.BoardReport {
	return predicate.BoardReport(sql.FieldNotIn(FieldReporterID, vs...))
}

// ReporterIDIsNil applies the IsNil predicate on the "reporter_id" field.
func ReporterIDIsNil() predicate.BoardReport {
	return predicate.BoardReport(sql.FieldIsNull(FieldReporterID))
}

// ReporterIDNotNil applies the NotNil predicate on the "reporter_id" field.
func ReporterIDNotNil() predicate.BoardReport {
	return predicate.BoardReport(sql.FieldNotNull(FieldReporterID))
}

// CommentEQ applies the EQ predicate on the "comment" field.
func CommentEQ(v string) predicate.BoardReport {
	return predicate.BoardReport(sql.FieldEQ(FieldComment, v))
}

// CommentNEQ applies the NEQ predicate on the "comment" field.
func CommentNEQ(v string) predicate.BoardReport {
	return predicate.BoardReport(sql.FieldNEQ(FieldComment, v))
}

// CommentIn applies the In predicate on the "comment" field.
func CommentIn(vs ...string) predicate.BoardReport {
	return predicate.BoardReport(sql.FieldIn(FieldComment, vs...))
}

// CommentNotIn applies the NotIn predicate on the "comment" field.
func CommentNotIn(vs ...string) predicate.BoardReport {
	return predicate.BoardReport(sql.FieldNotIn(FieldComment, vs...))
}

// CommentGT applies the GT predicate on the "comment" field.
func CommentGT(v string) predicate.BoardReport {
	return predicate.BoardReport(sql.FieldGT(FieldComment, v))
}

// CommentGTE applies the GTE predicate on the "comment" field.
func CommentGTE(v string) predicate.BoardReport {
	return predicate.BoardReport(sql.FieldGTE(FieldComment, v))
}

// CommentLT applies the LT predicate on the "comment" field.
func CommentLT(v string) predicate.BoardReport {
	return predicate.BoardReport(sql.FieldLT(FieldComment, v))
}

// CommentLTE applies the LTE predicate on the "comment" field.
func CommentLTE(v string) predicate.BoardReport {
	return predicate.BoardReport(sql.FieldLTE(FieldComment, v))
}

// CommentContains applies the Contains predicate on the "comment" field.
func CommentContains(v string) predicate.BoardReport {
	return predicate.BoardReport(sql.FieldContains(FieldComment, v))
}

// CommentHasPrefix applies the HasPrefix predicate on the "comment" field.
func CommentHasPrefix(v string) predicate.BoardReport {
	return predicate.BoardReport(sql.FieldHasPrefix(FieldComment, v))
}

// CommentHasSuffix applies the HasSuffix predicate on the "comment" field.
func CommentHasSuffix(v string) predicate.BoardReport {
	return predicate.BoardReport(sql.FieldHasSuffix(FieldComment, v))
}

// CommentIsNil applies the IsNil predicate on the "comment" field.
func CommentIsNil() predicate.BoardReport {
	return predicate.BoardReport(sql.FieldIsNull(FieldComment))
}

// CommentNotNil applies the NotNil predicate on the "comment" field.
func CommentNotNil() predicate.BoardReport {
	return predicate.BoardReport(sql.FieldNotNull(FieldComment))
}

// CommentEqualFold applies the EqualFold predicate on the "comment" field.
func CommentEqualFold(v string) predicate.BoardReport {
	return predicate.BoardReport(sql.FieldEqualFold(FieldComment, v))
}

// CommentContainsFold applies the ContainsFold predicate on the "comment" field.
func CommentContainsFold(v string) predicate.BoardReport {
	return predicate.BoardReport(sql.FieldContainsFold(FieldComment, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.BoardReport {
	return predicate.BoardReport(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.BoardReport {
	return predicate.BoardReport(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.BoardReport {
	return predicate.BoardReport(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.BoardReport {
	return predicate.BoardReport(sql.FieldNotIn(FieldStatus, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.BoardReport {
	return predicate.BoardReport(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.BoardReport {
	return predicate.BoardReport(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.BoardReport {
	return predicate.BoardReport(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.BoardReport {
	return predicate.BoardReport(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.BoardReport {
	return predicate.BoardReport(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.BoardReport {
	return predicate.BoardReport(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.BoardReport {
	return predicate.BoardReport(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.BoardReport {
	return predicate.BoardReport(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.BoardReport {
	return predicate.BoardReport(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.BoardReport {
	return predicate.BoardReport(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.BoardReport {
	return predicate.BoardReport(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.BoardReport {
	return predicate.BoardReport(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.BoardReport {
	return predicate.BoardReport(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.BoardReport {
	return predicate.BoardReport(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.BoardReport {
	return predicate.BoardReport(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.BoardReport {
	return predicate.BoardReport(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.BoardReport {
	return predicate.BoardReport(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.BoardReport {
	return predicate.BoardReport(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBoard applies the HasEdge predicate on the "board" edge.
func HasBoard() predicate.BoardReport {
	return predicate.BoardReport(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BoardTable, BoardColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBoardWith applies the HasEdge predicate on the "board" edge with a given conditions (other predicates).
func HasBoardWith(preds ...predicate.Board) predicate.BoardReport {
	return predicate.BoardReport(func(s *sql.Selector) {
		step := newBoardStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReportType applies the HasEdge predicate on the "report_type" edge.
func HasReportType() predicate.BoardReport {
	return predicate.BoardReport(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ReportTypeTable, ReportTypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReportTypeWith applies the HasEdge predicate on the "report_type" edge with a given conditions (other predicates).
func HasReportTypeWith(preds ...predicate.ReportType) predicate.BoardReport {
	return predicate.BoardReport(func(s *sql.Selector) {
		step := newReportTypeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BoardReport) predicate.BoardReport {
	return predicate.BoardReport(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BoardReport) predicate.BoardReport {
	return predicate.BoardReport(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BoardReport) predicate.BoardReport {
	return predicate.BoardReport(func(s *sql.Selector) {
		p(s.Not())
	})
}
