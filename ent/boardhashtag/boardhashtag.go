// Code generated by ent, DO NOT EDIT.

package boardhashtag

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the boardhashtag type in the database.
	Label = "board_hashtag"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldBoardID holds the string denoting the board_id field in the database.
	FieldBoardID = "board_id"
	// FieldHashtagID holds the string denoting the hashtag_id field in the database.
	FieldHashtagID = "hashtag_id"
	// EdgeBoard holds the string denoting the board edge name in mutations.
	EdgeBoard = "board"
	// EdgeHashtag holds the string denoting the hashtag edge name in mutations.
	EdgeHashtag = "hashtag"
	// Table holds the table name of the boardhashtag in the database.
	Table = "board_hashtags"
	// BoardTable is the table that holds the board relation/edge.
	BoardTable = "board_hashtags"
	// BoardInverseTable is the table name for the Board entity.
	// It exists in this package in order to avoid circular dependency with the "board" package.
	BoardInverseTable = "boards"
	// BoardColumn is the table column denoting the board relation/edge.
	BoardColumn = "board_id"
	// HashtagTable is the table that holds the hashtag relation/edge.
	HashtagTable = "board_hashtags"
	// HashtagInverseTable is the table name for the Hashtag entity.
	// It exists in this package in order to avoid circular dependency with the "hashtag" package.
	HashtagInverseTable = "hashtags"
	// HashtagColumn is the table column denoting the hashtag relation/edge.
	HashtagColumn = "hashtag_id"
)

// Columns holds all SQL columns for boardhashtag fields.
var Columns = []string{
	FieldID,
	FieldBoardID,
	FieldHashtagID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the BoardHashtag queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByBoardID orders the results by the board_id field.
func ByBoardID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBoardID, opts...).ToFunc()
}

// ByHashtagID orders the results by the hashtag_id field.
func ByHashtagID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHashtagID, opts...).ToFunc()
}

// ByBoardField orders the results by board field.
func ByBoardField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBoardStep(), sql.OrderByField(field, opts...))
	}
}

// ByHashtagField orders the results by hashtag field.
func ByHashtagField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHashtagStep(), sql.OrderByField(field, opts...))
	}
}
func newBoardStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BoardInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, BoardTable, BoardColumn),
	)
}
func newHashtagStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HashtagInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, HashtagTable, HashtagColumn),
	)
}
