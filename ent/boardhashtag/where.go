// Code generated by ent, DO NOT EDIT.

package boardhashtag

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/leeeeeoy/go_study/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.BoardHashtag {
	return predicate.BoardHashtag(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.BoardHashtag {
	return predicate.BoardHashtag(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.BoardHashtag {
	return predicate.BoardHashtag(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.BoardHashtag {
	return predicate.BoardHashtag(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.BoardHashtag {
	return predicate.BoardHashtag(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.BoardHashtag {
	return predicate.BoardHashtag(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.BoardHashtag {
	return predicate.BoardHashtag(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.BoardHashtag {
	return predicate.BoardHashtag(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.BoardHashtag {
	return predicate.BoardHashtag(sql.FieldLTE(FieldID, id))
}

// BoardID applies equality check predicate on the "board_id" field. It's identical to BoardIDEQ.
func BoardID(v int) predicate.BoardHashtag {
	return predicate.BoardHashtag(sql.FieldEQ(FieldBoardID, v))
}

// HashtagID applies equality check predicate on the "hashtag_id" field. It's identical to HashtagIDEQ.
func HashtagID(v int) predicate.BoardHashtag {
	return predicate.BoardHashtag(sql.FieldEQ(FieldHashtagID, v))
}

// BoardIDEQ applies the EQ predicate on the "board_id" field.
func BoardIDEQ(v int) predicate.BoardHashtag {
	return predicate.BoardHashtag(sql.FieldEQ(FieldBoardID, v))
}

// BoardIDNEQ applies the NEQ predicate on the "board_id" field.
func BoardIDNEQ(v int) predicate.BoardHashtag {
	return predicate.BoardHashtag(sql.FieldNEQ(FieldBoardID, v))
}

// BoardIDIn applies the In predicate on the "board_id" field.
func BoardIDIn(vs ...int) predicate.BoardHashtag {
	return predicate.BoardHashtag(sql.FieldIn(FieldBoardID, vs...))
}

// BoardIDNotIn applies the NotIn predicate on the "board_id" field.
func BoardIDNotIn(vs ...int) predicate.BoardHashtag {
	return predicate.BoardHashtag(sql.FieldNotIn(FieldBoardID, vs...))
}

// BoardIDIsNil applies the IsNil predicate on the "board_id" field.
func BoardIDIsNil() predicate.BoardHashtag {
	return predicate.BoardHashtag(sql.FieldIsNull(FieldBoardID))
}

// BoardIDNotNil applies the NotNil predicate on the "board_id" field.
func BoardIDNotNil() predicate.BoardHashtag {
	return predicate.BoardHashtag(sql.FieldNotNull(FieldBoardID))
}

// HashtagIDEQ applies the EQ predicate on the "hashtag_id" field.
func HashtagIDEQ(v int) predicate.BoardHashtag {
	return predicate.BoardHashtag(sql.FieldEQ(FieldHashtagID, v))
}

// HashtagIDNEQ applies the NEQ predicate on the "hashtag_id" field.
func HashtagIDNEQ(v int) predicate.BoardHashtag {
	return predicate.BoardHashtag(sql.FieldNEQ(FieldHashtagID, v))
}

// HashtagIDIn applies the In predicate on the "hashtag_id" field.
func HashtagIDIn(vs ...int) predicate.BoardHashtag {
	return predicate.BoardHashtag(sql.FieldIn(FieldHashtagID, vs...))
}

// HashtagIDNotIn applies the NotIn predicate on the "hashtag_id" field.
func HashtagIDNotIn(vs ...int) predicate.BoardHashtag {
	return predicate.BoardHashtag(sql.FieldNotIn(FieldHashtagID, vs...))
}

// HashtagIDIsNil applies the IsNil predicate on the "hashtag_id" field.
func HashtagIDIsNil() predicate.BoardHashtag {
	return predicate.BoardHashtag(sql.FieldIsNull(FieldHashtagID))
}

// HashtagIDNotNil applies the NotNil predicate on the "hashtag_id" field.
func HashtagIDNotNil() predicate.BoardHashtag {
	return predicate.BoardHashtag(sql.FieldNotNull(FieldHashtagID))
}

// HasBoard applies the HasEdge predicate on the "board" edge.
func HasBoard() predicate.BoardHashtag {
	return predicate.BoardHashtag(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BoardTable, BoardColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBoardWith applies the HasEdge predicate on the "board" edge with a given conditions (other predicates).
func HasBoardWith(preds ...predicate.Board) predicate.BoardHashtag {
	return predicate.BoardHashtag(func(s *sql.Selector) {
		step := newBoardStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHashtag applies the HasEdge predicate on the "hashtag" edge.
func HasHashtag() predicate.BoardHashtag {
	return predicate.BoardHashtag(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, HashtagTable, HashtagColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHashtagWith applies the HasEdge predicate on the "hashtag" edge with a given conditions (other predicates).
func HasHashtagWith(preds ...predicate.Hashtag) predicate.BoardHashtag {
	return predicate.BoardHashtag(func(s *sql.Selector) {
		step := newHashtagStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BoardHashtag) predicate.BoardHashtag {
	return predicate.BoardHashtag(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BoardHashtag) predicate.BoardHashtag {
	return predicate.BoardHashtag(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BoardHashtag) predicate.BoardHashtag {
	return predicate.BoardHashtag(func(s *sql.Selector) {
		p(s.Not())
	})
}
