// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/leeeeeoy/go_study/ent/board"
	"github.com/leeeeeoy/go_study/ent/boardhashtag"
	"github.com/leeeeeoy/go_study/ent/hashtag"
)

// BoardHashtagCreate is the builder for creating a BoardHashtag entity.
type BoardHashtagCreate struct {
	config
	mutation *BoardHashtagMutation
	hooks    []Hook
}

// SetBoardID sets the "board_id" field.
func (bhc *BoardHashtagCreate) SetBoardID(i int) *BoardHashtagCreate {
	bhc.mutation.SetBoardID(i)
	return bhc
}

// SetNillableBoardID sets the "board_id" field if the given value is not nil.
func (bhc *BoardHashtagCreate) SetNillableBoardID(i *int) *BoardHashtagCreate {
	if i != nil {
		bhc.SetBoardID(*i)
	}
	return bhc
}

// SetHashtagID sets the "hashtag_id" field.
func (bhc *BoardHashtagCreate) SetHashtagID(i int) *BoardHashtagCreate {
	bhc.mutation.SetHashtagID(i)
	return bhc
}

// SetNillableHashtagID sets the "hashtag_id" field if the given value is not nil.
func (bhc *BoardHashtagCreate) SetNillableHashtagID(i *int) *BoardHashtagCreate {
	if i != nil {
		bhc.SetHashtagID(*i)
	}
	return bhc
}

// SetBoard sets the "board" edge to the Board entity.
func (bhc *BoardHashtagCreate) SetBoard(b *Board) *BoardHashtagCreate {
	return bhc.SetBoardID(b.ID)
}

// SetHashtag sets the "hashtag" edge to the Hashtag entity.
func (bhc *BoardHashtagCreate) SetHashtag(h *Hashtag) *BoardHashtagCreate {
	return bhc.SetHashtagID(h.ID)
}

// Mutation returns the BoardHashtagMutation object of the builder.
func (bhc *BoardHashtagCreate) Mutation() *BoardHashtagMutation {
	return bhc.mutation
}

// Save creates the BoardHashtag in the database.
func (bhc *BoardHashtagCreate) Save(ctx context.Context) (*BoardHashtag, error) {
	return withHooks(ctx, bhc.sqlSave, bhc.mutation, bhc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bhc *BoardHashtagCreate) SaveX(ctx context.Context) *BoardHashtag {
	v, err := bhc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bhc *BoardHashtagCreate) Exec(ctx context.Context) error {
	_, err := bhc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bhc *BoardHashtagCreate) ExecX(ctx context.Context) {
	if err := bhc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bhc *BoardHashtagCreate) check() error {
	return nil
}

func (bhc *BoardHashtagCreate) sqlSave(ctx context.Context) (*BoardHashtag, error) {
	if err := bhc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bhc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bhc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	bhc.mutation.id = &_node.ID
	bhc.mutation.done = true
	return _node, nil
}

func (bhc *BoardHashtagCreate) createSpec() (*BoardHashtag, *sqlgraph.CreateSpec) {
	var (
		_node = &BoardHashtag{config: bhc.config}
		_spec = sqlgraph.NewCreateSpec(boardhashtag.Table, sqlgraph.NewFieldSpec(boardhashtag.FieldID, field.TypeInt))
	)
	if nodes := bhc.mutation.BoardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   boardhashtag.BoardTable,
			Columns: []string{boardhashtag.BoardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(board.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BoardID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bhc.mutation.HashtagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   boardhashtag.HashtagTable,
			Columns: []string{boardhashtag.HashtagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hashtag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.HashtagID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BoardHashtagCreateBulk is the builder for creating many BoardHashtag entities in bulk.
type BoardHashtagCreateBulk struct {
	config
	builders []*BoardHashtagCreate
}

// Save creates the BoardHashtag entities in the database.
func (bhcb *BoardHashtagCreateBulk) Save(ctx context.Context) ([]*BoardHashtag, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bhcb.builders))
	nodes := make([]*BoardHashtag, len(bhcb.builders))
	mutators := make([]Mutator, len(bhcb.builders))
	for i := range bhcb.builders {
		func(i int, root context.Context) {
			builder := bhcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BoardHashtagMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bhcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bhcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bhcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bhcb *BoardHashtagCreateBulk) SaveX(ctx context.Context) []*BoardHashtag {
	v, err := bhcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bhcb *BoardHashtagCreateBulk) Exec(ctx context.Context) error {
	_, err := bhcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bhcb *BoardHashtagCreateBulk) ExecX(ctx context.Context) {
	if err := bhcb.Exec(ctx); err != nil {
		panic(err)
	}
}
