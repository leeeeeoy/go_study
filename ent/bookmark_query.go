// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/leeeeeoy/go_study/ent/board"
	"github.com/leeeeeoy/go_study/ent/bookmark"
	"github.com/leeeeeoy/go_study/ent/predicate"
	"github.com/leeeeeoy/go_study/ent/user"
)

// BookMarkQuery is the builder for querying BookMark entities.
type BookMarkQuery struct {
	config
	ctx        *QueryContext
	order      []bookmark.OrderOption
	inters     []Interceptor
	predicates []predicate.BookMark
	withBoard  *BoardQuery
	withUser   *UserQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the BookMarkQuery builder.
func (bmq *BookMarkQuery) Where(ps ...predicate.BookMark) *BookMarkQuery {
	bmq.predicates = append(bmq.predicates, ps...)
	return bmq
}

// Limit the number of records to be returned by this query.
func (bmq *BookMarkQuery) Limit(limit int) *BookMarkQuery {
	bmq.ctx.Limit = &limit
	return bmq
}

// Offset to start from.
func (bmq *BookMarkQuery) Offset(offset int) *BookMarkQuery {
	bmq.ctx.Offset = &offset
	return bmq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (bmq *BookMarkQuery) Unique(unique bool) *BookMarkQuery {
	bmq.ctx.Unique = &unique
	return bmq
}

// Order specifies how the records should be ordered.
func (bmq *BookMarkQuery) Order(o ...bookmark.OrderOption) *BookMarkQuery {
	bmq.order = append(bmq.order, o...)
	return bmq
}

// QueryBoard chains the current query on the "board" edge.
func (bmq *BookMarkQuery) QueryBoard() *BoardQuery {
	query := (&BoardClient{config: bmq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(bookmark.Table, bookmark.FieldID, selector),
			sqlgraph.To(board.Table, board.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, bookmark.BoardTable, bookmark.BoardColumn),
		)
		fromU = sqlgraph.SetNeighbors(bmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUser chains the current query on the "user" edge.
func (bmq *BookMarkQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: bmq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(bookmark.Table, bookmark.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, bookmark.UserTable, bookmark.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(bmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first BookMark entity from the query.
// Returns a *NotFoundError when no BookMark was found.
func (bmq *BookMarkQuery) First(ctx context.Context) (*BookMark, error) {
	nodes, err := bmq.Limit(1).All(setContextOp(ctx, bmq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{bookmark.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (bmq *BookMarkQuery) FirstX(ctx context.Context) *BookMark {
	node, err := bmq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first BookMark ID from the query.
// Returns a *NotFoundError when no BookMark ID was found.
func (bmq *BookMarkQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = bmq.Limit(1).IDs(setContextOp(ctx, bmq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{bookmark.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (bmq *BookMarkQuery) FirstIDX(ctx context.Context) int {
	id, err := bmq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single BookMark entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one BookMark entity is found.
// Returns a *NotFoundError when no BookMark entities are found.
func (bmq *BookMarkQuery) Only(ctx context.Context) (*BookMark, error) {
	nodes, err := bmq.Limit(2).All(setContextOp(ctx, bmq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{bookmark.Label}
	default:
		return nil, &NotSingularError{bookmark.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (bmq *BookMarkQuery) OnlyX(ctx context.Context) *BookMark {
	node, err := bmq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only BookMark ID in the query.
// Returns a *NotSingularError when more than one BookMark ID is found.
// Returns a *NotFoundError when no entities are found.
func (bmq *BookMarkQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = bmq.Limit(2).IDs(setContextOp(ctx, bmq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{bookmark.Label}
	default:
		err = &NotSingularError{bookmark.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (bmq *BookMarkQuery) OnlyIDX(ctx context.Context) int {
	id, err := bmq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of BookMarks.
func (bmq *BookMarkQuery) All(ctx context.Context) ([]*BookMark, error) {
	ctx = setContextOp(ctx, bmq.ctx, "All")
	if err := bmq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*BookMark, *BookMarkQuery]()
	return withInterceptors[[]*BookMark](ctx, bmq, qr, bmq.inters)
}

// AllX is like All, but panics if an error occurs.
func (bmq *BookMarkQuery) AllX(ctx context.Context) []*BookMark {
	nodes, err := bmq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of BookMark IDs.
func (bmq *BookMarkQuery) IDs(ctx context.Context) (ids []int, err error) {
	if bmq.ctx.Unique == nil && bmq.path != nil {
		bmq.Unique(true)
	}
	ctx = setContextOp(ctx, bmq.ctx, "IDs")
	if err = bmq.Select(bookmark.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (bmq *BookMarkQuery) IDsX(ctx context.Context) []int {
	ids, err := bmq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (bmq *BookMarkQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, bmq.ctx, "Count")
	if err := bmq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, bmq, querierCount[*BookMarkQuery](), bmq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (bmq *BookMarkQuery) CountX(ctx context.Context) int {
	count, err := bmq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (bmq *BookMarkQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, bmq.ctx, "Exist")
	switch _, err := bmq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (bmq *BookMarkQuery) ExistX(ctx context.Context) bool {
	exist, err := bmq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the BookMarkQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (bmq *BookMarkQuery) Clone() *BookMarkQuery {
	if bmq == nil {
		return nil
	}
	return &BookMarkQuery{
		config:     bmq.config,
		ctx:        bmq.ctx.Clone(),
		order:      append([]bookmark.OrderOption{}, bmq.order...),
		inters:     append([]Interceptor{}, bmq.inters...),
		predicates: append([]predicate.BookMark{}, bmq.predicates...),
		withBoard:  bmq.withBoard.Clone(),
		withUser:   bmq.withUser.Clone(),
		// clone intermediate query.
		sql:  bmq.sql.Clone(),
		path: bmq.path,
	}
}

// WithBoard tells the query-builder to eager-load the nodes that are connected to
// the "board" edge. The optional arguments are used to configure the query builder of the edge.
func (bmq *BookMarkQuery) WithBoard(opts ...func(*BoardQuery)) *BookMarkQuery {
	query := (&BoardClient{config: bmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bmq.withBoard = query
	return bmq
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (bmq *BookMarkQuery) WithUser(opts ...func(*UserQuery)) *BookMarkQuery {
	query := (&UserClient{config: bmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bmq.withUser = query
	return bmq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		UserID int `json:"user_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.BookMark.Query().
//		GroupBy(bookmark.FieldUserID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (bmq *BookMarkQuery) GroupBy(field string, fields ...string) *BookMarkGroupBy {
	bmq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &BookMarkGroupBy{build: bmq}
	grbuild.flds = &bmq.ctx.Fields
	grbuild.label = bookmark.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		UserID int `json:"user_id,omitempty"`
//	}
//
//	client.BookMark.Query().
//		Select(bookmark.FieldUserID).
//		Scan(ctx, &v)
func (bmq *BookMarkQuery) Select(fields ...string) *BookMarkSelect {
	bmq.ctx.Fields = append(bmq.ctx.Fields, fields...)
	sbuild := &BookMarkSelect{BookMarkQuery: bmq}
	sbuild.label = bookmark.Label
	sbuild.flds, sbuild.scan = &bmq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a BookMarkSelect configured with the given aggregations.
func (bmq *BookMarkQuery) Aggregate(fns ...AggregateFunc) *BookMarkSelect {
	return bmq.Select().Aggregate(fns...)
}

func (bmq *BookMarkQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range bmq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, bmq); err != nil {
				return err
			}
		}
	}
	for _, f := range bmq.ctx.Fields {
		if !bookmark.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if bmq.path != nil {
		prev, err := bmq.path(ctx)
		if err != nil {
			return err
		}
		bmq.sql = prev
	}
	return nil
}

func (bmq *BookMarkQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*BookMark, error) {
	var (
		nodes       = []*BookMark{}
		_spec       = bmq.querySpec()
		loadedTypes = [2]bool{
			bmq.withBoard != nil,
			bmq.withUser != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*BookMark).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &BookMark{config: bmq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, bmq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := bmq.withBoard; query != nil {
		if err := bmq.loadBoard(ctx, query, nodes, nil,
			func(n *BookMark, e *Board) { n.Edges.Board = e }); err != nil {
			return nil, err
		}
	}
	if query := bmq.withUser; query != nil {
		if err := bmq.loadUser(ctx, query, nodes, nil,
			func(n *BookMark, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (bmq *BookMarkQuery) loadBoard(ctx context.Context, query *BoardQuery, nodes []*BookMark, init func(*BookMark), assign func(*BookMark, *Board)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*BookMark)
	for i := range nodes {
		fk := nodes[i].BoardID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(board.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "board_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (bmq *BookMarkQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*BookMark, init func(*BookMark), assign func(*BookMark, *User)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*BookMark)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (bmq *BookMarkQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := bmq.querySpec()
	_spec.Node.Columns = bmq.ctx.Fields
	if len(bmq.ctx.Fields) > 0 {
		_spec.Unique = bmq.ctx.Unique != nil && *bmq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, bmq.driver, _spec)
}

func (bmq *BookMarkQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(bookmark.Table, bookmark.Columns, sqlgraph.NewFieldSpec(bookmark.FieldID, field.TypeInt))
	_spec.From = bmq.sql
	if unique := bmq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if bmq.path != nil {
		_spec.Unique = true
	}
	if fields := bmq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bookmark.FieldID)
		for i := range fields {
			if fields[i] != bookmark.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if bmq.withBoard != nil {
			_spec.Node.AddColumnOnce(bookmark.FieldBoardID)
		}
		if bmq.withUser != nil {
			_spec.Node.AddColumnOnce(bookmark.FieldUserID)
		}
	}
	if ps := bmq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := bmq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := bmq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := bmq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (bmq *BookMarkQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(bmq.driver.Dialect())
	t1 := builder.Table(bookmark.Table)
	columns := bmq.ctx.Fields
	if len(columns) == 0 {
		columns = bookmark.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if bmq.sql != nil {
		selector = bmq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if bmq.ctx.Unique != nil && *bmq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range bmq.predicates {
		p(selector)
	}
	for _, p := range bmq.order {
		p(selector)
	}
	if offset := bmq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := bmq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// BookMarkGroupBy is the group-by builder for BookMark entities.
type BookMarkGroupBy struct {
	selector
	build *BookMarkQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (bmgb *BookMarkGroupBy) Aggregate(fns ...AggregateFunc) *BookMarkGroupBy {
	bmgb.fns = append(bmgb.fns, fns...)
	return bmgb
}

// Scan applies the selector query and scans the result into the given value.
func (bmgb *BookMarkGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, bmgb.build.ctx, "GroupBy")
	if err := bmgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BookMarkQuery, *BookMarkGroupBy](ctx, bmgb.build, bmgb, bmgb.build.inters, v)
}

func (bmgb *BookMarkGroupBy) sqlScan(ctx context.Context, root *BookMarkQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(bmgb.fns))
	for _, fn := range bmgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*bmgb.flds)+len(bmgb.fns))
		for _, f := range *bmgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*bmgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bmgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// BookMarkSelect is the builder for selecting fields of BookMark entities.
type BookMarkSelect struct {
	*BookMarkQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (bms *BookMarkSelect) Aggregate(fns ...AggregateFunc) *BookMarkSelect {
	bms.fns = append(bms.fns, fns...)
	return bms
}

// Scan applies the selector query and scans the result into the given value.
func (bms *BookMarkSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, bms.ctx, "Select")
	if err := bms.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BookMarkQuery, *BookMarkSelect](ctx, bms.BookMarkQuery, bms, bms.inters, v)
}

func (bms *BookMarkSelect) sqlScan(ctx context.Context, root *BookMarkQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(bms.fns))
	for _, fn := range bms.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*bms.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bms.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
