// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/leeeeeoy/go_study/ent/boardreport"
	"github.com/leeeeeoy/go_study/ent/commentreport"
	"github.com/leeeeeoy/go_study/ent/predicate"
	"github.com/leeeeeoy/go_study/ent/reporttype"
)

// ReportTypeUpdate is the builder for updating ReportType entities.
type ReportTypeUpdate struct {
	config
	hooks    []Hook
	mutation *ReportTypeMutation
}

// Where appends a list predicates to the ReportTypeUpdate builder.
func (rtu *ReportTypeUpdate) Where(ps ...predicate.ReportType) *ReportTypeUpdate {
	rtu.mutation.Where(ps...)
	return rtu
}

// SetDescription sets the "description" field.
func (rtu *ReportTypeUpdate) SetDescription(s string) *ReportTypeUpdate {
	rtu.mutation.SetDescription(s)
	return rtu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (rtu *ReportTypeUpdate) SetNillableDescription(s *string) *ReportTypeUpdate {
	if s != nil {
		rtu.SetDescription(*s)
	}
	return rtu
}

// ClearDescription clears the value of the "description" field.
func (rtu *ReportTypeUpdate) ClearDescription() *ReportTypeUpdate {
	rtu.mutation.ClearDescription()
	return rtu
}

// SetInActive sets the "in_active" field.
func (rtu *ReportTypeUpdate) SetInActive(b bool) *ReportTypeUpdate {
	rtu.mutation.SetInActive(b)
	return rtu
}

// SetNillableInActive sets the "in_active" field if the given value is not nil.
func (rtu *ReportTypeUpdate) SetNillableInActive(b *bool) *ReportTypeUpdate {
	if b != nil {
		rtu.SetInActive(*b)
	}
	return rtu
}

// SetOrderNum sets the "order_num" field.
func (rtu *ReportTypeUpdate) SetOrderNum(i int) *ReportTypeUpdate {
	rtu.mutation.ResetOrderNum()
	rtu.mutation.SetOrderNum(i)
	return rtu
}

// AddOrderNum adds i to the "order_num" field.
func (rtu *ReportTypeUpdate) AddOrderNum(i int) *ReportTypeUpdate {
	rtu.mutation.AddOrderNum(i)
	return rtu
}

// SetCommentReportID sets the "comment_report" edge to the CommentReport entity by ID.
func (rtu *ReportTypeUpdate) SetCommentReportID(id int) *ReportTypeUpdate {
	rtu.mutation.SetCommentReportID(id)
	return rtu
}

// SetNillableCommentReportID sets the "comment_report" edge to the CommentReport entity by ID if the given value is not nil.
func (rtu *ReportTypeUpdate) SetNillableCommentReportID(id *int) *ReportTypeUpdate {
	if id != nil {
		rtu = rtu.SetCommentReportID(*id)
	}
	return rtu
}

// SetCommentReport sets the "comment_report" edge to the CommentReport entity.
func (rtu *ReportTypeUpdate) SetCommentReport(c *CommentReport) *ReportTypeUpdate {
	return rtu.SetCommentReportID(c.ID)
}

// SetBoardReportID sets the "board_report" edge to the BoardReport entity by ID.
func (rtu *ReportTypeUpdate) SetBoardReportID(id int) *ReportTypeUpdate {
	rtu.mutation.SetBoardReportID(id)
	return rtu
}

// SetNillableBoardReportID sets the "board_report" edge to the BoardReport entity by ID if the given value is not nil.
func (rtu *ReportTypeUpdate) SetNillableBoardReportID(id *int) *ReportTypeUpdate {
	if id != nil {
		rtu = rtu.SetBoardReportID(*id)
	}
	return rtu
}

// SetBoardReport sets the "board_report" edge to the BoardReport entity.
func (rtu *ReportTypeUpdate) SetBoardReport(b *BoardReport) *ReportTypeUpdate {
	return rtu.SetBoardReportID(b.ID)
}

// Mutation returns the ReportTypeMutation object of the builder.
func (rtu *ReportTypeUpdate) Mutation() *ReportTypeMutation {
	return rtu.mutation
}

// ClearCommentReport clears the "comment_report" edge to the CommentReport entity.
func (rtu *ReportTypeUpdate) ClearCommentReport() *ReportTypeUpdate {
	rtu.mutation.ClearCommentReport()
	return rtu
}

// ClearBoardReport clears the "board_report" edge to the BoardReport entity.
func (rtu *ReportTypeUpdate) ClearBoardReport() *ReportTypeUpdate {
	rtu.mutation.ClearBoardReport()
	return rtu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rtu *ReportTypeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rtu.sqlSave, rtu.mutation, rtu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rtu *ReportTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := rtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rtu *ReportTypeUpdate) Exec(ctx context.Context) error {
	_, err := rtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rtu *ReportTypeUpdate) ExecX(ctx context.Context) {
	if err := rtu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rtu *ReportTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(reporttype.Table, reporttype.Columns, sqlgraph.NewFieldSpec(reporttype.FieldID, field.TypeInt))
	if ps := rtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rtu.mutation.Description(); ok {
		_spec.SetField(reporttype.FieldDescription, field.TypeString, value)
	}
	if rtu.mutation.DescriptionCleared() {
		_spec.ClearField(reporttype.FieldDescription, field.TypeString)
	}
	if value, ok := rtu.mutation.InActive(); ok {
		_spec.SetField(reporttype.FieldInActive, field.TypeBool, value)
	}
	if value, ok := rtu.mutation.OrderNum(); ok {
		_spec.SetField(reporttype.FieldOrderNum, field.TypeInt, value)
	}
	if value, ok := rtu.mutation.AddedOrderNum(); ok {
		_spec.AddField(reporttype.FieldOrderNum, field.TypeInt, value)
	}
	if rtu.mutation.CommentReportCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   reporttype.CommentReportTable,
			Columns: []string{reporttype.CommentReportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commentreport.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtu.mutation.CommentReportIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   reporttype.CommentReportTable,
			Columns: []string{reporttype.CommentReportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commentreport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rtu.mutation.BoardReportCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   reporttype.BoardReportTable,
			Columns: []string{reporttype.BoardReportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(boardreport.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtu.mutation.BoardReportIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   reporttype.BoardReportTable,
			Columns: []string{reporttype.BoardReportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(boardreport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reporttype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rtu.mutation.done = true
	return n, nil
}

// ReportTypeUpdateOne is the builder for updating a single ReportType entity.
type ReportTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReportTypeMutation
}

// SetDescription sets the "description" field.
func (rtuo *ReportTypeUpdateOne) SetDescription(s string) *ReportTypeUpdateOne {
	rtuo.mutation.SetDescription(s)
	return rtuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (rtuo *ReportTypeUpdateOne) SetNillableDescription(s *string) *ReportTypeUpdateOne {
	if s != nil {
		rtuo.SetDescription(*s)
	}
	return rtuo
}

// ClearDescription clears the value of the "description" field.
func (rtuo *ReportTypeUpdateOne) ClearDescription() *ReportTypeUpdateOne {
	rtuo.mutation.ClearDescription()
	return rtuo
}

// SetInActive sets the "in_active" field.
func (rtuo *ReportTypeUpdateOne) SetInActive(b bool) *ReportTypeUpdateOne {
	rtuo.mutation.SetInActive(b)
	return rtuo
}

// SetNillableInActive sets the "in_active" field if the given value is not nil.
func (rtuo *ReportTypeUpdateOne) SetNillableInActive(b *bool) *ReportTypeUpdateOne {
	if b != nil {
		rtuo.SetInActive(*b)
	}
	return rtuo
}

// SetOrderNum sets the "order_num" field.
func (rtuo *ReportTypeUpdateOne) SetOrderNum(i int) *ReportTypeUpdateOne {
	rtuo.mutation.ResetOrderNum()
	rtuo.mutation.SetOrderNum(i)
	return rtuo
}

// AddOrderNum adds i to the "order_num" field.
func (rtuo *ReportTypeUpdateOne) AddOrderNum(i int) *ReportTypeUpdateOne {
	rtuo.mutation.AddOrderNum(i)
	return rtuo
}

// SetCommentReportID sets the "comment_report" edge to the CommentReport entity by ID.
func (rtuo *ReportTypeUpdateOne) SetCommentReportID(id int) *ReportTypeUpdateOne {
	rtuo.mutation.SetCommentReportID(id)
	return rtuo
}

// SetNillableCommentReportID sets the "comment_report" edge to the CommentReport entity by ID if the given value is not nil.
func (rtuo *ReportTypeUpdateOne) SetNillableCommentReportID(id *int) *ReportTypeUpdateOne {
	if id != nil {
		rtuo = rtuo.SetCommentReportID(*id)
	}
	return rtuo
}

// SetCommentReport sets the "comment_report" edge to the CommentReport entity.
func (rtuo *ReportTypeUpdateOne) SetCommentReport(c *CommentReport) *ReportTypeUpdateOne {
	return rtuo.SetCommentReportID(c.ID)
}

// SetBoardReportID sets the "board_report" edge to the BoardReport entity by ID.
func (rtuo *ReportTypeUpdateOne) SetBoardReportID(id int) *ReportTypeUpdateOne {
	rtuo.mutation.SetBoardReportID(id)
	return rtuo
}

// SetNillableBoardReportID sets the "board_report" edge to the BoardReport entity by ID if the given value is not nil.
func (rtuo *ReportTypeUpdateOne) SetNillableBoardReportID(id *int) *ReportTypeUpdateOne {
	if id != nil {
		rtuo = rtuo.SetBoardReportID(*id)
	}
	return rtuo
}

// SetBoardReport sets the "board_report" edge to the BoardReport entity.
func (rtuo *ReportTypeUpdateOne) SetBoardReport(b *BoardReport) *ReportTypeUpdateOne {
	return rtuo.SetBoardReportID(b.ID)
}

// Mutation returns the ReportTypeMutation object of the builder.
func (rtuo *ReportTypeUpdateOne) Mutation() *ReportTypeMutation {
	return rtuo.mutation
}

// ClearCommentReport clears the "comment_report" edge to the CommentReport entity.
func (rtuo *ReportTypeUpdateOne) ClearCommentReport() *ReportTypeUpdateOne {
	rtuo.mutation.ClearCommentReport()
	return rtuo
}

// ClearBoardReport clears the "board_report" edge to the BoardReport entity.
func (rtuo *ReportTypeUpdateOne) ClearBoardReport() *ReportTypeUpdateOne {
	rtuo.mutation.ClearBoardReport()
	return rtuo
}

// Where appends a list predicates to the ReportTypeUpdate builder.
func (rtuo *ReportTypeUpdateOne) Where(ps ...predicate.ReportType) *ReportTypeUpdateOne {
	rtuo.mutation.Where(ps...)
	return rtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rtuo *ReportTypeUpdateOne) Select(field string, fields ...string) *ReportTypeUpdateOne {
	rtuo.fields = append([]string{field}, fields...)
	return rtuo
}

// Save executes the query and returns the updated ReportType entity.
func (rtuo *ReportTypeUpdateOne) Save(ctx context.Context) (*ReportType, error) {
	return withHooks(ctx, rtuo.sqlSave, rtuo.mutation, rtuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rtuo *ReportTypeUpdateOne) SaveX(ctx context.Context) *ReportType {
	node, err := rtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rtuo *ReportTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := rtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rtuo *ReportTypeUpdateOne) ExecX(ctx context.Context) {
	if err := rtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rtuo *ReportTypeUpdateOne) sqlSave(ctx context.Context) (_node *ReportType, err error) {
	_spec := sqlgraph.NewUpdateSpec(reporttype.Table, reporttype.Columns, sqlgraph.NewFieldSpec(reporttype.FieldID, field.TypeInt))
	id, ok := rtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ReportType.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, reporttype.FieldID)
		for _, f := range fields {
			if !reporttype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != reporttype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rtuo.mutation.Description(); ok {
		_spec.SetField(reporttype.FieldDescription, field.TypeString, value)
	}
	if rtuo.mutation.DescriptionCleared() {
		_spec.ClearField(reporttype.FieldDescription, field.TypeString)
	}
	if value, ok := rtuo.mutation.InActive(); ok {
		_spec.SetField(reporttype.FieldInActive, field.TypeBool, value)
	}
	if value, ok := rtuo.mutation.OrderNum(); ok {
		_spec.SetField(reporttype.FieldOrderNum, field.TypeInt, value)
	}
	if value, ok := rtuo.mutation.AddedOrderNum(); ok {
		_spec.AddField(reporttype.FieldOrderNum, field.TypeInt, value)
	}
	if rtuo.mutation.CommentReportCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   reporttype.CommentReportTable,
			Columns: []string{reporttype.CommentReportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commentreport.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtuo.mutation.CommentReportIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   reporttype.CommentReportTable,
			Columns: []string{reporttype.CommentReportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commentreport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rtuo.mutation.BoardReportCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   reporttype.BoardReportTable,
			Columns: []string{reporttype.BoardReportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(boardreport.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtuo.mutation.BoardReportIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   reporttype.BoardReportTable,
			Columns: []string{reporttype.BoardReportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(boardreport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ReportType{config: rtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reporttype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rtuo.mutation.done = true
	return _node, nil
}
