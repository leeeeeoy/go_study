// Code generated by ent, DO NOT EDIT.

package commentreport

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/leeeeeoy/go_study/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CommentReport {
	return predicate.CommentReport(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CommentReport {
	return predicate.CommentReport(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CommentReport {
	return predicate.CommentReport(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CommentReport {
	return predicate.CommentReport(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CommentReport {
	return predicate.CommentReport(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CommentReport {
	return predicate.CommentReport(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CommentReport {
	return predicate.CommentReport(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CommentReport {
	return predicate.CommentReport(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CommentReport {
	return predicate.CommentReport(sql.FieldLTE(FieldID, id))
}

// CommentID applies equality check predicate on the "comment_id" field. It's identical to CommentIDEQ.
func CommentID(v int) predicate.CommentReport {
	return predicate.CommentReport(sql.FieldEQ(FieldCommentID, v))
}

// ReportTypeID applies equality check predicate on the "report_type_id" field. It's identical to ReportTypeIDEQ.
func ReportTypeID(v int) predicate.CommentReport {
	return predicate.CommentReport(sql.FieldEQ(FieldReportTypeID, v))
}

// ReporterID applies equality check predicate on the "reporter_id" field. It's identical to ReporterIDEQ.
func ReporterID(v int) predicate.CommentReport {
	return predicate.CommentReport(sql.FieldEQ(FieldReporterID, v))
}

// Desc applies equality check predicate on the "desc" field. It's identical to DescEQ.
func Desc(v string) predicate.CommentReport {
	return predicate.CommentReport(sql.FieldEQ(FieldDesc, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.CommentReport {
	return predicate.CommentReport(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.CommentReport {
	return predicate.CommentReport(sql.FieldEQ(FieldUpdatedAt, v))
}

// CommentIDEQ applies the EQ predicate on the "comment_id" field.
func CommentIDEQ(v int) predicate.CommentReport {
	return predicate.CommentReport(sql.FieldEQ(FieldCommentID, v))
}

// CommentIDNEQ applies the NEQ predicate on the "comment_id" field.
func CommentIDNEQ(v int) predicate.CommentReport {
	return predicate.CommentReport(sql.FieldNEQ(FieldCommentID, v))
}

// CommentIDIn applies the In predicate on the "comment_id" field.
func CommentIDIn(vs ...int) predicate.CommentReport {
	return predicate.CommentReport(sql.FieldIn(FieldCommentID, vs...))
}

// CommentIDNotIn applies the NotIn predicate on the "comment_id" field.
func CommentIDNotIn(vs ...int) predicate.CommentReport {
	return predicate.CommentReport(sql.FieldNotIn(FieldCommentID, vs...))
}

// CommentIDIsNil applies the IsNil predicate on the "comment_id" field.
func CommentIDIsNil() predicate.CommentReport {
	return predicate.CommentReport(sql.FieldIsNull(FieldCommentID))
}

// CommentIDNotNil applies the NotNil predicate on the "comment_id" field.
func CommentIDNotNil() predicate.CommentReport {
	return predicate.CommentReport(sql.FieldNotNull(FieldCommentID))
}

// ReportTypeIDEQ applies the EQ predicate on the "report_type_id" field.
func ReportTypeIDEQ(v int) predicate.CommentReport {
	return predicate.CommentReport(sql.FieldEQ(FieldReportTypeID, v))
}

// ReportTypeIDNEQ applies the NEQ predicate on the "report_type_id" field.
func ReportTypeIDNEQ(v int) predicate.CommentReport {
	return predicate.CommentReport(sql.FieldNEQ(FieldReportTypeID, v))
}

// ReportTypeIDIn applies the In predicate on the "report_type_id" field.
func ReportTypeIDIn(vs ...int) predicate.CommentReport {
	return predicate.CommentReport(sql.FieldIn(FieldReportTypeID, vs...))
}

// ReportTypeIDNotIn applies the NotIn predicate on the "report_type_id" field.
func ReportTypeIDNotIn(vs ...int) predicate.CommentReport {
	return predicate.CommentReport(sql.FieldNotIn(FieldReportTypeID, vs...))
}

// ReportTypeIDIsNil applies the IsNil predicate on the "report_type_id" field.
func ReportTypeIDIsNil() predicate.CommentReport {
	return predicate.CommentReport(sql.FieldIsNull(FieldReportTypeID))
}

// ReportTypeIDNotNil applies the NotNil predicate on the "report_type_id" field.
func ReportTypeIDNotNil() predicate.CommentReport {
	return predicate.CommentReport(sql.FieldNotNull(FieldReportTypeID))
}

// ReporterIDEQ applies the EQ predicate on the "reporter_id" field.
func ReporterIDEQ(v int) predicate.CommentReport {
	return predicate.CommentReport(sql.FieldEQ(FieldReporterID, v))
}

// ReporterIDNEQ applies the NEQ predicate on the "reporter_id" field.
func ReporterIDNEQ(v int) predicate.CommentReport {
	return predicate.CommentReport(sql.FieldNEQ(FieldReporterID, v))
}

// ReporterIDIn applies the In predicate on the "reporter_id" field.
func ReporterIDIn(vs ...int) predicate.CommentReport {
	return predicate.CommentReport(sql.FieldIn(FieldReporterID, vs...))
}

// ReporterIDNotIn applies the NotIn predicate on the "reporter_id" field.
func ReporterIDNotIn(vs ...int) predicate.CommentReport {
	return predicate.CommentReport(sql.FieldNotIn(FieldReporterID, vs...))
}

// ReporterIDIsNil applies the IsNil predicate on the "reporter_id" field.
func ReporterIDIsNil() predicate.CommentReport {
	return predicate.CommentReport(sql.FieldIsNull(FieldReporterID))
}

// ReporterIDNotNil applies the NotNil predicate on the "reporter_id" field.
func ReporterIDNotNil() predicate.CommentReport {
	return predicate.CommentReport(sql.FieldNotNull(FieldReporterID))
}

// DescEQ applies the EQ predicate on the "desc" field.
func DescEQ(v string) predicate.CommentReport {
	return predicate.CommentReport(sql.FieldEQ(FieldDesc, v))
}

// DescNEQ applies the NEQ predicate on the "desc" field.
func DescNEQ(v string) predicate.CommentReport {
	return predicate.CommentReport(sql.FieldNEQ(FieldDesc, v))
}

// DescIn applies the In predicate on the "desc" field.
func DescIn(vs ...string) predicate.CommentReport {
	return predicate.CommentReport(sql.FieldIn(FieldDesc, vs...))
}

// DescNotIn applies the NotIn predicate on the "desc" field.
func DescNotIn(vs ...string) predicate.CommentReport {
	return predicate.CommentReport(sql.FieldNotIn(FieldDesc, vs...))
}

// DescGT applies the GT predicate on the "desc" field.
func DescGT(v string) predicate.CommentReport {
	return predicate.CommentReport(sql.FieldGT(FieldDesc, v))
}

// DescGTE applies the GTE predicate on the "desc" field.
func DescGTE(v string) predicate.CommentReport {
	return predicate.CommentReport(sql.FieldGTE(FieldDesc, v))
}

// DescLT applies the LT predicate on the "desc" field.
func DescLT(v string) predicate.CommentReport {
	return predicate.CommentReport(sql.FieldLT(FieldDesc, v))
}

// DescLTE applies the LTE predicate on the "desc" field.
func DescLTE(v string) predicate.CommentReport {
	return predicate.CommentReport(sql.FieldLTE(FieldDesc, v))
}

// DescContains applies the Contains predicate on the "desc" field.
func DescContains(v string) predicate.CommentReport {
	return predicate.CommentReport(sql.FieldContains(FieldDesc, v))
}

// DescHasPrefix applies the HasPrefix predicate on the "desc" field.
func DescHasPrefix(v string) predicate.CommentReport {
	return predicate.CommentReport(sql.FieldHasPrefix(FieldDesc, v))
}

// DescHasSuffix applies the HasSuffix predicate on the "desc" field.
func DescHasSuffix(v string) predicate.CommentReport {
	return predicate.CommentReport(sql.FieldHasSuffix(FieldDesc, v))
}

// DescIsNil applies the IsNil predicate on the "desc" field.
func DescIsNil() predicate.CommentReport {
	return predicate.CommentReport(sql.FieldIsNull(FieldDesc))
}

// DescNotNil applies the NotNil predicate on the "desc" field.
func DescNotNil() predicate.CommentReport {
	return predicate.CommentReport(sql.FieldNotNull(FieldDesc))
}

// DescEqualFold applies the EqualFold predicate on the "desc" field.
func DescEqualFold(v string) predicate.CommentReport {
	return predicate.CommentReport(sql.FieldEqualFold(FieldDesc, v))
}

// DescContainsFold applies the ContainsFold predicate on the "desc" field.
func DescContainsFold(v string) predicate.CommentReport {
	return predicate.CommentReport(sql.FieldContainsFold(FieldDesc, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.CommentReport {
	return predicate.CommentReport(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.CommentReport {
	return predicate.CommentReport(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.CommentReport {
	return predicate.CommentReport(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.CommentReport {
	return predicate.CommentReport(sql.FieldNotIn(FieldStatus, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.CommentReport {
	return predicate.CommentReport(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.CommentReport {
	return predicate.CommentReport(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.CommentReport {
	return predicate.CommentReport(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.CommentReport {
	return predicate.CommentReport(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.CommentReport {
	return predicate.CommentReport(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.CommentReport {
	return predicate.CommentReport(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.CommentReport {
	return predicate.CommentReport(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.CommentReport {
	return predicate.CommentReport(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.CommentReport {
	return predicate.CommentReport(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.CommentReport {
	return predicate.CommentReport(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.CommentReport {
	return predicate.CommentReport(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.CommentReport {
	return predicate.CommentReport(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.CommentReport {
	return predicate.CommentReport(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.CommentReport {
	return predicate.CommentReport(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.CommentReport {
	return predicate.CommentReport(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.CommentReport {
	return predicate.CommentReport(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.CommentReport {
	return predicate.CommentReport(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.CommentReport {
	return predicate.CommentReport(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasComment applies the HasEdge predicate on the "comment" edge.
func HasComment() predicate.CommentReport {
	return predicate.CommentReport(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CommentTable, CommentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCommentWith applies the HasEdge predicate on the "comment" edge with a given conditions (other predicates).
func HasCommentWith(preds ...predicate.Comment) predicate.CommentReport {
	return predicate.CommentReport(func(s *sql.Selector) {
		step := newCommentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReportType applies the HasEdge predicate on the "report_type" edge.
func HasReportType() predicate.CommentReport {
	return predicate.CommentReport(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ReportTypeTable, ReportTypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReportTypeWith applies the HasEdge predicate on the "report_type" edge with a given conditions (other predicates).
func HasReportTypeWith(preds ...predicate.ReportType) predicate.CommentReport {
	return predicate.CommentReport(func(s *sql.Selector) {
		step := newReportTypeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CommentReport) predicate.CommentReport {
	return predicate.CommentReport(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CommentReport) predicate.CommentReport {
	return predicate.CommentReport(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CommentReport) predicate.CommentReport {
	return predicate.CommentReport(func(s *sql.Selector) {
		p(s.Not())
	})
}
