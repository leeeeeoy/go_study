// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/leeeeeoy/go_study/ent/boardhashtag"
	"github.com/leeeeeoy/go_study/ent/predicate"
)

// BoardHashtagDelete is the builder for deleting a BoardHashtag entity.
type BoardHashtagDelete struct {
	config
	hooks    []Hook
	mutation *BoardHashtagMutation
}

// Where appends a list predicates to the BoardHashtagDelete builder.
func (bhd *BoardHashtagDelete) Where(ps ...predicate.BoardHashtag) *BoardHashtagDelete {
	bhd.mutation.Where(ps...)
	return bhd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (bhd *BoardHashtagDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, bhd.sqlExec, bhd.mutation, bhd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (bhd *BoardHashtagDelete) ExecX(ctx context.Context) int {
	n, err := bhd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (bhd *BoardHashtagDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(boardhashtag.Table, sqlgraph.NewFieldSpec(boardhashtag.FieldID, field.TypeInt))
	if ps := bhd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, bhd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	bhd.mutation.done = true
	return affected, err
}

// BoardHashtagDeleteOne is the builder for deleting a single BoardHashtag entity.
type BoardHashtagDeleteOne struct {
	bhd *BoardHashtagDelete
}

// Where appends a list predicates to the BoardHashtagDelete builder.
func (bhdo *BoardHashtagDeleteOne) Where(ps ...predicate.BoardHashtag) *BoardHashtagDeleteOne {
	bhdo.bhd.mutation.Where(ps...)
	return bhdo
}

// Exec executes the deletion query.
func (bhdo *BoardHashtagDeleteOne) Exec(ctx context.Context) error {
	n, err := bhdo.bhd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{boardhashtag.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (bhdo *BoardHashtagDeleteOne) ExecX(ctx context.Context) {
	if err := bhdo.Exec(ctx); err != nil {
		panic(err)
	}
}
