// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/leeeeeoy/go_study/ent/comment"
	"github.com/leeeeeoy/go_study/ent/commentmention"
	"github.com/leeeeeoy/go_study/ent/user"
)

// CommentMentionCreate is the builder for creating a CommentMention entity.
type CommentMentionCreate struct {
	config
	mutation *CommentMentionMutation
	hooks    []Hook
}

// SetCommentID sets the "comment_id" field.
func (cmc *CommentMentionCreate) SetCommentID(i int) *CommentMentionCreate {
	cmc.mutation.SetCommentID(i)
	return cmc
}

// SetNillableCommentID sets the "comment_id" field if the given value is not nil.
func (cmc *CommentMentionCreate) SetNillableCommentID(i *int) *CommentMentionCreate {
	if i != nil {
		cmc.SetCommentID(*i)
	}
	return cmc
}

// SetUserID sets the "user_id" field.
func (cmc *CommentMentionCreate) SetUserID(i int) *CommentMentionCreate {
	cmc.mutation.SetUserID(i)
	return cmc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cmc *CommentMentionCreate) SetNillableUserID(i *int) *CommentMentionCreate {
	if i != nil {
		cmc.SetUserID(*i)
	}
	return cmc
}

// SetUser sets the "user" edge to the User entity.
func (cmc *CommentMentionCreate) SetUser(u *User) *CommentMentionCreate {
	return cmc.SetUserID(u.ID)
}

// SetComment sets the "comment" edge to the Comment entity.
func (cmc *CommentMentionCreate) SetComment(c *Comment) *CommentMentionCreate {
	return cmc.SetCommentID(c.ID)
}

// Mutation returns the CommentMentionMutation object of the builder.
func (cmc *CommentMentionCreate) Mutation() *CommentMentionMutation {
	return cmc.mutation
}

// Save creates the CommentMention in the database.
func (cmc *CommentMentionCreate) Save(ctx context.Context) (*CommentMention, error) {
	return withHooks(ctx, cmc.sqlSave, cmc.mutation, cmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cmc *CommentMentionCreate) SaveX(ctx context.Context) *CommentMention {
	v, err := cmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cmc *CommentMentionCreate) Exec(ctx context.Context) error {
	_, err := cmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmc *CommentMentionCreate) ExecX(ctx context.Context) {
	if err := cmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cmc *CommentMentionCreate) check() error {
	return nil
}

func (cmc *CommentMentionCreate) sqlSave(ctx context.Context) (*CommentMention, error) {
	if err := cmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cmc.mutation.id = &_node.ID
	cmc.mutation.done = true
	return _node, nil
}

func (cmc *CommentMentionCreate) createSpec() (*CommentMention, *sqlgraph.CreateSpec) {
	var (
		_node = &CommentMention{config: cmc.config}
		_spec = sqlgraph.NewCreateSpec(commentmention.Table, sqlgraph.NewFieldSpec(commentmention.FieldID, field.TypeInt))
	)
	if nodes := cmc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   commentmention.UserTable,
			Columns: []string{commentmention.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cmc.mutation.CommentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   commentmention.CommentTable,
			Columns: []string{commentmention.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CommentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CommentMentionCreateBulk is the builder for creating many CommentMention entities in bulk.
type CommentMentionCreateBulk struct {
	config
	builders []*CommentMentionCreate
}

// Save creates the CommentMention entities in the database.
func (cmcb *CommentMentionCreateBulk) Save(ctx context.Context) ([]*CommentMention, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cmcb.builders))
	nodes := make([]*CommentMention, len(cmcb.builders))
	mutators := make([]Mutator, len(cmcb.builders))
	for i := range cmcb.builders {
		func(i int, root context.Context) {
			builder := cmcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CommentMentionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cmcb *CommentMentionCreateBulk) SaveX(ctx context.Context) []*CommentMention {
	v, err := cmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cmcb *CommentMentionCreateBulk) Exec(ctx context.Context) error {
	_, err := cmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmcb *CommentMentionCreateBulk) ExecX(ctx context.Context) {
	if err := cmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
