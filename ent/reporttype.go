// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/leeeeeoy/go_study/ent/boardreport"
	"github.com/leeeeeoy/go_study/ent/commentreport"
	"github.com/leeeeeoy/go_study/ent/reporttype"
)

// ReportType is the model entity for the ReportType schema.
type ReportType struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// InActive holds the value of the "in_active" field.
	InActive bool `json:"in_active,omitempty"`
	// OrderNum holds the value of the "order_num" field.
	OrderNum int `json:"order_num,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ReportTypeQuery when eager-loading is set.
	Edges        ReportTypeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ReportTypeEdges holds the relations/edges for other nodes in the graph.
type ReportTypeEdges struct {
	// CommentReport holds the value of the comment_report edge.
	CommentReport *CommentReport `json:"comment_report,omitempty"`
	// BoardReport holds the value of the board_report edge.
	BoardReport *BoardReport `json:"board_report,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CommentReportOrErr returns the CommentReport value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReportTypeEdges) CommentReportOrErr() (*CommentReport, error) {
	if e.loadedTypes[0] {
		if e.CommentReport == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: commentreport.Label}
		}
		return e.CommentReport, nil
	}
	return nil, &NotLoadedError{edge: "comment_report"}
}

// BoardReportOrErr returns the BoardReport value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReportTypeEdges) BoardReportOrErr() (*BoardReport, error) {
	if e.loadedTypes[1] {
		if e.BoardReport == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: boardreport.Label}
		}
		return e.BoardReport, nil
	}
	return nil, &NotLoadedError{edge: "board_report"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ReportType) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case reporttype.FieldInActive:
			values[i] = new(sql.NullBool)
		case reporttype.FieldID, reporttype.FieldOrderNum:
			values[i] = new(sql.NullInt64)
		case reporttype.FieldDescription:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ReportType fields.
func (rt *ReportType) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case reporttype.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rt.ID = int(value.Int64)
		case reporttype.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				rt.Description = value.String
			}
		case reporttype.FieldInActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field in_active", values[i])
			} else if value.Valid {
				rt.InActive = value.Bool
			}
		case reporttype.FieldOrderNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_num", values[i])
			} else if value.Valid {
				rt.OrderNum = int(value.Int64)
			}
		default:
			rt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ReportType.
// This includes values selected through modifiers, order, etc.
func (rt *ReportType) Value(name string) (ent.Value, error) {
	return rt.selectValues.Get(name)
}

// QueryCommentReport queries the "comment_report" edge of the ReportType entity.
func (rt *ReportType) QueryCommentReport() *CommentReportQuery {
	return NewReportTypeClient(rt.config).QueryCommentReport(rt)
}

// QueryBoardReport queries the "board_report" edge of the ReportType entity.
func (rt *ReportType) QueryBoardReport() *BoardReportQuery {
	return NewReportTypeClient(rt.config).QueryBoardReport(rt)
}

// Update returns a builder for updating this ReportType.
// Note that you need to call ReportType.Unwrap() before calling this method if this ReportType
// was returned from a transaction, and the transaction was committed or rolled back.
func (rt *ReportType) Update() *ReportTypeUpdateOne {
	return NewReportTypeClient(rt.config).UpdateOne(rt)
}

// Unwrap unwraps the ReportType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rt *ReportType) Unwrap() *ReportType {
	_tx, ok := rt.config.driver.(*txDriver)
	if !ok {
		panic("ent: ReportType is not a transactional entity")
	}
	rt.config.driver = _tx.drv
	return rt
}

// String implements the fmt.Stringer.
func (rt *ReportType) String() string {
	var builder strings.Builder
	builder.WriteString("ReportType(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rt.ID))
	builder.WriteString("description=")
	builder.WriteString(rt.Description)
	builder.WriteString(", ")
	builder.WriteString("in_active=")
	builder.WriteString(fmt.Sprintf("%v", rt.InActive))
	builder.WriteString(", ")
	builder.WriteString("order_num=")
	builder.WriteString(fmt.Sprintf("%v", rt.OrderNum))
	builder.WriteByte(')')
	return builder.String()
}

// ReportTypes is a parsable slice of ReportType.
type ReportTypes []*ReportType
