// Code generated by ent, DO NOT EDIT.

package board

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the board type in the database.
	Label = "board"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldText holds the string denoting the text field in the database.
	FieldText = "text"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldLikeCount holds the string denoting the like_count field in the database.
	FieldLikeCount = "like_count"
	// FieldCommentCount holds the string denoting the comment_count field in the database.
	FieldCommentCount = "comment_count"
	// FieldViewCount holds the string denoting the view_count field in the database.
	FieldViewCount = "view_count"
	// FieldReportCount holds the string denoting the report_count field in the database.
	FieldReportCount = "report_count"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldPrivate holds the string denoting the private field in the database.
	FieldPrivate = "private"
	// FieldLanguageType holds the string denoting the language_type field in the database.
	FieldLanguageType = "language_type"
	// FieldAttachments holds the string denoting the attachments field in the database.
	FieldAttachments = "attachments"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeComments holds the string denoting the comments edge name in mutations.
	EdgeComments = "comments"
	// EdgeBookMarks holds the string denoting the book_marks edge name in mutations.
	EdgeBookMarks = "book_marks"
	// EdgeBoardLike holds the string denoting the board_like edge name in mutations.
	EdgeBoardLike = "board_like"
	// EdgeBoardHashtag holds the string denoting the board_hashtag edge name in mutations.
	EdgeBoardHashtag = "board_hashtag"
	// EdgeBoardReport holds the string denoting the board_report edge name in mutations.
	EdgeBoardReport = "board_report"
	// Table holds the table name of the board in the database.
	Table = "boards"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "boards"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// CommentsTable is the table that holds the comments relation/edge.
	CommentsTable = "comments"
	// CommentsInverseTable is the table name for the Comment entity.
	// It exists in this package in order to avoid circular dependency with the "comment" package.
	CommentsInverseTable = "comments"
	// CommentsColumn is the table column denoting the comments relation/edge.
	CommentsColumn = "board_id"
	// BookMarksTable is the table that holds the book_marks relation/edge.
	BookMarksTable = "book_marks"
	// BookMarksInverseTable is the table name for the BookMark entity.
	// It exists in this package in order to avoid circular dependency with the "bookmark" package.
	BookMarksInverseTable = "book_marks"
	// BookMarksColumn is the table column denoting the book_marks relation/edge.
	BookMarksColumn = "board_id"
	// BoardLikeTable is the table that holds the board_like relation/edge.
	BoardLikeTable = "board_likes"
	// BoardLikeInverseTable is the table name for the BoardLike entity.
	// It exists in this package in order to avoid circular dependency with the "boardlike" package.
	BoardLikeInverseTable = "board_likes"
	// BoardLikeColumn is the table column denoting the board_like relation/edge.
	BoardLikeColumn = "board_id"
	// BoardHashtagTable is the table that holds the board_hashtag relation/edge.
	BoardHashtagTable = "board_hashtags"
	// BoardHashtagInverseTable is the table name for the BoardHashtag entity.
	// It exists in this package in order to avoid circular dependency with the "boardhashtag" package.
	BoardHashtagInverseTable = "board_hashtags"
	// BoardHashtagColumn is the table column denoting the board_hashtag relation/edge.
	BoardHashtagColumn = "board_id"
	// BoardReportTable is the table that holds the board_report relation/edge.
	BoardReportTable = "board_reports"
	// BoardReportInverseTable is the table name for the BoardReport entity.
	// It exists in this package in order to avoid circular dependency with the "boardreport" package.
	BoardReportInverseTable = "board_reports"
	// BoardReportColumn is the table column denoting the board_report relation/edge.
	BoardReportColumn = "board_id"
)

// Columns holds all SQL columns for board fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldText,
	FieldUserID,
	FieldLikeCount,
	FieldCommentCount,
	FieldViewCount,
	FieldReportCount,
	FieldStatus,
	FieldPrivate,
	FieldLanguageType,
	FieldAttachments,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// LikeCountValidator is a validator for the "like_count" field. It is called by the builders before save.
	LikeCountValidator func(int) error
	// CommentCountValidator is a validator for the "comment_count" field. It is called by the builders before save.
	CommentCountValidator func(int) error
	// ViewCountValidator is a validator for the "view_count" field. It is called by the builders before save.
	ViewCountValidator func(int) error
	// ReportCountValidator is a validator for the "report_count" field. It is called by the builders before save.
	ReportCountValidator func(int) error
	// DefaultPrivate holds the default value on creation for the "private" field.
	DefaultPrivate bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	Status0 Status = "0"
	Status1 Status = "1"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case Status0, Status1:
		return nil
	default:
		return fmt.Errorf("board: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Board queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByText orders the results by the text field.
func ByText(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldText, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByLikeCount orders the results by the like_count field.
func ByLikeCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLikeCount, opts...).ToFunc()
}

// ByCommentCount orders the results by the comment_count field.
func ByCommentCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCommentCount, opts...).ToFunc()
}

// ByViewCount orders the results by the view_count field.
func ByViewCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldViewCount, opts...).ToFunc()
}

// ByReportCount orders the results by the report_count field.
func ByReportCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReportCount, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByPrivate orders the results by the private field.
func ByPrivate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrivate, opts...).ToFunc()
}

// ByLanguageType orders the results by the language_type field.
func ByLanguageType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLanguageType, opts...).ToFunc()
}

// ByAttachments orders the results by the attachments field.
func ByAttachments(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAttachments, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByCommentsCount orders the results by comments count.
func ByCommentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCommentsStep(), opts...)
	}
}

// ByComments orders the results by comments terms.
func ByComments(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCommentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByBookMarksCount orders the results by book_marks count.
func ByBookMarksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBookMarksStep(), opts...)
	}
}

// ByBookMarks orders the results by book_marks terms.
func ByBookMarks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBookMarksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByBoardLikeCount orders the results by board_like count.
func ByBoardLikeCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBoardLikeStep(), opts...)
	}
}

// ByBoardLike orders the results by board_like terms.
func ByBoardLike(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBoardLikeStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByBoardHashtagCount orders the results by board_hashtag count.
func ByBoardHashtagCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBoardHashtagStep(), opts...)
	}
}

// ByBoardHashtag orders the results by board_hashtag terms.
func ByBoardHashtag(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBoardHashtagStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByBoardReportCount orders the results by board_report count.
func ByBoardReportCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBoardReportStep(), opts...)
	}
}

// ByBoardReport orders the results by board_report terms.
func ByBoardReport(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBoardReportStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newCommentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CommentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CommentsTable, CommentsColumn),
	)
}
func newBookMarksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BookMarksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, BookMarksTable, BookMarksColumn),
	)
}
func newBoardLikeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BoardLikeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, BoardLikeTable, BoardLikeColumn),
	)
}
func newBoardHashtagStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BoardHashtagInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, BoardHashtagTable, BoardHashtagColumn),
	)
}
func newBoardReportStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BoardReportInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, BoardReportTable, BoardReportColumn),
	)
}
