// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/leeeeeoy/go_study/ent/board"
	"github.com/leeeeeoy/go_study/ent/bookmark"
	"github.com/leeeeeoy/go_study/ent/predicate"
	"github.com/leeeeeoy/go_study/ent/user"
)

// BookMarkUpdate is the builder for updating BookMark entities.
type BookMarkUpdate struct {
	config
	hooks    []Hook
	mutation *BookMarkMutation
}

// Where appends a list predicates to the BookMarkUpdate builder.
func (bmu *BookMarkUpdate) Where(ps ...predicate.BookMark) *BookMarkUpdate {
	bmu.mutation.Where(ps...)
	return bmu
}

// SetUserID sets the "user_id" field.
func (bmu *BookMarkUpdate) SetUserID(i int) *BookMarkUpdate {
	bmu.mutation.SetUserID(i)
	return bmu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (bmu *BookMarkUpdate) SetNillableUserID(i *int) *BookMarkUpdate {
	if i != nil {
		bmu.SetUserID(*i)
	}
	return bmu
}

// ClearUserID clears the value of the "user_id" field.
func (bmu *BookMarkUpdate) ClearUserID() *BookMarkUpdate {
	bmu.mutation.ClearUserID()
	return bmu
}

// SetBoardID sets the "board_id" field.
func (bmu *BookMarkUpdate) SetBoardID(i int) *BookMarkUpdate {
	bmu.mutation.SetBoardID(i)
	return bmu
}

// SetNillableBoardID sets the "board_id" field if the given value is not nil.
func (bmu *BookMarkUpdate) SetNillableBoardID(i *int) *BookMarkUpdate {
	if i != nil {
		bmu.SetBoardID(*i)
	}
	return bmu
}

// ClearBoardID clears the value of the "board_id" field.
func (bmu *BookMarkUpdate) ClearBoardID() *BookMarkUpdate {
	bmu.mutation.ClearBoardID()
	return bmu
}

// SetCreatedAt sets the "created_at" field.
func (bmu *BookMarkUpdate) SetCreatedAt(t time.Time) *BookMarkUpdate {
	bmu.mutation.SetCreatedAt(t)
	return bmu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bmu *BookMarkUpdate) SetNillableCreatedAt(t *time.Time) *BookMarkUpdate {
	if t != nil {
		bmu.SetCreatedAt(*t)
	}
	return bmu
}

// SetBoard sets the "board" edge to the Board entity.
func (bmu *BookMarkUpdate) SetBoard(b *Board) *BookMarkUpdate {
	return bmu.SetBoardID(b.ID)
}

// SetUser sets the "user" edge to the User entity.
func (bmu *BookMarkUpdate) SetUser(u *User) *BookMarkUpdate {
	return bmu.SetUserID(u.ID)
}

// Mutation returns the BookMarkMutation object of the builder.
func (bmu *BookMarkUpdate) Mutation() *BookMarkMutation {
	return bmu.mutation
}

// ClearBoard clears the "board" edge to the Board entity.
func (bmu *BookMarkUpdate) ClearBoard() *BookMarkUpdate {
	bmu.mutation.ClearBoard()
	return bmu
}

// ClearUser clears the "user" edge to the User entity.
func (bmu *BookMarkUpdate) ClearUser() *BookMarkUpdate {
	bmu.mutation.ClearUser()
	return bmu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bmu *BookMarkUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, bmu.sqlSave, bmu.mutation, bmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bmu *BookMarkUpdate) SaveX(ctx context.Context) int {
	affected, err := bmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bmu *BookMarkUpdate) Exec(ctx context.Context) error {
	_, err := bmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bmu *BookMarkUpdate) ExecX(ctx context.Context) {
	if err := bmu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bmu *BookMarkUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(bookmark.Table, bookmark.Columns, sqlgraph.NewFieldSpec(bookmark.FieldID, field.TypeInt))
	if ps := bmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bmu.mutation.CreatedAt(); ok {
		_spec.SetField(bookmark.FieldCreatedAt, field.TypeTime, value)
	}
	if bmu.mutation.BoardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bookmark.BoardTable,
			Columns: []string{bookmark.BoardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(board.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bmu.mutation.BoardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bookmark.BoardTable,
			Columns: []string{bookmark.BoardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(board.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bmu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bookmark.UserTable,
			Columns: []string{bookmark.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bmu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bookmark.UserTable,
			Columns: []string{bookmark.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bookmark.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bmu.mutation.done = true
	return n, nil
}

// BookMarkUpdateOne is the builder for updating a single BookMark entity.
type BookMarkUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BookMarkMutation
}

// SetUserID sets the "user_id" field.
func (bmuo *BookMarkUpdateOne) SetUserID(i int) *BookMarkUpdateOne {
	bmuo.mutation.SetUserID(i)
	return bmuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (bmuo *BookMarkUpdateOne) SetNillableUserID(i *int) *BookMarkUpdateOne {
	if i != nil {
		bmuo.SetUserID(*i)
	}
	return bmuo
}

// ClearUserID clears the value of the "user_id" field.
func (bmuo *BookMarkUpdateOne) ClearUserID() *BookMarkUpdateOne {
	bmuo.mutation.ClearUserID()
	return bmuo
}

// SetBoardID sets the "board_id" field.
func (bmuo *BookMarkUpdateOne) SetBoardID(i int) *BookMarkUpdateOne {
	bmuo.mutation.SetBoardID(i)
	return bmuo
}

// SetNillableBoardID sets the "board_id" field if the given value is not nil.
func (bmuo *BookMarkUpdateOne) SetNillableBoardID(i *int) *BookMarkUpdateOne {
	if i != nil {
		bmuo.SetBoardID(*i)
	}
	return bmuo
}

// ClearBoardID clears the value of the "board_id" field.
func (bmuo *BookMarkUpdateOne) ClearBoardID() *BookMarkUpdateOne {
	bmuo.mutation.ClearBoardID()
	return bmuo
}

// SetCreatedAt sets the "created_at" field.
func (bmuo *BookMarkUpdateOne) SetCreatedAt(t time.Time) *BookMarkUpdateOne {
	bmuo.mutation.SetCreatedAt(t)
	return bmuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bmuo *BookMarkUpdateOne) SetNillableCreatedAt(t *time.Time) *BookMarkUpdateOne {
	if t != nil {
		bmuo.SetCreatedAt(*t)
	}
	return bmuo
}

// SetBoard sets the "board" edge to the Board entity.
func (bmuo *BookMarkUpdateOne) SetBoard(b *Board) *BookMarkUpdateOne {
	return bmuo.SetBoardID(b.ID)
}

// SetUser sets the "user" edge to the User entity.
func (bmuo *BookMarkUpdateOne) SetUser(u *User) *BookMarkUpdateOne {
	return bmuo.SetUserID(u.ID)
}

// Mutation returns the BookMarkMutation object of the builder.
func (bmuo *BookMarkUpdateOne) Mutation() *BookMarkMutation {
	return bmuo.mutation
}

// ClearBoard clears the "board" edge to the Board entity.
func (bmuo *BookMarkUpdateOne) ClearBoard() *BookMarkUpdateOne {
	bmuo.mutation.ClearBoard()
	return bmuo
}

// ClearUser clears the "user" edge to the User entity.
func (bmuo *BookMarkUpdateOne) ClearUser() *BookMarkUpdateOne {
	bmuo.mutation.ClearUser()
	return bmuo
}

// Where appends a list predicates to the BookMarkUpdate builder.
func (bmuo *BookMarkUpdateOne) Where(ps ...predicate.BookMark) *BookMarkUpdateOne {
	bmuo.mutation.Where(ps...)
	return bmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bmuo *BookMarkUpdateOne) Select(field string, fields ...string) *BookMarkUpdateOne {
	bmuo.fields = append([]string{field}, fields...)
	return bmuo
}

// Save executes the query and returns the updated BookMark entity.
func (bmuo *BookMarkUpdateOne) Save(ctx context.Context) (*BookMark, error) {
	return withHooks(ctx, bmuo.sqlSave, bmuo.mutation, bmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bmuo *BookMarkUpdateOne) SaveX(ctx context.Context) *BookMark {
	node, err := bmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bmuo *BookMarkUpdateOne) Exec(ctx context.Context) error {
	_, err := bmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bmuo *BookMarkUpdateOne) ExecX(ctx context.Context) {
	if err := bmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bmuo *BookMarkUpdateOne) sqlSave(ctx context.Context) (_node *BookMark, err error) {
	_spec := sqlgraph.NewUpdateSpec(bookmark.Table, bookmark.Columns, sqlgraph.NewFieldSpec(bookmark.FieldID, field.TypeInt))
	id, ok := bmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BookMark.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bookmark.FieldID)
		for _, f := range fields {
			if !bookmark.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != bookmark.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bmuo.mutation.CreatedAt(); ok {
		_spec.SetField(bookmark.FieldCreatedAt, field.TypeTime, value)
	}
	if bmuo.mutation.BoardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bookmark.BoardTable,
			Columns: []string{bookmark.BoardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(board.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bmuo.mutation.BoardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bookmark.BoardTable,
			Columns: []string{bookmark.BoardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(board.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bmuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bookmark.UserTable,
			Columns: []string{bookmark.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bmuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bookmark.UserTable,
			Columns: []string{bookmark.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BookMark{config: bmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bookmark.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bmuo.mutation.done = true
	return _node, nil
}
