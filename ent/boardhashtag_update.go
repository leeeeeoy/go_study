// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/leeeeeoy/go_study/ent/board"
	"github.com/leeeeeoy/go_study/ent/boardhashtag"
	"github.com/leeeeeoy/go_study/ent/hashtag"
	"github.com/leeeeeoy/go_study/ent/predicate"
)

// BoardHashtagUpdate is the builder for updating BoardHashtag entities.
type BoardHashtagUpdate struct {
	config
	hooks    []Hook
	mutation *BoardHashtagMutation
}

// Where appends a list predicates to the BoardHashtagUpdate builder.
func (bhu *BoardHashtagUpdate) Where(ps ...predicate.BoardHashtag) *BoardHashtagUpdate {
	bhu.mutation.Where(ps...)
	return bhu
}

// SetBoardID sets the "board_id" field.
func (bhu *BoardHashtagUpdate) SetBoardID(i int) *BoardHashtagUpdate {
	bhu.mutation.SetBoardID(i)
	return bhu
}

// SetNillableBoardID sets the "board_id" field if the given value is not nil.
func (bhu *BoardHashtagUpdate) SetNillableBoardID(i *int) *BoardHashtagUpdate {
	if i != nil {
		bhu.SetBoardID(*i)
	}
	return bhu
}

// ClearBoardID clears the value of the "board_id" field.
func (bhu *BoardHashtagUpdate) ClearBoardID() *BoardHashtagUpdate {
	bhu.mutation.ClearBoardID()
	return bhu
}

// SetHashtagID sets the "hashtag_id" field.
func (bhu *BoardHashtagUpdate) SetHashtagID(i int) *BoardHashtagUpdate {
	bhu.mutation.SetHashtagID(i)
	return bhu
}

// SetNillableHashtagID sets the "hashtag_id" field if the given value is not nil.
func (bhu *BoardHashtagUpdate) SetNillableHashtagID(i *int) *BoardHashtagUpdate {
	if i != nil {
		bhu.SetHashtagID(*i)
	}
	return bhu
}

// ClearHashtagID clears the value of the "hashtag_id" field.
func (bhu *BoardHashtagUpdate) ClearHashtagID() *BoardHashtagUpdate {
	bhu.mutation.ClearHashtagID()
	return bhu
}

// SetBoard sets the "board" edge to the Board entity.
func (bhu *BoardHashtagUpdate) SetBoard(b *Board) *BoardHashtagUpdate {
	return bhu.SetBoardID(b.ID)
}

// SetHashtag sets the "hashtag" edge to the Hashtag entity.
func (bhu *BoardHashtagUpdate) SetHashtag(h *Hashtag) *BoardHashtagUpdate {
	return bhu.SetHashtagID(h.ID)
}

// Mutation returns the BoardHashtagMutation object of the builder.
func (bhu *BoardHashtagUpdate) Mutation() *BoardHashtagMutation {
	return bhu.mutation
}

// ClearBoard clears the "board" edge to the Board entity.
func (bhu *BoardHashtagUpdate) ClearBoard() *BoardHashtagUpdate {
	bhu.mutation.ClearBoard()
	return bhu
}

// ClearHashtag clears the "hashtag" edge to the Hashtag entity.
func (bhu *BoardHashtagUpdate) ClearHashtag() *BoardHashtagUpdate {
	bhu.mutation.ClearHashtag()
	return bhu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bhu *BoardHashtagUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, bhu.sqlSave, bhu.mutation, bhu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bhu *BoardHashtagUpdate) SaveX(ctx context.Context) int {
	affected, err := bhu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bhu *BoardHashtagUpdate) Exec(ctx context.Context) error {
	_, err := bhu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bhu *BoardHashtagUpdate) ExecX(ctx context.Context) {
	if err := bhu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bhu *BoardHashtagUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(boardhashtag.Table, boardhashtag.Columns, sqlgraph.NewFieldSpec(boardhashtag.FieldID, field.TypeInt))
	if ps := bhu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if bhu.mutation.BoardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   boardhashtag.BoardTable,
			Columns: []string{boardhashtag.BoardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(board.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bhu.mutation.BoardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   boardhashtag.BoardTable,
			Columns: []string{boardhashtag.BoardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(board.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bhu.mutation.HashtagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   boardhashtag.HashtagTable,
			Columns: []string{boardhashtag.HashtagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hashtag.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bhu.mutation.HashtagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   boardhashtag.HashtagTable,
			Columns: []string{boardhashtag.HashtagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hashtag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bhu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{boardhashtag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bhu.mutation.done = true
	return n, nil
}

// BoardHashtagUpdateOne is the builder for updating a single BoardHashtag entity.
type BoardHashtagUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BoardHashtagMutation
}

// SetBoardID sets the "board_id" field.
func (bhuo *BoardHashtagUpdateOne) SetBoardID(i int) *BoardHashtagUpdateOne {
	bhuo.mutation.SetBoardID(i)
	return bhuo
}

// SetNillableBoardID sets the "board_id" field if the given value is not nil.
func (bhuo *BoardHashtagUpdateOne) SetNillableBoardID(i *int) *BoardHashtagUpdateOne {
	if i != nil {
		bhuo.SetBoardID(*i)
	}
	return bhuo
}

// ClearBoardID clears the value of the "board_id" field.
func (bhuo *BoardHashtagUpdateOne) ClearBoardID() *BoardHashtagUpdateOne {
	bhuo.mutation.ClearBoardID()
	return bhuo
}

// SetHashtagID sets the "hashtag_id" field.
func (bhuo *BoardHashtagUpdateOne) SetHashtagID(i int) *BoardHashtagUpdateOne {
	bhuo.mutation.SetHashtagID(i)
	return bhuo
}

// SetNillableHashtagID sets the "hashtag_id" field if the given value is not nil.
func (bhuo *BoardHashtagUpdateOne) SetNillableHashtagID(i *int) *BoardHashtagUpdateOne {
	if i != nil {
		bhuo.SetHashtagID(*i)
	}
	return bhuo
}

// ClearHashtagID clears the value of the "hashtag_id" field.
func (bhuo *BoardHashtagUpdateOne) ClearHashtagID() *BoardHashtagUpdateOne {
	bhuo.mutation.ClearHashtagID()
	return bhuo
}

// SetBoard sets the "board" edge to the Board entity.
func (bhuo *BoardHashtagUpdateOne) SetBoard(b *Board) *BoardHashtagUpdateOne {
	return bhuo.SetBoardID(b.ID)
}

// SetHashtag sets the "hashtag" edge to the Hashtag entity.
func (bhuo *BoardHashtagUpdateOne) SetHashtag(h *Hashtag) *BoardHashtagUpdateOne {
	return bhuo.SetHashtagID(h.ID)
}

// Mutation returns the BoardHashtagMutation object of the builder.
func (bhuo *BoardHashtagUpdateOne) Mutation() *BoardHashtagMutation {
	return bhuo.mutation
}

// ClearBoard clears the "board" edge to the Board entity.
func (bhuo *BoardHashtagUpdateOne) ClearBoard() *BoardHashtagUpdateOne {
	bhuo.mutation.ClearBoard()
	return bhuo
}

// ClearHashtag clears the "hashtag" edge to the Hashtag entity.
func (bhuo *BoardHashtagUpdateOne) ClearHashtag() *BoardHashtagUpdateOne {
	bhuo.mutation.ClearHashtag()
	return bhuo
}

// Where appends a list predicates to the BoardHashtagUpdate builder.
func (bhuo *BoardHashtagUpdateOne) Where(ps ...predicate.BoardHashtag) *BoardHashtagUpdateOne {
	bhuo.mutation.Where(ps...)
	return bhuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bhuo *BoardHashtagUpdateOne) Select(field string, fields ...string) *BoardHashtagUpdateOne {
	bhuo.fields = append([]string{field}, fields...)
	return bhuo
}

// Save executes the query and returns the updated BoardHashtag entity.
func (bhuo *BoardHashtagUpdateOne) Save(ctx context.Context) (*BoardHashtag, error) {
	return withHooks(ctx, bhuo.sqlSave, bhuo.mutation, bhuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bhuo *BoardHashtagUpdateOne) SaveX(ctx context.Context) *BoardHashtag {
	node, err := bhuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bhuo *BoardHashtagUpdateOne) Exec(ctx context.Context) error {
	_, err := bhuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bhuo *BoardHashtagUpdateOne) ExecX(ctx context.Context) {
	if err := bhuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bhuo *BoardHashtagUpdateOne) sqlSave(ctx context.Context) (_node *BoardHashtag, err error) {
	_spec := sqlgraph.NewUpdateSpec(boardhashtag.Table, boardhashtag.Columns, sqlgraph.NewFieldSpec(boardhashtag.FieldID, field.TypeInt))
	id, ok := bhuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BoardHashtag.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bhuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, boardhashtag.FieldID)
		for _, f := range fields {
			if !boardhashtag.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != boardhashtag.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bhuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if bhuo.mutation.BoardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   boardhashtag.BoardTable,
			Columns: []string{boardhashtag.BoardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(board.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bhuo.mutation.BoardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   boardhashtag.BoardTable,
			Columns: []string{boardhashtag.BoardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(board.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bhuo.mutation.HashtagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   boardhashtag.HashtagTable,
			Columns: []string{boardhashtag.HashtagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hashtag.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bhuo.mutation.HashtagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   boardhashtag.HashtagTable,
			Columns: []string{boardhashtag.HashtagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hashtag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BoardHashtag{config: bhuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bhuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{boardhashtag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bhuo.mutation.done = true
	return _node, nil
}
