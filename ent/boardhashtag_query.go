// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/leeeeeoy/go_study/ent/board"
	"github.com/leeeeeoy/go_study/ent/boardhashtag"
	"github.com/leeeeeoy/go_study/ent/hashtag"
	"github.com/leeeeeoy/go_study/ent/predicate"
)

// BoardHashtagQuery is the builder for querying BoardHashtag entities.
type BoardHashtagQuery struct {
	config
	ctx         *QueryContext
	order       []boardhashtag.OrderOption
	inters      []Interceptor
	predicates  []predicate.BoardHashtag
	withBoard   *BoardQuery
	withHashtag *HashtagQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the BoardHashtagQuery builder.
func (bhq *BoardHashtagQuery) Where(ps ...predicate.BoardHashtag) *BoardHashtagQuery {
	bhq.predicates = append(bhq.predicates, ps...)
	return bhq
}

// Limit the number of records to be returned by this query.
func (bhq *BoardHashtagQuery) Limit(limit int) *BoardHashtagQuery {
	bhq.ctx.Limit = &limit
	return bhq
}

// Offset to start from.
func (bhq *BoardHashtagQuery) Offset(offset int) *BoardHashtagQuery {
	bhq.ctx.Offset = &offset
	return bhq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (bhq *BoardHashtagQuery) Unique(unique bool) *BoardHashtagQuery {
	bhq.ctx.Unique = &unique
	return bhq
}

// Order specifies how the records should be ordered.
func (bhq *BoardHashtagQuery) Order(o ...boardhashtag.OrderOption) *BoardHashtagQuery {
	bhq.order = append(bhq.order, o...)
	return bhq
}

// QueryBoard chains the current query on the "board" edge.
func (bhq *BoardHashtagQuery) QueryBoard() *BoardQuery {
	query := (&BoardClient{config: bhq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bhq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bhq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(boardhashtag.Table, boardhashtag.FieldID, selector),
			sqlgraph.To(board.Table, board.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, boardhashtag.BoardTable, boardhashtag.BoardColumn),
		)
		fromU = sqlgraph.SetNeighbors(bhq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHashtag chains the current query on the "hashtag" edge.
func (bhq *BoardHashtagQuery) QueryHashtag() *HashtagQuery {
	query := (&HashtagClient{config: bhq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bhq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bhq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(boardhashtag.Table, boardhashtag.FieldID, selector),
			sqlgraph.To(hashtag.Table, hashtag.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, boardhashtag.HashtagTable, boardhashtag.HashtagColumn),
		)
		fromU = sqlgraph.SetNeighbors(bhq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first BoardHashtag entity from the query.
// Returns a *NotFoundError when no BoardHashtag was found.
func (bhq *BoardHashtagQuery) First(ctx context.Context) (*BoardHashtag, error) {
	nodes, err := bhq.Limit(1).All(setContextOp(ctx, bhq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{boardhashtag.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (bhq *BoardHashtagQuery) FirstX(ctx context.Context) *BoardHashtag {
	node, err := bhq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first BoardHashtag ID from the query.
// Returns a *NotFoundError when no BoardHashtag ID was found.
func (bhq *BoardHashtagQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = bhq.Limit(1).IDs(setContextOp(ctx, bhq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{boardhashtag.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (bhq *BoardHashtagQuery) FirstIDX(ctx context.Context) int {
	id, err := bhq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single BoardHashtag entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one BoardHashtag entity is found.
// Returns a *NotFoundError when no BoardHashtag entities are found.
func (bhq *BoardHashtagQuery) Only(ctx context.Context) (*BoardHashtag, error) {
	nodes, err := bhq.Limit(2).All(setContextOp(ctx, bhq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{boardhashtag.Label}
	default:
		return nil, &NotSingularError{boardhashtag.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (bhq *BoardHashtagQuery) OnlyX(ctx context.Context) *BoardHashtag {
	node, err := bhq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only BoardHashtag ID in the query.
// Returns a *NotSingularError when more than one BoardHashtag ID is found.
// Returns a *NotFoundError when no entities are found.
func (bhq *BoardHashtagQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = bhq.Limit(2).IDs(setContextOp(ctx, bhq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{boardhashtag.Label}
	default:
		err = &NotSingularError{boardhashtag.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (bhq *BoardHashtagQuery) OnlyIDX(ctx context.Context) int {
	id, err := bhq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of BoardHashtags.
func (bhq *BoardHashtagQuery) All(ctx context.Context) ([]*BoardHashtag, error) {
	ctx = setContextOp(ctx, bhq.ctx, "All")
	if err := bhq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*BoardHashtag, *BoardHashtagQuery]()
	return withInterceptors[[]*BoardHashtag](ctx, bhq, qr, bhq.inters)
}

// AllX is like All, but panics if an error occurs.
func (bhq *BoardHashtagQuery) AllX(ctx context.Context) []*BoardHashtag {
	nodes, err := bhq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of BoardHashtag IDs.
func (bhq *BoardHashtagQuery) IDs(ctx context.Context) (ids []int, err error) {
	if bhq.ctx.Unique == nil && bhq.path != nil {
		bhq.Unique(true)
	}
	ctx = setContextOp(ctx, bhq.ctx, "IDs")
	if err = bhq.Select(boardhashtag.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (bhq *BoardHashtagQuery) IDsX(ctx context.Context) []int {
	ids, err := bhq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (bhq *BoardHashtagQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, bhq.ctx, "Count")
	if err := bhq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, bhq, querierCount[*BoardHashtagQuery](), bhq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (bhq *BoardHashtagQuery) CountX(ctx context.Context) int {
	count, err := bhq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (bhq *BoardHashtagQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, bhq.ctx, "Exist")
	switch _, err := bhq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (bhq *BoardHashtagQuery) ExistX(ctx context.Context) bool {
	exist, err := bhq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the BoardHashtagQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (bhq *BoardHashtagQuery) Clone() *BoardHashtagQuery {
	if bhq == nil {
		return nil
	}
	return &BoardHashtagQuery{
		config:      bhq.config,
		ctx:         bhq.ctx.Clone(),
		order:       append([]boardhashtag.OrderOption{}, bhq.order...),
		inters:      append([]Interceptor{}, bhq.inters...),
		predicates:  append([]predicate.BoardHashtag{}, bhq.predicates...),
		withBoard:   bhq.withBoard.Clone(),
		withHashtag: bhq.withHashtag.Clone(),
		// clone intermediate query.
		sql:  bhq.sql.Clone(),
		path: bhq.path,
	}
}

// WithBoard tells the query-builder to eager-load the nodes that are connected to
// the "board" edge. The optional arguments are used to configure the query builder of the edge.
func (bhq *BoardHashtagQuery) WithBoard(opts ...func(*BoardQuery)) *BoardHashtagQuery {
	query := (&BoardClient{config: bhq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bhq.withBoard = query
	return bhq
}

// WithHashtag tells the query-builder to eager-load the nodes that are connected to
// the "hashtag" edge. The optional arguments are used to configure the query builder of the edge.
func (bhq *BoardHashtagQuery) WithHashtag(opts ...func(*HashtagQuery)) *BoardHashtagQuery {
	query := (&HashtagClient{config: bhq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bhq.withHashtag = query
	return bhq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		BoardID int `json:"board_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.BoardHashtag.Query().
//		GroupBy(boardhashtag.FieldBoardID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (bhq *BoardHashtagQuery) GroupBy(field string, fields ...string) *BoardHashtagGroupBy {
	bhq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &BoardHashtagGroupBy{build: bhq}
	grbuild.flds = &bhq.ctx.Fields
	grbuild.label = boardhashtag.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		BoardID int `json:"board_id,omitempty"`
//	}
//
//	client.BoardHashtag.Query().
//		Select(boardhashtag.FieldBoardID).
//		Scan(ctx, &v)
func (bhq *BoardHashtagQuery) Select(fields ...string) *BoardHashtagSelect {
	bhq.ctx.Fields = append(bhq.ctx.Fields, fields...)
	sbuild := &BoardHashtagSelect{BoardHashtagQuery: bhq}
	sbuild.label = boardhashtag.Label
	sbuild.flds, sbuild.scan = &bhq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a BoardHashtagSelect configured with the given aggregations.
func (bhq *BoardHashtagQuery) Aggregate(fns ...AggregateFunc) *BoardHashtagSelect {
	return bhq.Select().Aggregate(fns...)
}

func (bhq *BoardHashtagQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range bhq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, bhq); err != nil {
				return err
			}
		}
	}
	for _, f := range bhq.ctx.Fields {
		if !boardhashtag.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if bhq.path != nil {
		prev, err := bhq.path(ctx)
		if err != nil {
			return err
		}
		bhq.sql = prev
	}
	return nil
}

func (bhq *BoardHashtagQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*BoardHashtag, error) {
	var (
		nodes       = []*BoardHashtag{}
		_spec       = bhq.querySpec()
		loadedTypes = [2]bool{
			bhq.withBoard != nil,
			bhq.withHashtag != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*BoardHashtag).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &BoardHashtag{config: bhq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, bhq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := bhq.withBoard; query != nil {
		if err := bhq.loadBoard(ctx, query, nodes, nil,
			func(n *BoardHashtag, e *Board) { n.Edges.Board = e }); err != nil {
			return nil, err
		}
	}
	if query := bhq.withHashtag; query != nil {
		if err := bhq.loadHashtag(ctx, query, nodes, nil,
			func(n *BoardHashtag, e *Hashtag) { n.Edges.Hashtag = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (bhq *BoardHashtagQuery) loadBoard(ctx context.Context, query *BoardQuery, nodes []*BoardHashtag, init func(*BoardHashtag), assign func(*BoardHashtag, *Board)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*BoardHashtag)
	for i := range nodes {
		fk := nodes[i].BoardID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(board.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "board_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (bhq *BoardHashtagQuery) loadHashtag(ctx context.Context, query *HashtagQuery, nodes []*BoardHashtag, init func(*BoardHashtag), assign func(*BoardHashtag, *Hashtag)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*BoardHashtag)
	for i := range nodes {
		fk := nodes[i].HashtagID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(hashtag.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "hashtag_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (bhq *BoardHashtagQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := bhq.querySpec()
	_spec.Node.Columns = bhq.ctx.Fields
	if len(bhq.ctx.Fields) > 0 {
		_spec.Unique = bhq.ctx.Unique != nil && *bhq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, bhq.driver, _spec)
}

func (bhq *BoardHashtagQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(boardhashtag.Table, boardhashtag.Columns, sqlgraph.NewFieldSpec(boardhashtag.FieldID, field.TypeInt))
	_spec.From = bhq.sql
	if unique := bhq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if bhq.path != nil {
		_spec.Unique = true
	}
	if fields := bhq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, boardhashtag.FieldID)
		for i := range fields {
			if fields[i] != boardhashtag.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if bhq.withBoard != nil {
			_spec.Node.AddColumnOnce(boardhashtag.FieldBoardID)
		}
		if bhq.withHashtag != nil {
			_spec.Node.AddColumnOnce(boardhashtag.FieldHashtagID)
		}
	}
	if ps := bhq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := bhq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := bhq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := bhq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (bhq *BoardHashtagQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(bhq.driver.Dialect())
	t1 := builder.Table(boardhashtag.Table)
	columns := bhq.ctx.Fields
	if len(columns) == 0 {
		columns = boardhashtag.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if bhq.sql != nil {
		selector = bhq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if bhq.ctx.Unique != nil && *bhq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range bhq.predicates {
		p(selector)
	}
	for _, p := range bhq.order {
		p(selector)
	}
	if offset := bhq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := bhq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// BoardHashtagGroupBy is the group-by builder for BoardHashtag entities.
type BoardHashtagGroupBy struct {
	selector
	build *BoardHashtagQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (bhgb *BoardHashtagGroupBy) Aggregate(fns ...AggregateFunc) *BoardHashtagGroupBy {
	bhgb.fns = append(bhgb.fns, fns...)
	return bhgb
}

// Scan applies the selector query and scans the result into the given value.
func (bhgb *BoardHashtagGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, bhgb.build.ctx, "GroupBy")
	if err := bhgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BoardHashtagQuery, *BoardHashtagGroupBy](ctx, bhgb.build, bhgb, bhgb.build.inters, v)
}

func (bhgb *BoardHashtagGroupBy) sqlScan(ctx context.Context, root *BoardHashtagQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(bhgb.fns))
	for _, fn := range bhgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*bhgb.flds)+len(bhgb.fns))
		for _, f := range *bhgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*bhgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bhgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// BoardHashtagSelect is the builder for selecting fields of BoardHashtag entities.
type BoardHashtagSelect struct {
	*BoardHashtagQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (bhs *BoardHashtagSelect) Aggregate(fns ...AggregateFunc) *BoardHashtagSelect {
	bhs.fns = append(bhs.fns, fns...)
	return bhs
}

// Scan applies the selector query and scans the result into the given value.
func (bhs *BoardHashtagSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, bhs.ctx, "Select")
	if err := bhs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BoardHashtagQuery, *BoardHashtagSelect](ctx, bhs.BoardHashtagQuery, bhs, bhs.inters, v)
}

func (bhs *BoardHashtagSelect) sqlScan(ctx context.Context, root *BoardHashtagQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(bhs.fns))
	for _, fn := range bhs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*bhs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bhs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
