// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/leeeeeoy/go_study/ent/board"
	"github.com/leeeeeoy/go_study/ent/boardlike"
	"github.com/leeeeeoy/go_study/ent/comment"
	"github.com/leeeeeoy/go_study/ent/predicate"
	"github.com/leeeeeoy/go_study/ent/user"
)

// BoardUpdate is the builder for updating Board entities.
type BoardUpdate struct {
	config
	hooks    []Hook
	mutation *BoardMutation
}

// Where appends a list predicates to the BoardUpdate builder.
func (bu *BoardUpdate) Where(ps ...predicate.Board) *BoardUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetTitle sets the "title" field.
func (bu *BoardUpdate) SetTitle(s string) *BoardUpdate {
	bu.mutation.SetTitle(s)
	return bu
}

// SetContent sets the "content" field.
func (bu *BoardUpdate) SetContent(s string) *BoardUpdate {
	bu.mutation.SetContent(s)
	return bu
}

// SetUserID sets the "user_id" field.
func (bu *BoardUpdate) SetUserID(i int) *BoardUpdate {
	bu.mutation.SetUserID(i)
	return bu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (bu *BoardUpdate) SetNillableUserID(i *int) *BoardUpdate {
	if i != nil {
		bu.SetUserID(*i)
	}
	return bu
}

// ClearUserID clears the value of the "user_id" field.
func (bu *BoardUpdate) ClearUserID() *BoardUpdate {
	bu.mutation.ClearUserID()
	return bu
}

// SetLikeCount sets the "like_count" field.
func (bu *BoardUpdate) SetLikeCount(i int) *BoardUpdate {
	bu.mutation.ResetLikeCount()
	bu.mutation.SetLikeCount(i)
	return bu
}

// AddLikeCount adds i to the "like_count" field.
func (bu *BoardUpdate) AddLikeCount(i int) *BoardUpdate {
	bu.mutation.AddLikeCount(i)
	return bu
}

// SetCommentCount sets the "comment_count" field.
func (bu *BoardUpdate) SetCommentCount(i int) *BoardUpdate {
	bu.mutation.ResetCommentCount()
	bu.mutation.SetCommentCount(i)
	return bu
}

// AddCommentCount adds i to the "comment_count" field.
func (bu *BoardUpdate) AddCommentCount(i int) *BoardUpdate {
	bu.mutation.AddCommentCount(i)
	return bu
}

// SetCreatedAt sets the "created_at" field.
func (bu *BoardUpdate) SetCreatedAt(t time.Time) *BoardUpdate {
	bu.mutation.SetCreatedAt(t)
	return bu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bu *BoardUpdate) SetNillableCreatedAt(t *time.Time) *BoardUpdate {
	if t != nil {
		bu.SetCreatedAt(*t)
	}
	return bu
}

// SetUpdatedAt sets the "updated_at" field.
func (bu *BoardUpdate) SetUpdatedAt(t time.Time) *BoardUpdate {
	bu.mutation.SetUpdatedAt(t)
	return bu
}

// SetUser sets the "user" edge to the User entity.
func (bu *BoardUpdate) SetUser(u *User) *BoardUpdate {
	return bu.SetUserID(u.ID)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (bu *BoardUpdate) AddCommentIDs(ids ...int) *BoardUpdate {
	bu.mutation.AddCommentIDs(ids...)
	return bu
}

// AddComments adds the "comments" edges to the Comment entity.
func (bu *BoardUpdate) AddComments(c ...*Comment) *BoardUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return bu.AddCommentIDs(ids...)
}

// AddBoardLikeIDs adds the "board_like" edge to the BoardLike entity by IDs.
func (bu *BoardUpdate) AddBoardLikeIDs(ids ...int) *BoardUpdate {
	bu.mutation.AddBoardLikeIDs(ids...)
	return bu
}

// AddBoardLike adds the "board_like" edges to the BoardLike entity.
func (bu *BoardUpdate) AddBoardLike(b ...*BoardLike) *BoardUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bu.AddBoardLikeIDs(ids...)
}

// Mutation returns the BoardMutation object of the builder.
func (bu *BoardUpdate) Mutation() *BoardMutation {
	return bu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (bu *BoardUpdate) ClearUser() *BoardUpdate {
	bu.mutation.ClearUser()
	return bu
}

// ClearComments clears all "comments" edges to the Comment entity.
func (bu *BoardUpdate) ClearComments() *BoardUpdate {
	bu.mutation.ClearComments()
	return bu
}

// RemoveCommentIDs removes the "comments" edge to Comment entities by IDs.
func (bu *BoardUpdate) RemoveCommentIDs(ids ...int) *BoardUpdate {
	bu.mutation.RemoveCommentIDs(ids...)
	return bu
}

// RemoveComments removes "comments" edges to Comment entities.
func (bu *BoardUpdate) RemoveComments(c ...*Comment) *BoardUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return bu.RemoveCommentIDs(ids...)
}

// ClearBoardLike clears all "board_like" edges to the BoardLike entity.
func (bu *BoardUpdate) ClearBoardLike() *BoardUpdate {
	bu.mutation.ClearBoardLike()
	return bu
}

// RemoveBoardLikeIDs removes the "board_like" edge to BoardLike entities by IDs.
func (bu *BoardUpdate) RemoveBoardLikeIDs(ids ...int) *BoardUpdate {
	bu.mutation.RemoveBoardLikeIDs(ids...)
	return bu
}

// RemoveBoardLike removes "board_like" edges to BoardLike entities.
func (bu *BoardUpdate) RemoveBoardLike(b ...*BoardLike) *BoardUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bu.RemoveBoardLikeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BoardUpdate) Save(ctx context.Context) (int, error) {
	bu.defaults()
	return withHooks(ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BoardUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BoardUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BoardUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bu *BoardUpdate) defaults() {
	if _, ok := bu.mutation.UpdatedAt(); !ok {
		v := board.UpdateDefaultUpdatedAt()
		bu.mutation.SetUpdatedAt(v)
	}
}

func (bu *BoardUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(board.Table, board.Columns, sqlgraph.NewFieldSpec(board.FieldID, field.TypeInt))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.Title(); ok {
		_spec.SetField(board.FieldTitle, field.TypeString, value)
	}
	if value, ok := bu.mutation.Content(); ok {
		_spec.SetField(board.FieldContent, field.TypeString, value)
	}
	if value, ok := bu.mutation.LikeCount(); ok {
		_spec.SetField(board.FieldLikeCount, field.TypeInt, value)
	}
	if value, ok := bu.mutation.AddedLikeCount(); ok {
		_spec.AddField(board.FieldLikeCount, field.TypeInt, value)
	}
	if value, ok := bu.mutation.CommentCount(); ok {
		_spec.SetField(board.FieldCommentCount, field.TypeInt, value)
	}
	if value, ok := bu.mutation.AddedCommentCount(); ok {
		_spec.AddField(board.FieldCommentCount, field.TypeInt, value)
	}
	if value, ok := bu.mutation.CreatedAt(); ok {
		_spec.SetField(board.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := bu.mutation.UpdatedAt(); ok {
		_spec.SetField(board.FieldUpdatedAt, field.TypeTime, value)
	}
	if bu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   board.UserTable,
			Columns: []string{board.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   board.UserTable,
			Columns: []string{board.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   board.CommentsTable,
			Columns: []string{board.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !bu.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   board.CommentsTable,
			Columns: []string{board.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   board.CommentsTable,
			Columns: []string{board.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.BoardLikeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   board.BoardLikeTable,
			Columns: []string{board.BoardLikeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(boardlike.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedBoardLikeIDs(); len(nodes) > 0 && !bu.mutation.BoardLikeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   board.BoardLikeTable,
			Columns: []string{board.BoardLikeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(boardlike.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.BoardLikeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   board.BoardLikeTable,
			Columns: []string{board.BoardLikeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(boardlike.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{board.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BoardUpdateOne is the builder for updating a single Board entity.
type BoardUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BoardMutation
}

// SetTitle sets the "title" field.
func (buo *BoardUpdateOne) SetTitle(s string) *BoardUpdateOne {
	buo.mutation.SetTitle(s)
	return buo
}

// SetContent sets the "content" field.
func (buo *BoardUpdateOne) SetContent(s string) *BoardUpdateOne {
	buo.mutation.SetContent(s)
	return buo
}

// SetUserID sets the "user_id" field.
func (buo *BoardUpdateOne) SetUserID(i int) *BoardUpdateOne {
	buo.mutation.SetUserID(i)
	return buo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (buo *BoardUpdateOne) SetNillableUserID(i *int) *BoardUpdateOne {
	if i != nil {
		buo.SetUserID(*i)
	}
	return buo
}

// ClearUserID clears the value of the "user_id" field.
func (buo *BoardUpdateOne) ClearUserID() *BoardUpdateOne {
	buo.mutation.ClearUserID()
	return buo
}

// SetLikeCount sets the "like_count" field.
func (buo *BoardUpdateOne) SetLikeCount(i int) *BoardUpdateOne {
	buo.mutation.ResetLikeCount()
	buo.mutation.SetLikeCount(i)
	return buo
}

// AddLikeCount adds i to the "like_count" field.
func (buo *BoardUpdateOne) AddLikeCount(i int) *BoardUpdateOne {
	buo.mutation.AddLikeCount(i)
	return buo
}

// SetCommentCount sets the "comment_count" field.
func (buo *BoardUpdateOne) SetCommentCount(i int) *BoardUpdateOne {
	buo.mutation.ResetCommentCount()
	buo.mutation.SetCommentCount(i)
	return buo
}

// AddCommentCount adds i to the "comment_count" field.
func (buo *BoardUpdateOne) AddCommentCount(i int) *BoardUpdateOne {
	buo.mutation.AddCommentCount(i)
	return buo
}

// SetCreatedAt sets the "created_at" field.
func (buo *BoardUpdateOne) SetCreatedAt(t time.Time) *BoardUpdateOne {
	buo.mutation.SetCreatedAt(t)
	return buo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (buo *BoardUpdateOne) SetNillableCreatedAt(t *time.Time) *BoardUpdateOne {
	if t != nil {
		buo.SetCreatedAt(*t)
	}
	return buo
}

// SetUpdatedAt sets the "updated_at" field.
func (buo *BoardUpdateOne) SetUpdatedAt(t time.Time) *BoardUpdateOne {
	buo.mutation.SetUpdatedAt(t)
	return buo
}

// SetUser sets the "user" edge to the User entity.
func (buo *BoardUpdateOne) SetUser(u *User) *BoardUpdateOne {
	return buo.SetUserID(u.ID)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (buo *BoardUpdateOne) AddCommentIDs(ids ...int) *BoardUpdateOne {
	buo.mutation.AddCommentIDs(ids...)
	return buo
}

// AddComments adds the "comments" edges to the Comment entity.
func (buo *BoardUpdateOne) AddComments(c ...*Comment) *BoardUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return buo.AddCommentIDs(ids...)
}

// AddBoardLikeIDs adds the "board_like" edge to the BoardLike entity by IDs.
func (buo *BoardUpdateOne) AddBoardLikeIDs(ids ...int) *BoardUpdateOne {
	buo.mutation.AddBoardLikeIDs(ids...)
	return buo
}

// AddBoardLike adds the "board_like" edges to the BoardLike entity.
func (buo *BoardUpdateOne) AddBoardLike(b ...*BoardLike) *BoardUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return buo.AddBoardLikeIDs(ids...)
}

// Mutation returns the BoardMutation object of the builder.
func (buo *BoardUpdateOne) Mutation() *BoardMutation {
	return buo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (buo *BoardUpdateOne) ClearUser() *BoardUpdateOne {
	buo.mutation.ClearUser()
	return buo
}

// ClearComments clears all "comments" edges to the Comment entity.
func (buo *BoardUpdateOne) ClearComments() *BoardUpdateOne {
	buo.mutation.ClearComments()
	return buo
}

// RemoveCommentIDs removes the "comments" edge to Comment entities by IDs.
func (buo *BoardUpdateOne) RemoveCommentIDs(ids ...int) *BoardUpdateOne {
	buo.mutation.RemoveCommentIDs(ids...)
	return buo
}

// RemoveComments removes "comments" edges to Comment entities.
func (buo *BoardUpdateOne) RemoveComments(c ...*Comment) *BoardUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return buo.RemoveCommentIDs(ids...)
}

// ClearBoardLike clears all "board_like" edges to the BoardLike entity.
func (buo *BoardUpdateOne) ClearBoardLike() *BoardUpdateOne {
	buo.mutation.ClearBoardLike()
	return buo
}

// RemoveBoardLikeIDs removes the "board_like" edge to BoardLike entities by IDs.
func (buo *BoardUpdateOne) RemoveBoardLikeIDs(ids ...int) *BoardUpdateOne {
	buo.mutation.RemoveBoardLikeIDs(ids...)
	return buo
}

// RemoveBoardLike removes "board_like" edges to BoardLike entities.
func (buo *BoardUpdateOne) RemoveBoardLike(b ...*BoardLike) *BoardUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return buo.RemoveBoardLikeIDs(ids...)
}

// Where appends a list predicates to the BoardUpdate builder.
func (buo *BoardUpdateOne) Where(ps ...predicate.Board) *BoardUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BoardUpdateOne) Select(field string, fields ...string) *BoardUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Board entity.
func (buo *BoardUpdateOne) Save(ctx context.Context) (*Board, error) {
	buo.defaults()
	return withHooks(ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BoardUpdateOne) SaveX(ctx context.Context) *Board {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BoardUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BoardUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (buo *BoardUpdateOne) defaults() {
	if _, ok := buo.mutation.UpdatedAt(); !ok {
		v := board.UpdateDefaultUpdatedAt()
		buo.mutation.SetUpdatedAt(v)
	}
}

func (buo *BoardUpdateOne) sqlSave(ctx context.Context) (_node *Board, err error) {
	_spec := sqlgraph.NewUpdateSpec(board.Table, board.Columns, sqlgraph.NewFieldSpec(board.FieldID, field.TypeInt))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Board.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, board.FieldID)
		for _, f := range fields {
			if !board.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != board.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.Title(); ok {
		_spec.SetField(board.FieldTitle, field.TypeString, value)
	}
	if value, ok := buo.mutation.Content(); ok {
		_spec.SetField(board.FieldContent, field.TypeString, value)
	}
	if value, ok := buo.mutation.LikeCount(); ok {
		_spec.SetField(board.FieldLikeCount, field.TypeInt, value)
	}
	if value, ok := buo.mutation.AddedLikeCount(); ok {
		_spec.AddField(board.FieldLikeCount, field.TypeInt, value)
	}
	if value, ok := buo.mutation.CommentCount(); ok {
		_spec.SetField(board.FieldCommentCount, field.TypeInt, value)
	}
	if value, ok := buo.mutation.AddedCommentCount(); ok {
		_spec.AddField(board.FieldCommentCount, field.TypeInt, value)
	}
	if value, ok := buo.mutation.CreatedAt(); ok {
		_spec.SetField(board.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := buo.mutation.UpdatedAt(); ok {
		_spec.SetField(board.FieldUpdatedAt, field.TypeTime, value)
	}
	if buo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   board.UserTable,
			Columns: []string{board.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   board.UserTable,
			Columns: []string{board.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   board.CommentsTable,
			Columns: []string{board.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !buo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   board.CommentsTable,
			Columns: []string{board.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   board.CommentsTable,
			Columns: []string{board.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.BoardLikeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   board.BoardLikeTable,
			Columns: []string{board.BoardLikeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(boardlike.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedBoardLikeIDs(); len(nodes) > 0 && !buo.mutation.BoardLikeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   board.BoardLikeTable,
			Columns: []string{board.BoardLikeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(boardlike.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.BoardLikeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   board.BoardLikeTable,
			Columns: []string{board.BoardLikeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(boardlike.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Board{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{board.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}
