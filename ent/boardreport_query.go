// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/leeeeeoy/go_study/ent/board"
	"github.com/leeeeeoy/go_study/ent/boardreport"
	"github.com/leeeeeoy/go_study/ent/predicate"
	"github.com/leeeeeoy/go_study/ent/reporttype"
	"github.com/leeeeeoy/go_study/ent/user"
)

// BoardReportQuery is the builder for querying BoardReport entities.
type BoardReportQuery struct {
	config
	ctx            *QueryContext
	order          []boardreport.OrderOption
	inters         []Interceptor
	predicates     []predicate.BoardReport
	withUser       *UserQuery
	withBoard      *BoardQuery
	withReportType *ReportTypeQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the BoardReportQuery builder.
func (brq *BoardReportQuery) Where(ps ...predicate.BoardReport) *BoardReportQuery {
	brq.predicates = append(brq.predicates, ps...)
	return brq
}

// Limit the number of records to be returned by this query.
func (brq *BoardReportQuery) Limit(limit int) *BoardReportQuery {
	brq.ctx.Limit = &limit
	return brq
}

// Offset to start from.
func (brq *BoardReportQuery) Offset(offset int) *BoardReportQuery {
	brq.ctx.Offset = &offset
	return brq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (brq *BoardReportQuery) Unique(unique bool) *BoardReportQuery {
	brq.ctx.Unique = &unique
	return brq
}

// Order specifies how the records should be ordered.
func (brq *BoardReportQuery) Order(o ...boardreport.OrderOption) *BoardReportQuery {
	brq.order = append(brq.order, o...)
	return brq
}

// QueryUser chains the current query on the "user" edge.
func (brq *BoardReportQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: brq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := brq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := brq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(boardreport.Table, boardreport.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, boardreport.UserTable, boardreport.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(brq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBoard chains the current query on the "board" edge.
func (brq *BoardReportQuery) QueryBoard() *BoardQuery {
	query := (&BoardClient{config: brq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := brq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := brq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(boardreport.Table, boardreport.FieldID, selector),
			sqlgraph.To(board.Table, board.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, boardreport.BoardTable, boardreport.BoardColumn),
		)
		fromU = sqlgraph.SetNeighbors(brq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReportType chains the current query on the "report_type" edge.
func (brq *BoardReportQuery) QueryReportType() *ReportTypeQuery {
	query := (&ReportTypeClient{config: brq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := brq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := brq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(boardreport.Table, boardreport.FieldID, selector),
			sqlgraph.To(reporttype.Table, reporttype.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, boardreport.ReportTypeTable, boardreport.ReportTypeColumn),
		)
		fromU = sqlgraph.SetNeighbors(brq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first BoardReport entity from the query.
// Returns a *NotFoundError when no BoardReport was found.
func (brq *BoardReportQuery) First(ctx context.Context) (*BoardReport, error) {
	nodes, err := brq.Limit(1).All(setContextOp(ctx, brq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{boardreport.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (brq *BoardReportQuery) FirstX(ctx context.Context) *BoardReport {
	node, err := brq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first BoardReport ID from the query.
// Returns a *NotFoundError when no BoardReport ID was found.
func (brq *BoardReportQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = brq.Limit(1).IDs(setContextOp(ctx, brq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{boardreport.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (brq *BoardReportQuery) FirstIDX(ctx context.Context) int {
	id, err := brq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single BoardReport entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one BoardReport entity is found.
// Returns a *NotFoundError when no BoardReport entities are found.
func (brq *BoardReportQuery) Only(ctx context.Context) (*BoardReport, error) {
	nodes, err := brq.Limit(2).All(setContextOp(ctx, brq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{boardreport.Label}
	default:
		return nil, &NotSingularError{boardreport.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (brq *BoardReportQuery) OnlyX(ctx context.Context) *BoardReport {
	node, err := brq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only BoardReport ID in the query.
// Returns a *NotSingularError when more than one BoardReport ID is found.
// Returns a *NotFoundError when no entities are found.
func (brq *BoardReportQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = brq.Limit(2).IDs(setContextOp(ctx, brq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{boardreport.Label}
	default:
		err = &NotSingularError{boardreport.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (brq *BoardReportQuery) OnlyIDX(ctx context.Context) int {
	id, err := brq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of BoardReports.
func (brq *BoardReportQuery) All(ctx context.Context) ([]*BoardReport, error) {
	ctx = setContextOp(ctx, brq.ctx, "All")
	if err := brq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*BoardReport, *BoardReportQuery]()
	return withInterceptors[[]*BoardReport](ctx, brq, qr, brq.inters)
}

// AllX is like All, but panics if an error occurs.
func (brq *BoardReportQuery) AllX(ctx context.Context) []*BoardReport {
	nodes, err := brq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of BoardReport IDs.
func (brq *BoardReportQuery) IDs(ctx context.Context) (ids []int, err error) {
	if brq.ctx.Unique == nil && brq.path != nil {
		brq.Unique(true)
	}
	ctx = setContextOp(ctx, brq.ctx, "IDs")
	if err = brq.Select(boardreport.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (brq *BoardReportQuery) IDsX(ctx context.Context) []int {
	ids, err := brq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (brq *BoardReportQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, brq.ctx, "Count")
	if err := brq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, brq, querierCount[*BoardReportQuery](), brq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (brq *BoardReportQuery) CountX(ctx context.Context) int {
	count, err := brq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (brq *BoardReportQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, brq.ctx, "Exist")
	switch _, err := brq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (brq *BoardReportQuery) ExistX(ctx context.Context) bool {
	exist, err := brq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the BoardReportQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (brq *BoardReportQuery) Clone() *BoardReportQuery {
	if brq == nil {
		return nil
	}
	return &BoardReportQuery{
		config:         brq.config,
		ctx:            brq.ctx.Clone(),
		order:          append([]boardreport.OrderOption{}, brq.order...),
		inters:         append([]Interceptor{}, brq.inters...),
		predicates:     append([]predicate.BoardReport{}, brq.predicates...),
		withUser:       brq.withUser.Clone(),
		withBoard:      brq.withBoard.Clone(),
		withReportType: brq.withReportType.Clone(),
		// clone intermediate query.
		sql:  brq.sql.Clone(),
		path: brq.path,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (brq *BoardReportQuery) WithUser(opts ...func(*UserQuery)) *BoardReportQuery {
	query := (&UserClient{config: brq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	brq.withUser = query
	return brq
}

// WithBoard tells the query-builder to eager-load the nodes that are connected to
// the "board" edge. The optional arguments are used to configure the query builder of the edge.
func (brq *BoardReportQuery) WithBoard(opts ...func(*BoardQuery)) *BoardReportQuery {
	query := (&BoardClient{config: brq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	brq.withBoard = query
	return brq
}

// WithReportType tells the query-builder to eager-load the nodes that are connected to
// the "report_type" edge. The optional arguments are used to configure the query builder of the edge.
func (brq *BoardReportQuery) WithReportType(opts ...func(*ReportTypeQuery)) *BoardReportQuery {
	query := (&ReportTypeClient{config: brq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	brq.withReportType = query
	return brq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		BoardID int `json:"board_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.BoardReport.Query().
//		GroupBy(boardreport.FieldBoardID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (brq *BoardReportQuery) GroupBy(field string, fields ...string) *BoardReportGroupBy {
	brq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &BoardReportGroupBy{build: brq}
	grbuild.flds = &brq.ctx.Fields
	grbuild.label = boardreport.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		BoardID int `json:"board_id,omitempty"`
//	}
//
//	client.BoardReport.Query().
//		Select(boardreport.FieldBoardID).
//		Scan(ctx, &v)
func (brq *BoardReportQuery) Select(fields ...string) *BoardReportSelect {
	brq.ctx.Fields = append(brq.ctx.Fields, fields...)
	sbuild := &BoardReportSelect{BoardReportQuery: brq}
	sbuild.label = boardreport.Label
	sbuild.flds, sbuild.scan = &brq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a BoardReportSelect configured with the given aggregations.
func (brq *BoardReportQuery) Aggregate(fns ...AggregateFunc) *BoardReportSelect {
	return brq.Select().Aggregate(fns...)
}

func (brq *BoardReportQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range brq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, brq); err != nil {
				return err
			}
		}
	}
	for _, f := range brq.ctx.Fields {
		if !boardreport.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if brq.path != nil {
		prev, err := brq.path(ctx)
		if err != nil {
			return err
		}
		brq.sql = prev
	}
	return nil
}

func (brq *BoardReportQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*BoardReport, error) {
	var (
		nodes       = []*BoardReport{}
		_spec       = brq.querySpec()
		loadedTypes = [3]bool{
			brq.withUser != nil,
			brq.withBoard != nil,
			brq.withReportType != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*BoardReport).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &BoardReport{config: brq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, brq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := brq.withUser; query != nil {
		if err := brq.loadUser(ctx, query, nodes, nil,
			func(n *BoardReport, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := brq.withBoard; query != nil {
		if err := brq.loadBoard(ctx, query, nodes, nil,
			func(n *BoardReport, e *Board) { n.Edges.Board = e }); err != nil {
			return nil, err
		}
	}
	if query := brq.withReportType; query != nil {
		if err := brq.loadReportType(ctx, query, nodes, nil,
			func(n *BoardReport, e *ReportType) { n.Edges.ReportType = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (brq *BoardReportQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*BoardReport, init func(*BoardReport), assign func(*BoardReport, *User)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*BoardReport)
	for i := range nodes {
		fk := nodes[i].ReporterID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "reporter_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (brq *BoardReportQuery) loadBoard(ctx context.Context, query *BoardQuery, nodes []*BoardReport, init func(*BoardReport), assign func(*BoardReport, *Board)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*BoardReport)
	for i := range nodes {
		fk := nodes[i].BoardID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(board.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "board_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (brq *BoardReportQuery) loadReportType(ctx context.Context, query *ReportTypeQuery, nodes []*BoardReport, init func(*BoardReport), assign func(*BoardReport, *ReportType)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*BoardReport)
	for i := range nodes {
		fk := nodes[i].ReportTypeID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(reporttype.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "report_type_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (brq *BoardReportQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := brq.querySpec()
	_spec.Node.Columns = brq.ctx.Fields
	if len(brq.ctx.Fields) > 0 {
		_spec.Unique = brq.ctx.Unique != nil && *brq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, brq.driver, _spec)
}

func (brq *BoardReportQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(boardreport.Table, boardreport.Columns, sqlgraph.NewFieldSpec(boardreport.FieldID, field.TypeInt))
	_spec.From = brq.sql
	if unique := brq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if brq.path != nil {
		_spec.Unique = true
	}
	if fields := brq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, boardreport.FieldID)
		for i := range fields {
			if fields[i] != boardreport.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if brq.withUser != nil {
			_spec.Node.AddColumnOnce(boardreport.FieldReporterID)
		}
		if brq.withBoard != nil {
			_spec.Node.AddColumnOnce(boardreport.FieldBoardID)
		}
		if brq.withReportType != nil {
			_spec.Node.AddColumnOnce(boardreport.FieldReportTypeID)
		}
	}
	if ps := brq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := brq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := brq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := brq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (brq *BoardReportQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(brq.driver.Dialect())
	t1 := builder.Table(boardreport.Table)
	columns := brq.ctx.Fields
	if len(columns) == 0 {
		columns = boardreport.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if brq.sql != nil {
		selector = brq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if brq.ctx.Unique != nil && *brq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range brq.predicates {
		p(selector)
	}
	for _, p := range brq.order {
		p(selector)
	}
	if offset := brq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := brq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// BoardReportGroupBy is the group-by builder for BoardReport entities.
type BoardReportGroupBy struct {
	selector
	build *BoardReportQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (brgb *BoardReportGroupBy) Aggregate(fns ...AggregateFunc) *BoardReportGroupBy {
	brgb.fns = append(brgb.fns, fns...)
	return brgb
}

// Scan applies the selector query and scans the result into the given value.
func (brgb *BoardReportGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, brgb.build.ctx, "GroupBy")
	if err := brgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BoardReportQuery, *BoardReportGroupBy](ctx, brgb.build, brgb, brgb.build.inters, v)
}

func (brgb *BoardReportGroupBy) sqlScan(ctx context.Context, root *BoardReportQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(brgb.fns))
	for _, fn := range brgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*brgb.flds)+len(brgb.fns))
		for _, f := range *brgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*brgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := brgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// BoardReportSelect is the builder for selecting fields of BoardReport entities.
type BoardReportSelect struct {
	*BoardReportQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (brs *BoardReportSelect) Aggregate(fns ...AggregateFunc) *BoardReportSelect {
	brs.fns = append(brs.fns, fns...)
	return brs
}

// Scan applies the selector query and scans the result into the given value.
func (brs *BoardReportSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, brs.ctx, "Select")
	if err := brs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BoardReportQuery, *BoardReportSelect](ctx, brs.BoardReportQuery, brs, brs.inters, v)
}

func (brs *BoardReportSelect) sqlScan(ctx context.Context, root *BoardReportQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(brs.fns))
	for _, fn := range brs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*brs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := brs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
