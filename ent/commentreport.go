// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/leeeeeoy/go_study/ent/comment"
	"github.com/leeeeeoy/go_study/ent/commentreport"
	"github.com/leeeeeoy/go_study/ent/reporttype"
	"github.com/leeeeeoy/go_study/ent/user"
)

// CommentReport is the model entity for the CommentReport schema.
type CommentReport struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CommentID holds the value of the "comment_id" field.
	CommentID int `json:"comment_id,omitempty"`
	// ReportTypeID holds the value of the "report_type_id" field.
	ReportTypeID int `json:"report_type_id,omitempty"`
	// ReporterID holds the value of the "reporter_id" field.
	ReporterID int `json:"reporter_id,omitempty"`
	// Desc holds the value of the "desc" field.
	Desc string `json:"desc,omitempty"`
	// 0 is deleted, 1 is activate
	Status commentreport.Status `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CommentReportQuery when eager-loading is set.
	Edges        CommentReportEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CommentReportEdges holds the relations/edges for other nodes in the graph.
type CommentReportEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Comment holds the value of the comment edge.
	Comment *Comment `json:"comment,omitempty"`
	// ReportType holds the value of the report_type edge.
	ReportType *ReportType `json:"report_type,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CommentReportEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// CommentOrErr returns the Comment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CommentReportEdges) CommentOrErr() (*Comment, error) {
	if e.loadedTypes[1] {
		if e.Comment == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: comment.Label}
		}
		return e.Comment, nil
	}
	return nil, &NotLoadedError{edge: "comment"}
}

// ReportTypeOrErr returns the ReportType value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CommentReportEdges) ReportTypeOrErr() (*ReportType, error) {
	if e.loadedTypes[2] {
		if e.ReportType == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: reporttype.Label}
		}
		return e.ReportType, nil
	}
	return nil, &NotLoadedError{edge: "report_type"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CommentReport) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case commentreport.FieldID, commentreport.FieldCommentID, commentreport.FieldReportTypeID, commentreport.FieldReporterID:
			values[i] = new(sql.NullInt64)
		case commentreport.FieldDesc, commentreport.FieldStatus:
			values[i] = new(sql.NullString)
		case commentreport.FieldCreatedAt, commentreport.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CommentReport fields.
func (cr *CommentReport) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case commentreport.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cr.ID = int(value.Int64)
		case commentreport.FieldCommentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field comment_id", values[i])
			} else if value.Valid {
				cr.CommentID = int(value.Int64)
			}
		case commentreport.FieldReportTypeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field report_type_id", values[i])
			} else if value.Valid {
				cr.ReportTypeID = int(value.Int64)
			}
		case commentreport.FieldReporterID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field reporter_id", values[i])
			} else if value.Valid {
				cr.ReporterID = int(value.Int64)
			}
		case commentreport.FieldDesc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field desc", values[i])
			} else if value.Valid {
				cr.Desc = value.String
			}
		case commentreport.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				cr.Status = commentreport.Status(value.String)
			}
		case commentreport.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cr.CreatedAt = value.Time
			}
		case commentreport.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cr.UpdatedAt = value.Time
			}
		default:
			cr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CommentReport.
// This includes values selected through modifiers, order, etc.
func (cr *CommentReport) Value(name string) (ent.Value, error) {
	return cr.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the CommentReport entity.
func (cr *CommentReport) QueryUser() *UserQuery {
	return NewCommentReportClient(cr.config).QueryUser(cr)
}

// QueryComment queries the "comment" edge of the CommentReport entity.
func (cr *CommentReport) QueryComment() *CommentQuery {
	return NewCommentReportClient(cr.config).QueryComment(cr)
}

// QueryReportType queries the "report_type" edge of the CommentReport entity.
func (cr *CommentReport) QueryReportType() *ReportTypeQuery {
	return NewCommentReportClient(cr.config).QueryReportType(cr)
}

// Update returns a builder for updating this CommentReport.
// Note that you need to call CommentReport.Unwrap() before calling this method if this CommentReport
// was returned from a transaction, and the transaction was committed or rolled back.
func (cr *CommentReport) Update() *CommentReportUpdateOne {
	return NewCommentReportClient(cr.config).UpdateOne(cr)
}

// Unwrap unwraps the CommentReport entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cr *CommentReport) Unwrap() *CommentReport {
	_tx, ok := cr.config.driver.(*txDriver)
	if !ok {
		panic("ent: CommentReport is not a transactional entity")
	}
	cr.config.driver = _tx.drv
	return cr
}

// String implements the fmt.Stringer.
func (cr *CommentReport) String() string {
	var builder strings.Builder
	builder.WriteString("CommentReport(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cr.ID))
	builder.WriteString("comment_id=")
	builder.WriteString(fmt.Sprintf("%v", cr.CommentID))
	builder.WriteString(", ")
	builder.WriteString("report_type_id=")
	builder.WriteString(fmt.Sprintf("%v", cr.ReportTypeID))
	builder.WriteString(", ")
	builder.WriteString("reporter_id=")
	builder.WriteString(fmt.Sprintf("%v", cr.ReporterID))
	builder.WriteString(", ")
	builder.WriteString("desc=")
	builder.WriteString(cr.Desc)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", cr.Status))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(cr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(cr.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// CommentReports is a parsable slice of CommentReport.
type CommentReports []*CommentReport
