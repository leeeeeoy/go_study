// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/leeeeeoy/go_study/ent/board"
	"github.com/leeeeeoy/go_study/ent/comment"
	"github.com/leeeeeoy/go_study/ent/user"
)

// Comment is the model entity for the Comment schema.
type Comment struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Text holds the value of the "text" field.
	Text string `json:"text,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// BoardID holds the value of the "board_id" field.
	BoardID int `json:"board_id,omitempty"`
	// LikeCount holds the value of the "like_count" field.
	LikeCount int `json:"like_count,omitempty"`
	// Status holds the value of the "status" field.
	Status comment.Status `json:"status,omitempty"`
	// ReportCount holds the value of the "report_count" field.
	ReportCount int `json:"report_count,omitempty"`
	// LanguageType holds the value of the "language_type" field.
	LanguageType string `json:"language_type,omitempty"`
	// AuthorHeart holds the value of the "author_heart" field.
	AuthorHeart bool `json:"author_heart,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CommentQuery when eager-loading is set.
	Edges        CommentEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CommentEdges holds the relations/edges for other nodes in the graph.
type CommentEdges struct {
	// Board holds the value of the board edge.
	Board *Board `json:"board,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// CommentLike holds the value of the comment_like edge.
	CommentLike []*CommentLike `json:"comment_like,omitempty"`
	// CommentMention holds the value of the comment_mention edge.
	CommentMention []*CommentMention `json:"comment_mention,omitempty"`
	// CommentReport holds the value of the comment_report edge.
	CommentReport []*CommentReport `json:"comment_report,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// BoardOrErr returns the Board value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CommentEdges) BoardOrErr() (*Board, error) {
	if e.loadedTypes[0] {
		if e.Board == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: board.Label}
		}
		return e.Board, nil
	}
	return nil, &NotLoadedError{edge: "board"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CommentEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// CommentLikeOrErr returns the CommentLike value or an error if the edge
// was not loaded in eager-loading.
func (e CommentEdges) CommentLikeOrErr() ([]*CommentLike, error) {
	if e.loadedTypes[2] {
		return e.CommentLike, nil
	}
	return nil, &NotLoadedError{edge: "comment_like"}
}

// CommentMentionOrErr returns the CommentMention value or an error if the edge
// was not loaded in eager-loading.
func (e CommentEdges) CommentMentionOrErr() ([]*CommentMention, error) {
	if e.loadedTypes[3] {
		return e.CommentMention, nil
	}
	return nil, &NotLoadedError{edge: "comment_mention"}
}

// CommentReportOrErr returns the CommentReport value or an error if the edge
// was not loaded in eager-loading.
func (e CommentEdges) CommentReportOrErr() ([]*CommentReport, error) {
	if e.loadedTypes[4] {
		return e.CommentReport, nil
	}
	return nil, &NotLoadedError{edge: "comment_report"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Comment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case comment.FieldAuthorHeart:
			values[i] = new(sql.NullBool)
		case comment.FieldID, comment.FieldUserID, comment.FieldBoardID, comment.FieldLikeCount, comment.FieldReportCount:
			values[i] = new(sql.NullInt64)
		case comment.FieldText, comment.FieldStatus, comment.FieldLanguageType:
			values[i] = new(sql.NullString)
		case comment.FieldCreatedAt, comment.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Comment fields.
func (c *Comment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case comment.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case comment.FieldText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text", values[i])
			} else if value.Valid {
				c.Text = value.String
			}
		case comment.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				c.UserID = int(value.Int64)
			}
		case comment.FieldBoardID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field board_id", values[i])
			} else if value.Valid {
				c.BoardID = int(value.Int64)
			}
		case comment.FieldLikeCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field like_count", values[i])
			} else if value.Valid {
				c.LikeCount = int(value.Int64)
			}
		case comment.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				c.Status = comment.Status(value.String)
			}
		case comment.FieldReportCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field report_count", values[i])
			} else if value.Valid {
				c.ReportCount = int(value.Int64)
			}
		case comment.FieldLanguageType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field language_type", values[i])
			} else if value.Valid {
				c.LanguageType = value.String
			}
		case comment.FieldAuthorHeart:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field author_heart", values[i])
			} else if value.Valid {
				c.AuthorHeart = value.Bool
			}
		case comment.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case comment.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Comment.
// This includes values selected through modifiers, order, etc.
func (c *Comment) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryBoard queries the "board" edge of the Comment entity.
func (c *Comment) QueryBoard() *BoardQuery {
	return NewCommentClient(c.config).QueryBoard(c)
}

// QueryUser queries the "user" edge of the Comment entity.
func (c *Comment) QueryUser() *UserQuery {
	return NewCommentClient(c.config).QueryUser(c)
}

// QueryCommentLike queries the "comment_like" edge of the Comment entity.
func (c *Comment) QueryCommentLike() *CommentLikeQuery {
	return NewCommentClient(c.config).QueryCommentLike(c)
}

// QueryCommentMention queries the "comment_mention" edge of the Comment entity.
func (c *Comment) QueryCommentMention() *CommentMentionQuery {
	return NewCommentClient(c.config).QueryCommentMention(c)
}

// QueryCommentReport queries the "comment_report" edge of the Comment entity.
func (c *Comment) QueryCommentReport() *CommentReportQuery {
	return NewCommentClient(c.config).QueryCommentReport(c)
}

// Update returns a builder for updating this Comment.
// Note that you need to call Comment.Unwrap() before calling this method if this Comment
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Comment) Update() *CommentUpdateOne {
	return NewCommentClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Comment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Comment) Unwrap() *Comment {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Comment is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Comment) String() string {
	var builder strings.Builder
	builder.WriteString("Comment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("text=")
	builder.WriteString(c.Text)
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", c.UserID))
	builder.WriteString(", ")
	builder.WriteString("board_id=")
	builder.WriteString(fmt.Sprintf("%v", c.BoardID))
	builder.WriteString(", ")
	builder.WriteString("like_count=")
	builder.WriteString(fmt.Sprintf("%v", c.LikeCount))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", c.Status))
	builder.WriteString(", ")
	builder.WriteString("report_count=")
	builder.WriteString(fmt.Sprintf("%v", c.ReportCount))
	builder.WriteString(", ")
	builder.WriteString("language_type=")
	builder.WriteString(c.LanguageType)
	builder.WriteString(", ")
	builder.WriteString("author_heart=")
	builder.WriteString(fmt.Sprintf("%v", c.AuthorHeart))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Comments is a parsable slice of Comment.
type Comments []*Comment
