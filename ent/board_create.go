// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/leeeeeoy/go_study/ent/board"
	"github.com/leeeeeoy/go_study/ent/boardhashtag"
	"github.com/leeeeeoy/go_study/ent/boardlike"
	"github.com/leeeeeoy/go_study/ent/comment"
	"github.com/leeeeeoy/go_study/ent/user"
)

// BoardCreate is the builder for creating a Board entity.
type BoardCreate struct {
	config
	mutation *BoardMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (bc *BoardCreate) SetTitle(s string) *BoardCreate {
	bc.mutation.SetTitle(s)
	return bc
}

// SetText sets the "text" field.
func (bc *BoardCreate) SetText(s string) *BoardCreate {
	bc.mutation.SetText(s)
	return bc
}

// SetUserID sets the "user_id" field.
func (bc *BoardCreate) SetUserID(i int) *BoardCreate {
	bc.mutation.SetUserID(i)
	return bc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (bc *BoardCreate) SetNillableUserID(i *int) *BoardCreate {
	if i != nil {
		bc.SetUserID(*i)
	}
	return bc
}

// SetLikeCount sets the "like_count" field.
func (bc *BoardCreate) SetLikeCount(i int) *BoardCreate {
	bc.mutation.SetLikeCount(i)
	return bc
}

// SetCommentCount sets the "comment_count" field.
func (bc *BoardCreate) SetCommentCount(i int) *BoardCreate {
	bc.mutation.SetCommentCount(i)
	return bc
}

// SetViewCount sets the "view_count" field.
func (bc *BoardCreate) SetViewCount(i int) *BoardCreate {
	bc.mutation.SetViewCount(i)
	return bc
}

// SetReportCount sets the "report_count" field.
func (bc *BoardCreate) SetReportCount(i int) *BoardCreate {
	bc.mutation.SetReportCount(i)
	return bc
}

// SetStatus sets the "status" field.
func (bc *BoardCreate) SetStatus(b board.Status) *BoardCreate {
	bc.mutation.SetStatus(b)
	return bc
}

// SetLanguageType sets the "language_type" field.
func (bc *BoardCreate) SetLanguageType(s string) *BoardCreate {
	bc.mutation.SetLanguageType(s)
	return bc
}

// SetAttachments sets the "attachments" field.
func (bc *BoardCreate) SetAttachments(s string) *BoardCreate {
	bc.mutation.SetAttachments(s)
	return bc
}

// SetNillableAttachments sets the "attachments" field if the given value is not nil.
func (bc *BoardCreate) SetNillableAttachments(s *string) *BoardCreate {
	if s != nil {
		bc.SetAttachments(*s)
	}
	return bc
}

// SetCreatedAt sets the "created_at" field.
func (bc *BoardCreate) SetCreatedAt(t time.Time) *BoardCreate {
	bc.mutation.SetCreatedAt(t)
	return bc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bc *BoardCreate) SetNillableCreatedAt(t *time.Time) *BoardCreate {
	if t != nil {
		bc.SetCreatedAt(*t)
	}
	return bc
}

// SetUpdatedAt sets the "updated_at" field.
func (bc *BoardCreate) SetUpdatedAt(t time.Time) *BoardCreate {
	bc.mutation.SetUpdatedAt(t)
	return bc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bc *BoardCreate) SetNillableUpdatedAt(t *time.Time) *BoardCreate {
	if t != nil {
		bc.SetUpdatedAt(*t)
	}
	return bc
}

// SetUser sets the "user" edge to the User entity.
func (bc *BoardCreate) SetUser(u *User) *BoardCreate {
	return bc.SetUserID(u.ID)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (bc *BoardCreate) AddCommentIDs(ids ...int) *BoardCreate {
	bc.mutation.AddCommentIDs(ids...)
	return bc
}

// AddComments adds the "comments" edges to the Comment entity.
func (bc *BoardCreate) AddComments(c ...*Comment) *BoardCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return bc.AddCommentIDs(ids...)
}

// AddBoardLikeIDs adds the "board_like" edge to the BoardLike entity by IDs.
func (bc *BoardCreate) AddBoardLikeIDs(ids ...int) *BoardCreate {
	bc.mutation.AddBoardLikeIDs(ids...)
	return bc
}

// AddBoardLike adds the "board_like" edges to the BoardLike entity.
func (bc *BoardCreate) AddBoardLike(b ...*BoardLike) *BoardCreate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bc.AddBoardLikeIDs(ids...)
}

// AddBoardHashtagIDs adds the "board_hashtag" edge to the BoardHashtag entity by IDs.
func (bc *BoardCreate) AddBoardHashtagIDs(ids ...int) *BoardCreate {
	bc.mutation.AddBoardHashtagIDs(ids...)
	return bc
}

// AddBoardHashtag adds the "board_hashtag" edges to the BoardHashtag entity.
func (bc *BoardCreate) AddBoardHashtag(b ...*BoardHashtag) *BoardCreate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bc.AddBoardHashtagIDs(ids...)
}

// Mutation returns the BoardMutation object of the builder.
func (bc *BoardCreate) Mutation() *BoardMutation {
	return bc.mutation
}

// Save creates the Board in the database.
func (bc *BoardCreate) Save(ctx context.Context) (*Board, error) {
	bc.defaults()
	return withHooks(ctx, bc.sqlSave, bc.mutation, bc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BoardCreate) SaveX(ctx context.Context) *Board {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BoardCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BoardCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bc *BoardCreate) defaults() {
	if _, ok := bc.mutation.CreatedAt(); !ok {
		v := board.DefaultCreatedAt()
		bc.mutation.SetCreatedAt(v)
	}
	if _, ok := bc.mutation.UpdatedAt(); !ok {
		v := board.DefaultUpdatedAt()
		bc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BoardCreate) check() error {
	if _, ok := bc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Board.title"`)}
	}
	if _, ok := bc.mutation.Text(); !ok {
		return &ValidationError{Name: "text", err: errors.New(`ent: missing required field "Board.text"`)}
	}
	if _, ok := bc.mutation.LikeCount(); !ok {
		return &ValidationError{Name: "like_count", err: errors.New(`ent: missing required field "Board.like_count"`)}
	}
	if v, ok := bc.mutation.LikeCount(); ok {
		if err := board.LikeCountValidator(v); err != nil {
			return &ValidationError{Name: "like_count", err: fmt.Errorf(`ent: validator failed for field "Board.like_count": %w`, err)}
		}
	}
	if _, ok := bc.mutation.CommentCount(); !ok {
		return &ValidationError{Name: "comment_count", err: errors.New(`ent: missing required field "Board.comment_count"`)}
	}
	if v, ok := bc.mutation.CommentCount(); ok {
		if err := board.CommentCountValidator(v); err != nil {
			return &ValidationError{Name: "comment_count", err: fmt.Errorf(`ent: validator failed for field "Board.comment_count": %w`, err)}
		}
	}
	if _, ok := bc.mutation.ViewCount(); !ok {
		return &ValidationError{Name: "view_count", err: errors.New(`ent: missing required field "Board.view_count"`)}
	}
	if v, ok := bc.mutation.ViewCount(); ok {
		if err := board.ViewCountValidator(v); err != nil {
			return &ValidationError{Name: "view_count", err: fmt.Errorf(`ent: validator failed for field "Board.view_count": %w`, err)}
		}
	}
	if _, ok := bc.mutation.ReportCount(); !ok {
		return &ValidationError{Name: "report_count", err: errors.New(`ent: missing required field "Board.report_count"`)}
	}
	if v, ok := bc.mutation.ReportCount(); ok {
		if err := board.ReportCountValidator(v); err != nil {
			return &ValidationError{Name: "report_count", err: fmt.Errorf(`ent: validator failed for field "Board.report_count": %w`, err)}
		}
	}
	if _, ok := bc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Board.status"`)}
	}
	if v, ok := bc.mutation.Status(); ok {
		if err := board.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Board.status": %w`, err)}
		}
	}
	if _, ok := bc.mutation.LanguageType(); !ok {
		return &ValidationError{Name: "language_type", err: errors.New(`ent: missing required field "Board.language_type"`)}
	}
	if _, ok := bc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Board.created_at"`)}
	}
	if _, ok := bc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Board.updated_at"`)}
	}
	return nil
}

func (bc *BoardCreate) sqlSave(ctx context.Context) (*Board, error) {
	if err := bc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	bc.mutation.id = &_node.ID
	bc.mutation.done = true
	return _node, nil
}

func (bc *BoardCreate) createSpec() (*Board, *sqlgraph.CreateSpec) {
	var (
		_node = &Board{config: bc.config}
		_spec = sqlgraph.NewCreateSpec(board.Table, sqlgraph.NewFieldSpec(board.FieldID, field.TypeInt))
	)
	if value, ok := bc.mutation.Title(); ok {
		_spec.SetField(board.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := bc.mutation.Text(); ok {
		_spec.SetField(board.FieldText, field.TypeString, value)
		_node.Text = value
	}
	if value, ok := bc.mutation.LikeCount(); ok {
		_spec.SetField(board.FieldLikeCount, field.TypeInt, value)
		_node.LikeCount = value
	}
	if value, ok := bc.mutation.CommentCount(); ok {
		_spec.SetField(board.FieldCommentCount, field.TypeInt, value)
		_node.CommentCount = value
	}
	if value, ok := bc.mutation.ViewCount(); ok {
		_spec.SetField(board.FieldViewCount, field.TypeInt, value)
		_node.ViewCount = value
	}
	if value, ok := bc.mutation.ReportCount(); ok {
		_spec.SetField(board.FieldReportCount, field.TypeInt, value)
		_node.ReportCount = value
	}
	if value, ok := bc.mutation.Status(); ok {
		_spec.SetField(board.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := bc.mutation.LanguageType(); ok {
		_spec.SetField(board.FieldLanguageType, field.TypeString, value)
		_node.LanguageType = value
	}
	if value, ok := bc.mutation.Attachments(); ok {
		_spec.SetField(board.FieldAttachments, field.TypeString, value)
		_node.Attachments = value
	}
	if value, ok := bc.mutation.CreatedAt(); ok {
		_spec.SetField(board.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bc.mutation.UpdatedAt(); ok {
		_spec.SetField(board.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := bc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   board.UserTable,
			Columns: []string{board.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   board.CommentsTable,
			Columns: []string{board.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.BoardLikeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   board.BoardLikeTable,
			Columns: []string{board.BoardLikeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(boardlike.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.BoardHashtagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   board.BoardHashtagTable,
			Columns: []string{board.BoardHashtagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(boardhashtag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BoardCreateBulk is the builder for creating many Board entities in bulk.
type BoardCreateBulk struct {
	config
	builders []*BoardCreate
}

// Save creates the Board entities in the database.
func (bcb *BoardCreateBulk) Save(ctx context.Context) ([]*Board, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Board, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BoardMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BoardCreateBulk) SaveX(ctx context.Context) []*Board {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BoardCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BoardCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}
