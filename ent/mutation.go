// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/leeeeeoy/go_study/ent/board"
	"github.com/leeeeeoy/go_study/ent/boardhashtag"
	"github.com/leeeeeoy/go_study/ent/boardlike"
	"github.com/leeeeeoy/go_study/ent/boardreport"
	"github.com/leeeeeoy/go_study/ent/bookmark"
	"github.com/leeeeeoy/go_study/ent/category"
	"github.com/leeeeeoy/go_study/ent/comment"
	"github.com/leeeeeoy/go_study/ent/commentlike"
	"github.com/leeeeeoy/go_study/ent/commentmention"
	"github.com/leeeeeoy/go_study/ent/commentreport"
	"github.com/leeeeeoy/go_study/ent/hashtag"
	"github.com/leeeeeoy/go_study/ent/predicate"
	"github.com/leeeeeoy/go_study/ent/reporttype"
	"github.com/leeeeeoy/go_study/ent/topic"
	"github.com/leeeeeoy/go_study/ent/user"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeBoard          = "Board"
	TypeBoardHashtag   = "BoardHashtag"
	TypeBoardLike      = "BoardLike"
	TypeBoardReport    = "BoardReport"
	TypeBookMark       = "BookMark"
	TypeCategory       = "Category"
	TypeComment        = "Comment"
	TypeCommentLike    = "CommentLike"
	TypeCommentMention = "CommentMention"
	TypeCommentReport  = "CommentReport"
	TypeHashtag        = "Hashtag"
	TypeReportType     = "ReportType"
	TypeTopic          = "Topic"
	TypeUser           = "User"
)

// BoardMutation represents an operation that mutates the Board nodes in the graph.
type BoardMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	title                *string
	text                 *string
	like_count           *int
	addlike_count        *int
	comment_count        *int
	addcomment_count     *int
	view_count           *int
	addview_count        *int
	report_count         *int
	addreport_count      *int
	status               *board.Status
	private              *bool
	language_type        *string
	attachments          *string
	created_at           *time.Time
	updated_at           *time.Time
	clearedFields        map[string]struct{}
	user                 *int
	cleareduser          bool
	topic                *int
	clearedtopic         bool
	comments             map[int]struct{}
	removedcomments      map[int]struct{}
	clearedcomments      bool
	book_marks           map[int]struct{}
	removedbook_marks    map[int]struct{}
	clearedbook_marks    bool
	board_like           map[int]struct{}
	removedboard_like    map[int]struct{}
	clearedboard_like    bool
	board_hashtag        map[int]struct{}
	removedboard_hashtag map[int]struct{}
	clearedboard_hashtag bool
	board_report         map[int]struct{}
	removedboard_report  map[int]struct{}
	clearedboard_report  bool
	done                 bool
	oldValue             func(context.Context) (*Board, error)
	predicates           []predicate.Board
}

var _ ent.Mutation = (*BoardMutation)(nil)

// boardOption allows management of the mutation configuration using functional options.
type boardOption func(*BoardMutation)

// newBoardMutation creates new mutation for the Board entity.
func newBoardMutation(c config, op Op, opts ...boardOption) *BoardMutation {
	m := &BoardMutation{
		config:        c,
		op:            op,
		typ:           TypeBoard,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBoardID sets the ID field of the mutation.
func withBoardID(id int) boardOption {
	return func(m *BoardMutation) {
		var (
			err   error
			once  sync.Once
			value *Board
		)
		m.oldValue = func(ctx context.Context) (*Board, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Board.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBoard sets the old Board of the mutation.
func withBoard(node *Board) boardOption {
	return func(m *BoardMutation) {
		m.oldValue = func(context.Context) (*Board, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BoardMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BoardMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BoardMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BoardMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Board.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTitle sets the "title" field.
func (m *BoardMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *BoardMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Board entity.
// If the Board object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BoardMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *BoardMutation) ResetTitle() {
	m.title = nil
}

// SetText sets the "text" field.
func (m *BoardMutation) SetText(s string) {
	m.text = &s
}

// Text returns the value of the "text" field in the mutation.
func (m *BoardMutation) Text() (r string, exists bool) {
	v := m.text
	if v == nil {
		return
	}
	return *v, true
}

// OldText returns the old "text" field's value of the Board entity.
// If the Board object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BoardMutation) OldText(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldText is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldText requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldText: %w", err)
	}
	return oldValue.Text, nil
}

// ResetText resets all changes to the "text" field.
func (m *BoardMutation) ResetText() {
	m.text = nil
}

// SetUserID sets the "user_id" field.
func (m *BoardMutation) SetUserID(i int) {
	m.user = &i
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *BoardMutation) UserID() (r int, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Board entity.
// If the Board object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BoardMutation) OldUserID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ClearUserID clears the value of the "user_id" field.
func (m *BoardMutation) ClearUserID() {
	m.user = nil
	m.clearedFields[board.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *BoardMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[board.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *BoardMutation) ResetUserID() {
	m.user = nil
	delete(m.clearedFields, board.FieldUserID)
}

// SetTopicID sets the "topic_id" field.
func (m *BoardMutation) SetTopicID(i int) {
	m.topic = &i
}

// TopicID returns the value of the "topic_id" field in the mutation.
func (m *BoardMutation) TopicID() (r int, exists bool) {
	v := m.topic
	if v == nil {
		return
	}
	return *v, true
}

// OldTopicID returns the old "topic_id" field's value of the Board entity.
// If the Board object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BoardMutation) OldTopicID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTopicID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTopicID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTopicID: %w", err)
	}
	return oldValue.TopicID, nil
}

// ClearTopicID clears the value of the "topic_id" field.
func (m *BoardMutation) ClearTopicID() {
	m.topic = nil
	m.clearedFields[board.FieldTopicID] = struct{}{}
}

// TopicIDCleared returns if the "topic_id" field was cleared in this mutation.
func (m *BoardMutation) TopicIDCleared() bool {
	_, ok := m.clearedFields[board.FieldTopicID]
	return ok
}

// ResetTopicID resets all changes to the "topic_id" field.
func (m *BoardMutation) ResetTopicID() {
	m.topic = nil
	delete(m.clearedFields, board.FieldTopicID)
}

// SetLikeCount sets the "like_count" field.
func (m *BoardMutation) SetLikeCount(i int) {
	m.like_count = &i
	m.addlike_count = nil
}

// LikeCount returns the value of the "like_count" field in the mutation.
func (m *BoardMutation) LikeCount() (r int, exists bool) {
	v := m.like_count
	if v == nil {
		return
	}
	return *v, true
}

// OldLikeCount returns the old "like_count" field's value of the Board entity.
// If the Board object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BoardMutation) OldLikeCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLikeCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLikeCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLikeCount: %w", err)
	}
	return oldValue.LikeCount, nil
}

// AddLikeCount adds i to the "like_count" field.
func (m *BoardMutation) AddLikeCount(i int) {
	if m.addlike_count != nil {
		*m.addlike_count += i
	} else {
		m.addlike_count = &i
	}
}

// AddedLikeCount returns the value that was added to the "like_count" field in this mutation.
func (m *BoardMutation) AddedLikeCount() (r int, exists bool) {
	v := m.addlike_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetLikeCount resets all changes to the "like_count" field.
func (m *BoardMutation) ResetLikeCount() {
	m.like_count = nil
	m.addlike_count = nil
}

// SetCommentCount sets the "comment_count" field.
func (m *BoardMutation) SetCommentCount(i int) {
	m.comment_count = &i
	m.addcomment_count = nil
}

// CommentCount returns the value of the "comment_count" field in the mutation.
func (m *BoardMutation) CommentCount() (r int, exists bool) {
	v := m.comment_count
	if v == nil {
		return
	}
	return *v, true
}

// OldCommentCount returns the old "comment_count" field's value of the Board entity.
// If the Board object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BoardMutation) OldCommentCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCommentCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCommentCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCommentCount: %w", err)
	}
	return oldValue.CommentCount, nil
}

// AddCommentCount adds i to the "comment_count" field.
func (m *BoardMutation) AddCommentCount(i int) {
	if m.addcomment_count != nil {
		*m.addcomment_count += i
	} else {
		m.addcomment_count = &i
	}
}

// AddedCommentCount returns the value that was added to the "comment_count" field in this mutation.
func (m *BoardMutation) AddedCommentCount() (r int, exists bool) {
	v := m.addcomment_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetCommentCount resets all changes to the "comment_count" field.
func (m *BoardMutation) ResetCommentCount() {
	m.comment_count = nil
	m.addcomment_count = nil
}

// SetViewCount sets the "view_count" field.
func (m *BoardMutation) SetViewCount(i int) {
	m.view_count = &i
	m.addview_count = nil
}

// ViewCount returns the value of the "view_count" field in the mutation.
func (m *BoardMutation) ViewCount() (r int, exists bool) {
	v := m.view_count
	if v == nil {
		return
	}
	return *v, true
}

// OldViewCount returns the old "view_count" field's value of the Board entity.
// If the Board object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BoardMutation) OldViewCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldViewCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldViewCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldViewCount: %w", err)
	}
	return oldValue.ViewCount, nil
}

// AddViewCount adds i to the "view_count" field.
func (m *BoardMutation) AddViewCount(i int) {
	if m.addview_count != nil {
		*m.addview_count += i
	} else {
		m.addview_count = &i
	}
}

// AddedViewCount returns the value that was added to the "view_count" field in this mutation.
func (m *BoardMutation) AddedViewCount() (r int, exists bool) {
	v := m.addview_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetViewCount resets all changes to the "view_count" field.
func (m *BoardMutation) ResetViewCount() {
	m.view_count = nil
	m.addview_count = nil
}

// SetReportCount sets the "report_count" field.
func (m *BoardMutation) SetReportCount(i int) {
	m.report_count = &i
	m.addreport_count = nil
}

// ReportCount returns the value of the "report_count" field in the mutation.
func (m *BoardMutation) ReportCount() (r int, exists bool) {
	v := m.report_count
	if v == nil {
		return
	}
	return *v, true
}

// OldReportCount returns the old "report_count" field's value of the Board entity.
// If the Board object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BoardMutation) OldReportCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReportCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReportCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReportCount: %w", err)
	}
	return oldValue.ReportCount, nil
}

// AddReportCount adds i to the "report_count" field.
func (m *BoardMutation) AddReportCount(i int) {
	if m.addreport_count != nil {
		*m.addreport_count += i
	} else {
		m.addreport_count = &i
	}
}

// AddedReportCount returns the value that was added to the "report_count" field in this mutation.
func (m *BoardMutation) AddedReportCount() (r int, exists bool) {
	v := m.addreport_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetReportCount resets all changes to the "report_count" field.
func (m *BoardMutation) ResetReportCount() {
	m.report_count = nil
	m.addreport_count = nil
}

// SetStatus sets the "status" field.
func (m *BoardMutation) SetStatus(b board.Status) {
	m.status = &b
}

// Status returns the value of the "status" field in the mutation.
func (m *BoardMutation) Status() (r board.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Board entity.
// If the Board object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BoardMutation) OldStatus(ctx context.Context) (v board.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *BoardMutation) ResetStatus() {
	m.status = nil
}

// SetPrivate sets the "private" field.
func (m *BoardMutation) SetPrivate(b bool) {
	m.private = &b
}

// Private returns the value of the "private" field in the mutation.
func (m *BoardMutation) Private() (r bool, exists bool) {
	v := m.private
	if v == nil {
		return
	}
	return *v, true
}

// OldPrivate returns the old "private" field's value of the Board entity.
// If the Board object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BoardMutation) OldPrivate(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrivate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrivate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrivate: %w", err)
	}
	return oldValue.Private, nil
}

// ResetPrivate resets all changes to the "private" field.
func (m *BoardMutation) ResetPrivate() {
	m.private = nil
}

// SetLanguageType sets the "language_type" field.
func (m *BoardMutation) SetLanguageType(s string) {
	m.language_type = &s
}

// LanguageType returns the value of the "language_type" field in the mutation.
func (m *BoardMutation) LanguageType() (r string, exists bool) {
	v := m.language_type
	if v == nil {
		return
	}
	return *v, true
}

// OldLanguageType returns the old "language_type" field's value of the Board entity.
// If the Board object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BoardMutation) OldLanguageType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLanguageType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLanguageType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLanguageType: %w", err)
	}
	return oldValue.LanguageType, nil
}

// ResetLanguageType resets all changes to the "language_type" field.
func (m *BoardMutation) ResetLanguageType() {
	m.language_type = nil
}

// SetAttachments sets the "attachments" field.
func (m *BoardMutation) SetAttachments(s string) {
	m.attachments = &s
}

// Attachments returns the value of the "attachments" field in the mutation.
func (m *BoardMutation) Attachments() (r string, exists bool) {
	v := m.attachments
	if v == nil {
		return
	}
	return *v, true
}

// OldAttachments returns the old "attachments" field's value of the Board entity.
// If the Board object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BoardMutation) OldAttachments(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAttachments is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAttachments requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAttachments: %w", err)
	}
	return oldValue.Attachments, nil
}

// ClearAttachments clears the value of the "attachments" field.
func (m *BoardMutation) ClearAttachments() {
	m.attachments = nil
	m.clearedFields[board.FieldAttachments] = struct{}{}
}

// AttachmentsCleared returns if the "attachments" field was cleared in this mutation.
func (m *BoardMutation) AttachmentsCleared() bool {
	_, ok := m.clearedFields[board.FieldAttachments]
	return ok
}

// ResetAttachments resets all changes to the "attachments" field.
func (m *BoardMutation) ResetAttachments() {
	m.attachments = nil
	delete(m.clearedFields, board.FieldAttachments)
}

// SetCreatedAt sets the "created_at" field.
func (m *BoardMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *BoardMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Board entity.
// If the Board object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BoardMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *BoardMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *BoardMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *BoardMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Board entity.
// If the Board object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BoardMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *BoardMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// ClearUser clears the "user" edge to the User entity.
func (m *BoardMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *BoardMutation) UserCleared() bool {
	return m.UserIDCleared() || m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *BoardMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *BoardMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// ClearTopic clears the "topic" edge to the Topic entity.
func (m *BoardMutation) ClearTopic() {
	m.clearedtopic = true
}

// TopicCleared reports if the "topic" edge to the Topic entity was cleared.
func (m *BoardMutation) TopicCleared() bool {
	return m.TopicIDCleared() || m.clearedtopic
}

// TopicIDs returns the "topic" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TopicID instead. It exists only for internal usage by the builders.
func (m *BoardMutation) TopicIDs() (ids []int) {
	if id := m.topic; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTopic resets all changes to the "topic" edge.
func (m *BoardMutation) ResetTopic() {
	m.topic = nil
	m.clearedtopic = false
}

// AddCommentIDs adds the "comments" edge to the Comment entity by ids.
func (m *BoardMutation) AddCommentIDs(ids ...int) {
	if m.comments == nil {
		m.comments = make(map[int]struct{})
	}
	for i := range ids {
		m.comments[ids[i]] = struct{}{}
	}
}

// ClearComments clears the "comments" edge to the Comment entity.
func (m *BoardMutation) ClearComments() {
	m.clearedcomments = true
}

// CommentsCleared reports if the "comments" edge to the Comment entity was cleared.
func (m *BoardMutation) CommentsCleared() bool {
	return m.clearedcomments
}

// RemoveCommentIDs removes the "comments" edge to the Comment entity by IDs.
func (m *BoardMutation) RemoveCommentIDs(ids ...int) {
	if m.removedcomments == nil {
		m.removedcomments = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.comments, ids[i])
		m.removedcomments[ids[i]] = struct{}{}
	}
}

// RemovedComments returns the removed IDs of the "comments" edge to the Comment entity.
func (m *BoardMutation) RemovedCommentsIDs() (ids []int) {
	for id := range m.removedcomments {
		ids = append(ids, id)
	}
	return
}

// CommentsIDs returns the "comments" edge IDs in the mutation.
func (m *BoardMutation) CommentsIDs() (ids []int) {
	for id := range m.comments {
		ids = append(ids, id)
	}
	return
}

// ResetComments resets all changes to the "comments" edge.
func (m *BoardMutation) ResetComments() {
	m.comments = nil
	m.clearedcomments = false
	m.removedcomments = nil
}

// AddBookMarkIDs adds the "book_marks" edge to the BookMark entity by ids.
func (m *BoardMutation) AddBookMarkIDs(ids ...int) {
	if m.book_marks == nil {
		m.book_marks = make(map[int]struct{})
	}
	for i := range ids {
		m.book_marks[ids[i]] = struct{}{}
	}
}

// ClearBookMarks clears the "book_marks" edge to the BookMark entity.
func (m *BoardMutation) ClearBookMarks() {
	m.clearedbook_marks = true
}

// BookMarksCleared reports if the "book_marks" edge to the BookMark entity was cleared.
func (m *BoardMutation) BookMarksCleared() bool {
	return m.clearedbook_marks
}

// RemoveBookMarkIDs removes the "book_marks" edge to the BookMark entity by IDs.
func (m *BoardMutation) RemoveBookMarkIDs(ids ...int) {
	if m.removedbook_marks == nil {
		m.removedbook_marks = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.book_marks, ids[i])
		m.removedbook_marks[ids[i]] = struct{}{}
	}
}

// RemovedBookMarks returns the removed IDs of the "book_marks" edge to the BookMark entity.
func (m *BoardMutation) RemovedBookMarksIDs() (ids []int) {
	for id := range m.removedbook_marks {
		ids = append(ids, id)
	}
	return
}

// BookMarksIDs returns the "book_marks" edge IDs in the mutation.
func (m *BoardMutation) BookMarksIDs() (ids []int) {
	for id := range m.book_marks {
		ids = append(ids, id)
	}
	return
}

// ResetBookMarks resets all changes to the "book_marks" edge.
func (m *BoardMutation) ResetBookMarks() {
	m.book_marks = nil
	m.clearedbook_marks = false
	m.removedbook_marks = nil
}

// AddBoardLikeIDs adds the "board_like" edge to the BoardLike entity by ids.
func (m *BoardMutation) AddBoardLikeIDs(ids ...int) {
	if m.board_like == nil {
		m.board_like = make(map[int]struct{})
	}
	for i := range ids {
		m.board_like[ids[i]] = struct{}{}
	}
}

// ClearBoardLike clears the "board_like" edge to the BoardLike entity.
func (m *BoardMutation) ClearBoardLike() {
	m.clearedboard_like = true
}

// BoardLikeCleared reports if the "board_like" edge to the BoardLike entity was cleared.
func (m *BoardMutation) BoardLikeCleared() bool {
	return m.clearedboard_like
}

// RemoveBoardLikeIDs removes the "board_like" edge to the BoardLike entity by IDs.
func (m *BoardMutation) RemoveBoardLikeIDs(ids ...int) {
	if m.removedboard_like == nil {
		m.removedboard_like = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.board_like, ids[i])
		m.removedboard_like[ids[i]] = struct{}{}
	}
}

// RemovedBoardLike returns the removed IDs of the "board_like" edge to the BoardLike entity.
func (m *BoardMutation) RemovedBoardLikeIDs() (ids []int) {
	for id := range m.removedboard_like {
		ids = append(ids, id)
	}
	return
}

// BoardLikeIDs returns the "board_like" edge IDs in the mutation.
func (m *BoardMutation) BoardLikeIDs() (ids []int) {
	for id := range m.board_like {
		ids = append(ids, id)
	}
	return
}

// ResetBoardLike resets all changes to the "board_like" edge.
func (m *BoardMutation) ResetBoardLike() {
	m.board_like = nil
	m.clearedboard_like = false
	m.removedboard_like = nil
}

// AddBoardHashtagIDs adds the "board_hashtag" edge to the BoardHashtag entity by ids.
func (m *BoardMutation) AddBoardHashtagIDs(ids ...int) {
	if m.board_hashtag == nil {
		m.board_hashtag = make(map[int]struct{})
	}
	for i := range ids {
		m.board_hashtag[ids[i]] = struct{}{}
	}
}

// ClearBoardHashtag clears the "board_hashtag" edge to the BoardHashtag entity.
func (m *BoardMutation) ClearBoardHashtag() {
	m.clearedboard_hashtag = true
}

// BoardHashtagCleared reports if the "board_hashtag" edge to the BoardHashtag entity was cleared.
func (m *BoardMutation) BoardHashtagCleared() bool {
	return m.clearedboard_hashtag
}

// RemoveBoardHashtagIDs removes the "board_hashtag" edge to the BoardHashtag entity by IDs.
func (m *BoardMutation) RemoveBoardHashtagIDs(ids ...int) {
	if m.removedboard_hashtag == nil {
		m.removedboard_hashtag = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.board_hashtag, ids[i])
		m.removedboard_hashtag[ids[i]] = struct{}{}
	}
}

// RemovedBoardHashtag returns the removed IDs of the "board_hashtag" edge to the BoardHashtag entity.
func (m *BoardMutation) RemovedBoardHashtagIDs() (ids []int) {
	for id := range m.removedboard_hashtag {
		ids = append(ids, id)
	}
	return
}

// BoardHashtagIDs returns the "board_hashtag" edge IDs in the mutation.
func (m *BoardMutation) BoardHashtagIDs() (ids []int) {
	for id := range m.board_hashtag {
		ids = append(ids, id)
	}
	return
}

// ResetBoardHashtag resets all changes to the "board_hashtag" edge.
func (m *BoardMutation) ResetBoardHashtag() {
	m.board_hashtag = nil
	m.clearedboard_hashtag = false
	m.removedboard_hashtag = nil
}

// AddBoardReportIDs adds the "board_report" edge to the BoardReport entity by ids.
func (m *BoardMutation) AddBoardReportIDs(ids ...int) {
	if m.board_report == nil {
		m.board_report = make(map[int]struct{})
	}
	for i := range ids {
		m.board_report[ids[i]] = struct{}{}
	}
}

// ClearBoardReport clears the "board_report" edge to the BoardReport entity.
func (m *BoardMutation) ClearBoardReport() {
	m.clearedboard_report = true
}

// BoardReportCleared reports if the "board_report" edge to the BoardReport entity was cleared.
func (m *BoardMutation) BoardReportCleared() bool {
	return m.clearedboard_report
}

// RemoveBoardReportIDs removes the "board_report" edge to the BoardReport entity by IDs.
func (m *BoardMutation) RemoveBoardReportIDs(ids ...int) {
	if m.removedboard_report == nil {
		m.removedboard_report = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.board_report, ids[i])
		m.removedboard_report[ids[i]] = struct{}{}
	}
}

// RemovedBoardReport returns the removed IDs of the "board_report" edge to the BoardReport entity.
func (m *BoardMutation) RemovedBoardReportIDs() (ids []int) {
	for id := range m.removedboard_report {
		ids = append(ids, id)
	}
	return
}

// BoardReportIDs returns the "board_report" edge IDs in the mutation.
func (m *BoardMutation) BoardReportIDs() (ids []int) {
	for id := range m.board_report {
		ids = append(ids, id)
	}
	return
}

// ResetBoardReport resets all changes to the "board_report" edge.
func (m *BoardMutation) ResetBoardReport() {
	m.board_report = nil
	m.clearedboard_report = false
	m.removedboard_report = nil
}

// Where appends a list predicates to the BoardMutation builder.
func (m *BoardMutation) Where(ps ...predicate.Board) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the BoardMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *BoardMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Board, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *BoardMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *BoardMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Board).
func (m *BoardMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BoardMutation) Fields() []string {
	fields := make([]string, 0, 14)
	if m.title != nil {
		fields = append(fields, board.FieldTitle)
	}
	if m.text != nil {
		fields = append(fields, board.FieldText)
	}
	if m.user != nil {
		fields = append(fields, board.FieldUserID)
	}
	if m.topic != nil {
		fields = append(fields, board.FieldTopicID)
	}
	if m.like_count != nil {
		fields = append(fields, board.FieldLikeCount)
	}
	if m.comment_count != nil {
		fields = append(fields, board.FieldCommentCount)
	}
	if m.view_count != nil {
		fields = append(fields, board.FieldViewCount)
	}
	if m.report_count != nil {
		fields = append(fields, board.FieldReportCount)
	}
	if m.status != nil {
		fields = append(fields, board.FieldStatus)
	}
	if m.private != nil {
		fields = append(fields, board.FieldPrivate)
	}
	if m.language_type != nil {
		fields = append(fields, board.FieldLanguageType)
	}
	if m.attachments != nil {
		fields = append(fields, board.FieldAttachments)
	}
	if m.created_at != nil {
		fields = append(fields, board.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, board.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BoardMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case board.FieldTitle:
		return m.Title()
	case board.FieldText:
		return m.Text()
	case board.FieldUserID:
		return m.UserID()
	case board.FieldTopicID:
		return m.TopicID()
	case board.FieldLikeCount:
		return m.LikeCount()
	case board.FieldCommentCount:
		return m.CommentCount()
	case board.FieldViewCount:
		return m.ViewCount()
	case board.FieldReportCount:
		return m.ReportCount()
	case board.FieldStatus:
		return m.Status()
	case board.FieldPrivate:
		return m.Private()
	case board.FieldLanguageType:
		return m.LanguageType()
	case board.FieldAttachments:
		return m.Attachments()
	case board.FieldCreatedAt:
		return m.CreatedAt()
	case board.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BoardMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case board.FieldTitle:
		return m.OldTitle(ctx)
	case board.FieldText:
		return m.OldText(ctx)
	case board.FieldUserID:
		return m.OldUserID(ctx)
	case board.FieldTopicID:
		return m.OldTopicID(ctx)
	case board.FieldLikeCount:
		return m.OldLikeCount(ctx)
	case board.FieldCommentCount:
		return m.OldCommentCount(ctx)
	case board.FieldViewCount:
		return m.OldViewCount(ctx)
	case board.FieldReportCount:
		return m.OldReportCount(ctx)
	case board.FieldStatus:
		return m.OldStatus(ctx)
	case board.FieldPrivate:
		return m.OldPrivate(ctx)
	case board.FieldLanguageType:
		return m.OldLanguageType(ctx)
	case board.FieldAttachments:
		return m.OldAttachments(ctx)
	case board.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case board.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Board field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BoardMutation) SetField(name string, value ent.Value) error {
	switch name {
	case board.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case board.FieldText:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetText(v)
		return nil
	case board.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case board.FieldTopicID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTopicID(v)
		return nil
	case board.FieldLikeCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLikeCount(v)
		return nil
	case board.FieldCommentCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCommentCount(v)
		return nil
	case board.FieldViewCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetViewCount(v)
		return nil
	case board.FieldReportCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReportCount(v)
		return nil
	case board.FieldStatus:
		v, ok := value.(board.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case board.FieldPrivate:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrivate(v)
		return nil
	case board.FieldLanguageType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLanguageType(v)
		return nil
	case board.FieldAttachments:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAttachments(v)
		return nil
	case board.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case board.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Board field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BoardMutation) AddedFields() []string {
	var fields []string
	if m.addlike_count != nil {
		fields = append(fields, board.FieldLikeCount)
	}
	if m.addcomment_count != nil {
		fields = append(fields, board.FieldCommentCount)
	}
	if m.addview_count != nil {
		fields = append(fields, board.FieldViewCount)
	}
	if m.addreport_count != nil {
		fields = append(fields, board.FieldReportCount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BoardMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case board.FieldLikeCount:
		return m.AddedLikeCount()
	case board.FieldCommentCount:
		return m.AddedCommentCount()
	case board.FieldViewCount:
		return m.AddedViewCount()
	case board.FieldReportCount:
		return m.AddedReportCount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BoardMutation) AddField(name string, value ent.Value) error {
	switch name {
	case board.FieldLikeCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLikeCount(v)
		return nil
	case board.FieldCommentCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCommentCount(v)
		return nil
	case board.FieldViewCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddViewCount(v)
		return nil
	case board.FieldReportCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddReportCount(v)
		return nil
	}
	return fmt.Errorf("unknown Board numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BoardMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(board.FieldUserID) {
		fields = append(fields, board.FieldUserID)
	}
	if m.FieldCleared(board.FieldTopicID) {
		fields = append(fields, board.FieldTopicID)
	}
	if m.FieldCleared(board.FieldAttachments) {
		fields = append(fields, board.FieldAttachments)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BoardMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BoardMutation) ClearField(name string) error {
	switch name {
	case board.FieldUserID:
		m.ClearUserID()
		return nil
	case board.FieldTopicID:
		m.ClearTopicID()
		return nil
	case board.FieldAttachments:
		m.ClearAttachments()
		return nil
	}
	return fmt.Errorf("unknown Board nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BoardMutation) ResetField(name string) error {
	switch name {
	case board.FieldTitle:
		m.ResetTitle()
		return nil
	case board.FieldText:
		m.ResetText()
		return nil
	case board.FieldUserID:
		m.ResetUserID()
		return nil
	case board.FieldTopicID:
		m.ResetTopicID()
		return nil
	case board.FieldLikeCount:
		m.ResetLikeCount()
		return nil
	case board.FieldCommentCount:
		m.ResetCommentCount()
		return nil
	case board.FieldViewCount:
		m.ResetViewCount()
		return nil
	case board.FieldReportCount:
		m.ResetReportCount()
		return nil
	case board.FieldStatus:
		m.ResetStatus()
		return nil
	case board.FieldPrivate:
		m.ResetPrivate()
		return nil
	case board.FieldLanguageType:
		m.ResetLanguageType()
		return nil
	case board.FieldAttachments:
		m.ResetAttachments()
		return nil
	case board.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case board.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Board field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BoardMutation) AddedEdges() []string {
	edges := make([]string, 0, 7)
	if m.user != nil {
		edges = append(edges, board.EdgeUser)
	}
	if m.topic != nil {
		edges = append(edges, board.EdgeTopic)
	}
	if m.comments != nil {
		edges = append(edges, board.EdgeComments)
	}
	if m.book_marks != nil {
		edges = append(edges, board.EdgeBookMarks)
	}
	if m.board_like != nil {
		edges = append(edges, board.EdgeBoardLike)
	}
	if m.board_hashtag != nil {
		edges = append(edges, board.EdgeBoardHashtag)
	}
	if m.board_report != nil {
		edges = append(edges, board.EdgeBoardReport)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BoardMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case board.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case board.EdgeTopic:
		if id := m.topic; id != nil {
			return []ent.Value{*id}
		}
	case board.EdgeComments:
		ids := make([]ent.Value, 0, len(m.comments))
		for id := range m.comments {
			ids = append(ids, id)
		}
		return ids
	case board.EdgeBookMarks:
		ids := make([]ent.Value, 0, len(m.book_marks))
		for id := range m.book_marks {
			ids = append(ids, id)
		}
		return ids
	case board.EdgeBoardLike:
		ids := make([]ent.Value, 0, len(m.board_like))
		for id := range m.board_like {
			ids = append(ids, id)
		}
		return ids
	case board.EdgeBoardHashtag:
		ids := make([]ent.Value, 0, len(m.board_hashtag))
		for id := range m.board_hashtag {
			ids = append(ids, id)
		}
		return ids
	case board.EdgeBoardReport:
		ids := make([]ent.Value, 0, len(m.board_report))
		for id := range m.board_report {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BoardMutation) RemovedEdges() []string {
	edges := make([]string, 0, 7)
	if m.removedcomments != nil {
		edges = append(edges, board.EdgeComments)
	}
	if m.removedbook_marks != nil {
		edges = append(edges, board.EdgeBookMarks)
	}
	if m.removedboard_like != nil {
		edges = append(edges, board.EdgeBoardLike)
	}
	if m.removedboard_hashtag != nil {
		edges = append(edges, board.EdgeBoardHashtag)
	}
	if m.removedboard_report != nil {
		edges = append(edges, board.EdgeBoardReport)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BoardMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case board.EdgeComments:
		ids := make([]ent.Value, 0, len(m.removedcomments))
		for id := range m.removedcomments {
			ids = append(ids, id)
		}
		return ids
	case board.EdgeBookMarks:
		ids := make([]ent.Value, 0, len(m.removedbook_marks))
		for id := range m.removedbook_marks {
			ids = append(ids, id)
		}
		return ids
	case board.EdgeBoardLike:
		ids := make([]ent.Value, 0, len(m.removedboard_like))
		for id := range m.removedboard_like {
			ids = append(ids, id)
		}
		return ids
	case board.EdgeBoardHashtag:
		ids := make([]ent.Value, 0, len(m.removedboard_hashtag))
		for id := range m.removedboard_hashtag {
			ids = append(ids, id)
		}
		return ids
	case board.EdgeBoardReport:
		ids := make([]ent.Value, 0, len(m.removedboard_report))
		for id := range m.removedboard_report {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BoardMutation) ClearedEdges() []string {
	edges := make([]string, 0, 7)
	if m.cleareduser {
		edges = append(edges, board.EdgeUser)
	}
	if m.clearedtopic {
		edges = append(edges, board.EdgeTopic)
	}
	if m.clearedcomments {
		edges = append(edges, board.EdgeComments)
	}
	if m.clearedbook_marks {
		edges = append(edges, board.EdgeBookMarks)
	}
	if m.clearedboard_like {
		edges = append(edges, board.EdgeBoardLike)
	}
	if m.clearedboard_hashtag {
		edges = append(edges, board.EdgeBoardHashtag)
	}
	if m.clearedboard_report {
		edges = append(edges, board.EdgeBoardReport)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BoardMutation) EdgeCleared(name string) bool {
	switch name {
	case board.EdgeUser:
		return m.cleareduser
	case board.EdgeTopic:
		return m.clearedtopic
	case board.EdgeComments:
		return m.clearedcomments
	case board.EdgeBookMarks:
		return m.clearedbook_marks
	case board.EdgeBoardLike:
		return m.clearedboard_like
	case board.EdgeBoardHashtag:
		return m.clearedboard_hashtag
	case board.EdgeBoardReport:
		return m.clearedboard_report
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BoardMutation) ClearEdge(name string) error {
	switch name {
	case board.EdgeUser:
		m.ClearUser()
		return nil
	case board.EdgeTopic:
		m.ClearTopic()
		return nil
	}
	return fmt.Errorf("unknown Board unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BoardMutation) ResetEdge(name string) error {
	switch name {
	case board.EdgeUser:
		m.ResetUser()
		return nil
	case board.EdgeTopic:
		m.ResetTopic()
		return nil
	case board.EdgeComments:
		m.ResetComments()
		return nil
	case board.EdgeBookMarks:
		m.ResetBookMarks()
		return nil
	case board.EdgeBoardLike:
		m.ResetBoardLike()
		return nil
	case board.EdgeBoardHashtag:
		m.ResetBoardHashtag()
		return nil
	case board.EdgeBoardReport:
		m.ResetBoardReport()
		return nil
	}
	return fmt.Errorf("unknown Board edge %s", name)
}

// BoardHashtagMutation represents an operation that mutates the BoardHashtag nodes in the graph.
type BoardHashtagMutation struct {
	config
	op             Op
	typ            string
	id             *int
	clearedFields  map[string]struct{}
	board          *int
	clearedboard   bool
	hashtag        *int
	clearedhashtag bool
	done           bool
	oldValue       func(context.Context) (*BoardHashtag, error)
	predicates     []predicate.BoardHashtag
}

var _ ent.Mutation = (*BoardHashtagMutation)(nil)

// boardhashtagOption allows management of the mutation configuration using functional options.
type boardhashtagOption func(*BoardHashtagMutation)

// newBoardHashtagMutation creates new mutation for the BoardHashtag entity.
func newBoardHashtagMutation(c config, op Op, opts ...boardhashtagOption) *BoardHashtagMutation {
	m := &BoardHashtagMutation{
		config:        c,
		op:            op,
		typ:           TypeBoardHashtag,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBoardHashtagID sets the ID field of the mutation.
func withBoardHashtagID(id int) boardhashtagOption {
	return func(m *BoardHashtagMutation) {
		var (
			err   error
			once  sync.Once
			value *BoardHashtag
		)
		m.oldValue = func(ctx context.Context) (*BoardHashtag, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().BoardHashtag.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBoardHashtag sets the old BoardHashtag of the mutation.
func withBoardHashtag(node *BoardHashtag) boardhashtagOption {
	return func(m *BoardHashtagMutation) {
		m.oldValue = func(context.Context) (*BoardHashtag, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BoardHashtagMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BoardHashtagMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BoardHashtagMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BoardHashtagMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().BoardHashtag.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetBoardID sets the "board_id" field.
func (m *BoardHashtagMutation) SetBoardID(i int) {
	m.board = &i
}

// BoardID returns the value of the "board_id" field in the mutation.
func (m *BoardHashtagMutation) BoardID() (r int, exists bool) {
	v := m.board
	if v == nil {
		return
	}
	return *v, true
}

// OldBoardID returns the old "board_id" field's value of the BoardHashtag entity.
// If the BoardHashtag object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BoardHashtagMutation) OldBoardID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBoardID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBoardID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBoardID: %w", err)
	}
	return oldValue.BoardID, nil
}

// ClearBoardID clears the value of the "board_id" field.
func (m *BoardHashtagMutation) ClearBoardID() {
	m.board = nil
	m.clearedFields[boardhashtag.FieldBoardID] = struct{}{}
}

// BoardIDCleared returns if the "board_id" field was cleared in this mutation.
func (m *BoardHashtagMutation) BoardIDCleared() bool {
	_, ok := m.clearedFields[boardhashtag.FieldBoardID]
	return ok
}

// ResetBoardID resets all changes to the "board_id" field.
func (m *BoardHashtagMutation) ResetBoardID() {
	m.board = nil
	delete(m.clearedFields, boardhashtag.FieldBoardID)
}

// SetHashtagID sets the "hashtag_id" field.
func (m *BoardHashtagMutation) SetHashtagID(i int) {
	m.hashtag = &i
}

// HashtagID returns the value of the "hashtag_id" field in the mutation.
func (m *BoardHashtagMutation) HashtagID() (r int, exists bool) {
	v := m.hashtag
	if v == nil {
		return
	}
	return *v, true
}

// OldHashtagID returns the old "hashtag_id" field's value of the BoardHashtag entity.
// If the BoardHashtag object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BoardHashtagMutation) OldHashtagID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHashtagID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHashtagID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHashtagID: %w", err)
	}
	return oldValue.HashtagID, nil
}

// ClearHashtagID clears the value of the "hashtag_id" field.
func (m *BoardHashtagMutation) ClearHashtagID() {
	m.hashtag = nil
	m.clearedFields[boardhashtag.FieldHashtagID] = struct{}{}
}

// HashtagIDCleared returns if the "hashtag_id" field was cleared in this mutation.
func (m *BoardHashtagMutation) HashtagIDCleared() bool {
	_, ok := m.clearedFields[boardhashtag.FieldHashtagID]
	return ok
}

// ResetHashtagID resets all changes to the "hashtag_id" field.
func (m *BoardHashtagMutation) ResetHashtagID() {
	m.hashtag = nil
	delete(m.clearedFields, boardhashtag.FieldHashtagID)
}

// ClearBoard clears the "board" edge to the Board entity.
func (m *BoardHashtagMutation) ClearBoard() {
	m.clearedboard = true
}

// BoardCleared reports if the "board" edge to the Board entity was cleared.
func (m *BoardHashtagMutation) BoardCleared() bool {
	return m.BoardIDCleared() || m.clearedboard
}

// BoardIDs returns the "board" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// BoardID instead. It exists only for internal usage by the builders.
func (m *BoardHashtagMutation) BoardIDs() (ids []int) {
	if id := m.board; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetBoard resets all changes to the "board" edge.
func (m *BoardHashtagMutation) ResetBoard() {
	m.board = nil
	m.clearedboard = false
}

// ClearHashtag clears the "hashtag" edge to the Hashtag entity.
func (m *BoardHashtagMutation) ClearHashtag() {
	m.clearedhashtag = true
}

// HashtagCleared reports if the "hashtag" edge to the Hashtag entity was cleared.
func (m *BoardHashtagMutation) HashtagCleared() bool {
	return m.HashtagIDCleared() || m.clearedhashtag
}

// HashtagIDs returns the "hashtag" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// HashtagID instead. It exists only for internal usage by the builders.
func (m *BoardHashtagMutation) HashtagIDs() (ids []int) {
	if id := m.hashtag; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetHashtag resets all changes to the "hashtag" edge.
func (m *BoardHashtagMutation) ResetHashtag() {
	m.hashtag = nil
	m.clearedhashtag = false
}

// Where appends a list predicates to the BoardHashtagMutation builder.
func (m *BoardHashtagMutation) Where(ps ...predicate.BoardHashtag) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the BoardHashtagMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *BoardHashtagMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.BoardHashtag, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *BoardHashtagMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *BoardHashtagMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (BoardHashtag).
func (m *BoardHashtagMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BoardHashtagMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.board != nil {
		fields = append(fields, boardhashtag.FieldBoardID)
	}
	if m.hashtag != nil {
		fields = append(fields, boardhashtag.FieldHashtagID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BoardHashtagMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case boardhashtag.FieldBoardID:
		return m.BoardID()
	case boardhashtag.FieldHashtagID:
		return m.HashtagID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BoardHashtagMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case boardhashtag.FieldBoardID:
		return m.OldBoardID(ctx)
	case boardhashtag.FieldHashtagID:
		return m.OldHashtagID(ctx)
	}
	return nil, fmt.Errorf("unknown BoardHashtag field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BoardHashtagMutation) SetField(name string, value ent.Value) error {
	switch name {
	case boardhashtag.FieldBoardID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBoardID(v)
		return nil
	case boardhashtag.FieldHashtagID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHashtagID(v)
		return nil
	}
	return fmt.Errorf("unknown BoardHashtag field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BoardHashtagMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BoardHashtagMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BoardHashtagMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown BoardHashtag numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BoardHashtagMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(boardhashtag.FieldBoardID) {
		fields = append(fields, boardhashtag.FieldBoardID)
	}
	if m.FieldCleared(boardhashtag.FieldHashtagID) {
		fields = append(fields, boardhashtag.FieldHashtagID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BoardHashtagMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BoardHashtagMutation) ClearField(name string) error {
	switch name {
	case boardhashtag.FieldBoardID:
		m.ClearBoardID()
		return nil
	case boardhashtag.FieldHashtagID:
		m.ClearHashtagID()
		return nil
	}
	return fmt.Errorf("unknown BoardHashtag nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BoardHashtagMutation) ResetField(name string) error {
	switch name {
	case boardhashtag.FieldBoardID:
		m.ResetBoardID()
		return nil
	case boardhashtag.FieldHashtagID:
		m.ResetHashtagID()
		return nil
	}
	return fmt.Errorf("unknown BoardHashtag field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BoardHashtagMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.board != nil {
		edges = append(edges, boardhashtag.EdgeBoard)
	}
	if m.hashtag != nil {
		edges = append(edges, boardhashtag.EdgeHashtag)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BoardHashtagMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case boardhashtag.EdgeBoard:
		if id := m.board; id != nil {
			return []ent.Value{*id}
		}
	case boardhashtag.EdgeHashtag:
		if id := m.hashtag; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BoardHashtagMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BoardHashtagMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BoardHashtagMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedboard {
		edges = append(edges, boardhashtag.EdgeBoard)
	}
	if m.clearedhashtag {
		edges = append(edges, boardhashtag.EdgeHashtag)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BoardHashtagMutation) EdgeCleared(name string) bool {
	switch name {
	case boardhashtag.EdgeBoard:
		return m.clearedboard
	case boardhashtag.EdgeHashtag:
		return m.clearedhashtag
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BoardHashtagMutation) ClearEdge(name string) error {
	switch name {
	case boardhashtag.EdgeBoard:
		m.ClearBoard()
		return nil
	case boardhashtag.EdgeHashtag:
		m.ClearHashtag()
		return nil
	}
	return fmt.Errorf("unknown BoardHashtag unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BoardHashtagMutation) ResetEdge(name string) error {
	switch name {
	case boardhashtag.EdgeBoard:
		m.ResetBoard()
		return nil
	case boardhashtag.EdgeHashtag:
		m.ResetHashtag()
		return nil
	}
	return fmt.Errorf("unknown BoardHashtag edge %s", name)
}

// BoardLikeMutation represents an operation that mutates the BoardLike nodes in the graph.
type BoardLikeMutation struct {
	config
	op            Op
	typ           string
	id            *int
	created_at    *time.Time
	clearedFields map[string]struct{}
	user          *int
	cleareduser   bool
	board         *int
	clearedboard  bool
	done          bool
	oldValue      func(context.Context) (*BoardLike, error)
	predicates    []predicate.BoardLike
}

var _ ent.Mutation = (*BoardLikeMutation)(nil)

// boardlikeOption allows management of the mutation configuration using functional options.
type boardlikeOption func(*BoardLikeMutation)

// newBoardLikeMutation creates new mutation for the BoardLike entity.
func newBoardLikeMutation(c config, op Op, opts ...boardlikeOption) *BoardLikeMutation {
	m := &BoardLikeMutation{
		config:        c,
		op:            op,
		typ:           TypeBoardLike,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBoardLikeID sets the ID field of the mutation.
func withBoardLikeID(id int) boardlikeOption {
	return func(m *BoardLikeMutation) {
		var (
			err   error
			once  sync.Once
			value *BoardLike
		)
		m.oldValue = func(ctx context.Context) (*BoardLike, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().BoardLike.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBoardLike sets the old BoardLike of the mutation.
func withBoardLike(node *BoardLike) boardlikeOption {
	return func(m *BoardLikeMutation) {
		m.oldValue = func(context.Context) (*BoardLike, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BoardLikeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BoardLikeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BoardLikeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BoardLikeMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().BoardLike.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *BoardLikeMutation) SetUserID(i int) {
	m.user = &i
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *BoardLikeMutation) UserID() (r int, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the BoardLike entity.
// If the BoardLike object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BoardLikeMutation) OldUserID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ClearUserID clears the value of the "user_id" field.
func (m *BoardLikeMutation) ClearUserID() {
	m.user = nil
	m.clearedFields[boardlike.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *BoardLikeMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[boardlike.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *BoardLikeMutation) ResetUserID() {
	m.user = nil
	delete(m.clearedFields, boardlike.FieldUserID)
}

// SetBoardID sets the "board_id" field.
func (m *BoardLikeMutation) SetBoardID(i int) {
	m.board = &i
}

// BoardID returns the value of the "board_id" field in the mutation.
func (m *BoardLikeMutation) BoardID() (r int, exists bool) {
	v := m.board
	if v == nil {
		return
	}
	return *v, true
}

// OldBoardID returns the old "board_id" field's value of the BoardLike entity.
// If the BoardLike object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BoardLikeMutation) OldBoardID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBoardID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBoardID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBoardID: %w", err)
	}
	return oldValue.BoardID, nil
}

// ClearBoardID clears the value of the "board_id" field.
func (m *BoardLikeMutation) ClearBoardID() {
	m.board = nil
	m.clearedFields[boardlike.FieldBoardID] = struct{}{}
}

// BoardIDCleared returns if the "board_id" field was cleared in this mutation.
func (m *BoardLikeMutation) BoardIDCleared() bool {
	_, ok := m.clearedFields[boardlike.FieldBoardID]
	return ok
}

// ResetBoardID resets all changes to the "board_id" field.
func (m *BoardLikeMutation) ResetBoardID() {
	m.board = nil
	delete(m.clearedFields, boardlike.FieldBoardID)
}

// SetCreatedAt sets the "created_at" field.
func (m *BoardLikeMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *BoardLikeMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the BoardLike entity.
// If the BoardLike object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BoardLikeMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *BoardLikeMutation) ResetCreatedAt() {
	m.created_at = nil
}

// ClearUser clears the "user" edge to the User entity.
func (m *BoardLikeMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *BoardLikeMutation) UserCleared() bool {
	return m.UserIDCleared() || m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *BoardLikeMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *BoardLikeMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// ClearBoard clears the "board" edge to the Board entity.
func (m *BoardLikeMutation) ClearBoard() {
	m.clearedboard = true
}

// BoardCleared reports if the "board" edge to the Board entity was cleared.
func (m *BoardLikeMutation) BoardCleared() bool {
	return m.BoardIDCleared() || m.clearedboard
}

// BoardIDs returns the "board" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// BoardID instead. It exists only for internal usage by the builders.
func (m *BoardLikeMutation) BoardIDs() (ids []int) {
	if id := m.board; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetBoard resets all changes to the "board" edge.
func (m *BoardLikeMutation) ResetBoard() {
	m.board = nil
	m.clearedboard = false
}

// Where appends a list predicates to the BoardLikeMutation builder.
func (m *BoardLikeMutation) Where(ps ...predicate.BoardLike) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the BoardLikeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *BoardLikeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.BoardLike, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *BoardLikeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *BoardLikeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (BoardLike).
func (m *BoardLikeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BoardLikeMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.user != nil {
		fields = append(fields, boardlike.FieldUserID)
	}
	if m.board != nil {
		fields = append(fields, boardlike.FieldBoardID)
	}
	if m.created_at != nil {
		fields = append(fields, boardlike.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BoardLikeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case boardlike.FieldUserID:
		return m.UserID()
	case boardlike.FieldBoardID:
		return m.BoardID()
	case boardlike.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BoardLikeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case boardlike.FieldUserID:
		return m.OldUserID(ctx)
	case boardlike.FieldBoardID:
		return m.OldBoardID(ctx)
	case boardlike.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown BoardLike field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BoardLikeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case boardlike.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case boardlike.FieldBoardID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBoardID(v)
		return nil
	case boardlike.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown BoardLike field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BoardLikeMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BoardLikeMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BoardLikeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown BoardLike numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BoardLikeMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(boardlike.FieldUserID) {
		fields = append(fields, boardlike.FieldUserID)
	}
	if m.FieldCleared(boardlike.FieldBoardID) {
		fields = append(fields, boardlike.FieldBoardID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BoardLikeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BoardLikeMutation) ClearField(name string) error {
	switch name {
	case boardlike.FieldUserID:
		m.ClearUserID()
		return nil
	case boardlike.FieldBoardID:
		m.ClearBoardID()
		return nil
	}
	return fmt.Errorf("unknown BoardLike nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BoardLikeMutation) ResetField(name string) error {
	switch name {
	case boardlike.FieldUserID:
		m.ResetUserID()
		return nil
	case boardlike.FieldBoardID:
		m.ResetBoardID()
		return nil
	case boardlike.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown BoardLike field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BoardLikeMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, boardlike.EdgeUser)
	}
	if m.board != nil {
		edges = append(edges, boardlike.EdgeBoard)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BoardLikeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case boardlike.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case boardlike.EdgeBoard:
		if id := m.board; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BoardLikeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BoardLikeMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BoardLikeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, boardlike.EdgeUser)
	}
	if m.clearedboard {
		edges = append(edges, boardlike.EdgeBoard)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BoardLikeMutation) EdgeCleared(name string) bool {
	switch name {
	case boardlike.EdgeUser:
		return m.cleareduser
	case boardlike.EdgeBoard:
		return m.clearedboard
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BoardLikeMutation) ClearEdge(name string) error {
	switch name {
	case boardlike.EdgeUser:
		m.ClearUser()
		return nil
	case boardlike.EdgeBoard:
		m.ClearBoard()
		return nil
	}
	return fmt.Errorf("unknown BoardLike unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BoardLikeMutation) ResetEdge(name string) error {
	switch name {
	case boardlike.EdgeUser:
		m.ResetUser()
		return nil
	case boardlike.EdgeBoard:
		m.ResetBoard()
		return nil
	}
	return fmt.Errorf("unknown BoardLike edge %s", name)
}

// BoardReportMutation represents an operation that mutates the BoardReport nodes in the graph.
type BoardReportMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	comment            *string
	status             *boardreport.Status
	created_at         *time.Time
	updated_at         *time.Time
	clearedFields      map[string]struct{}
	user               *int
	cleareduser        bool
	board              *int
	clearedboard       bool
	report_type        *int
	clearedreport_type bool
	done               bool
	oldValue           func(context.Context) (*BoardReport, error)
	predicates         []predicate.BoardReport
}

var _ ent.Mutation = (*BoardReportMutation)(nil)

// boardreportOption allows management of the mutation configuration using functional options.
type boardreportOption func(*BoardReportMutation)

// newBoardReportMutation creates new mutation for the BoardReport entity.
func newBoardReportMutation(c config, op Op, opts ...boardreportOption) *BoardReportMutation {
	m := &BoardReportMutation{
		config:        c,
		op:            op,
		typ:           TypeBoardReport,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBoardReportID sets the ID field of the mutation.
func withBoardReportID(id int) boardreportOption {
	return func(m *BoardReportMutation) {
		var (
			err   error
			once  sync.Once
			value *BoardReport
		)
		m.oldValue = func(ctx context.Context) (*BoardReport, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().BoardReport.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBoardReport sets the old BoardReport of the mutation.
func withBoardReport(node *BoardReport) boardreportOption {
	return func(m *BoardReportMutation) {
		m.oldValue = func(context.Context) (*BoardReport, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BoardReportMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BoardReportMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BoardReportMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BoardReportMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().BoardReport.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetBoardID sets the "board_id" field.
func (m *BoardReportMutation) SetBoardID(i int) {
	m.board = &i
}

// BoardID returns the value of the "board_id" field in the mutation.
func (m *BoardReportMutation) BoardID() (r int, exists bool) {
	v := m.board
	if v == nil {
		return
	}
	return *v, true
}

// OldBoardID returns the old "board_id" field's value of the BoardReport entity.
// If the BoardReport object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BoardReportMutation) OldBoardID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBoardID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBoardID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBoardID: %w", err)
	}
	return oldValue.BoardID, nil
}

// ClearBoardID clears the value of the "board_id" field.
func (m *BoardReportMutation) ClearBoardID() {
	m.board = nil
	m.clearedFields[boardreport.FieldBoardID] = struct{}{}
}

// BoardIDCleared returns if the "board_id" field was cleared in this mutation.
func (m *BoardReportMutation) BoardIDCleared() bool {
	_, ok := m.clearedFields[boardreport.FieldBoardID]
	return ok
}

// ResetBoardID resets all changes to the "board_id" field.
func (m *BoardReportMutation) ResetBoardID() {
	m.board = nil
	delete(m.clearedFields, boardreport.FieldBoardID)
}

// SetReportTypeID sets the "report_type_id" field.
func (m *BoardReportMutation) SetReportTypeID(i int) {
	m.report_type = &i
}

// ReportTypeID returns the value of the "report_type_id" field in the mutation.
func (m *BoardReportMutation) ReportTypeID() (r int, exists bool) {
	v := m.report_type
	if v == nil {
		return
	}
	return *v, true
}

// OldReportTypeID returns the old "report_type_id" field's value of the BoardReport entity.
// If the BoardReport object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BoardReportMutation) OldReportTypeID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReportTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReportTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReportTypeID: %w", err)
	}
	return oldValue.ReportTypeID, nil
}

// ClearReportTypeID clears the value of the "report_type_id" field.
func (m *BoardReportMutation) ClearReportTypeID() {
	m.report_type = nil
	m.clearedFields[boardreport.FieldReportTypeID] = struct{}{}
}

// ReportTypeIDCleared returns if the "report_type_id" field was cleared in this mutation.
func (m *BoardReportMutation) ReportTypeIDCleared() bool {
	_, ok := m.clearedFields[boardreport.FieldReportTypeID]
	return ok
}

// ResetReportTypeID resets all changes to the "report_type_id" field.
func (m *BoardReportMutation) ResetReportTypeID() {
	m.report_type = nil
	delete(m.clearedFields, boardreport.FieldReportTypeID)
}

// SetReporterID sets the "reporter_id" field.
func (m *BoardReportMutation) SetReporterID(i int) {
	m.user = &i
}

// ReporterID returns the value of the "reporter_id" field in the mutation.
func (m *BoardReportMutation) ReporterID() (r int, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldReporterID returns the old "reporter_id" field's value of the BoardReport entity.
// If the BoardReport object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BoardReportMutation) OldReporterID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReporterID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReporterID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReporterID: %w", err)
	}
	return oldValue.ReporterID, nil
}

// ClearReporterID clears the value of the "reporter_id" field.
func (m *BoardReportMutation) ClearReporterID() {
	m.user = nil
	m.clearedFields[boardreport.FieldReporterID] = struct{}{}
}

// ReporterIDCleared returns if the "reporter_id" field was cleared in this mutation.
func (m *BoardReportMutation) ReporterIDCleared() bool {
	_, ok := m.clearedFields[boardreport.FieldReporterID]
	return ok
}

// ResetReporterID resets all changes to the "reporter_id" field.
func (m *BoardReportMutation) ResetReporterID() {
	m.user = nil
	delete(m.clearedFields, boardreport.FieldReporterID)
}

// SetComment sets the "comment" field.
func (m *BoardReportMutation) SetComment(s string) {
	m.comment = &s
}

// Comment returns the value of the "comment" field in the mutation.
func (m *BoardReportMutation) Comment() (r string, exists bool) {
	v := m.comment
	if v == nil {
		return
	}
	return *v, true
}

// OldComment returns the old "comment" field's value of the BoardReport entity.
// If the BoardReport object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BoardReportMutation) OldComment(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldComment is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldComment requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldComment: %w", err)
	}
	return oldValue.Comment, nil
}

// ClearComment clears the value of the "comment" field.
func (m *BoardReportMutation) ClearComment() {
	m.comment = nil
	m.clearedFields[boardreport.FieldComment] = struct{}{}
}

// CommentCleared returns if the "comment" field was cleared in this mutation.
func (m *BoardReportMutation) CommentCleared() bool {
	_, ok := m.clearedFields[boardreport.FieldComment]
	return ok
}

// ResetComment resets all changes to the "comment" field.
func (m *BoardReportMutation) ResetComment() {
	m.comment = nil
	delete(m.clearedFields, boardreport.FieldComment)
}

// SetStatus sets the "status" field.
func (m *BoardReportMutation) SetStatus(b boardreport.Status) {
	m.status = &b
}

// Status returns the value of the "status" field in the mutation.
func (m *BoardReportMutation) Status() (r boardreport.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the BoardReport entity.
// If the BoardReport object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BoardReportMutation) OldStatus(ctx context.Context) (v boardreport.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *BoardReportMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *BoardReportMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *BoardReportMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the BoardReport entity.
// If the BoardReport object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BoardReportMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *BoardReportMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *BoardReportMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *BoardReportMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the BoardReport entity.
// If the BoardReport object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BoardReportMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *BoardReportMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *BoardReportMutation) SetUserID(id int) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *BoardReportMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *BoardReportMutation) UserCleared() bool {
	return m.ReporterIDCleared() || m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *BoardReportMutation) UserID() (id int, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *BoardReportMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *BoardReportMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// ClearBoard clears the "board" edge to the Board entity.
func (m *BoardReportMutation) ClearBoard() {
	m.clearedboard = true
}

// BoardCleared reports if the "board" edge to the Board entity was cleared.
func (m *BoardReportMutation) BoardCleared() bool {
	return m.BoardIDCleared() || m.clearedboard
}

// BoardIDs returns the "board" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// BoardID instead. It exists only for internal usage by the builders.
func (m *BoardReportMutation) BoardIDs() (ids []int) {
	if id := m.board; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetBoard resets all changes to the "board" edge.
func (m *BoardReportMutation) ResetBoard() {
	m.board = nil
	m.clearedboard = false
}

// ClearReportType clears the "report_type" edge to the ReportType entity.
func (m *BoardReportMutation) ClearReportType() {
	m.clearedreport_type = true
}

// ReportTypeCleared reports if the "report_type" edge to the ReportType entity was cleared.
func (m *BoardReportMutation) ReportTypeCleared() bool {
	return m.ReportTypeIDCleared() || m.clearedreport_type
}

// ReportTypeIDs returns the "report_type" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ReportTypeID instead. It exists only for internal usage by the builders.
func (m *BoardReportMutation) ReportTypeIDs() (ids []int) {
	if id := m.report_type; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetReportType resets all changes to the "report_type" edge.
func (m *BoardReportMutation) ResetReportType() {
	m.report_type = nil
	m.clearedreport_type = false
}

// Where appends a list predicates to the BoardReportMutation builder.
func (m *BoardReportMutation) Where(ps ...predicate.BoardReport) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the BoardReportMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *BoardReportMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.BoardReport, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *BoardReportMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *BoardReportMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (BoardReport).
func (m *BoardReportMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BoardReportMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.board != nil {
		fields = append(fields, boardreport.FieldBoardID)
	}
	if m.report_type != nil {
		fields = append(fields, boardreport.FieldReportTypeID)
	}
	if m.user != nil {
		fields = append(fields, boardreport.FieldReporterID)
	}
	if m.comment != nil {
		fields = append(fields, boardreport.FieldComment)
	}
	if m.status != nil {
		fields = append(fields, boardreport.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, boardreport.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, boardreport.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BoardReportMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case boardreport.FieldBoardID:
		return m.BoardID()
	case boardreport.FieldReportTypeID:
		return m.ReportTypeID()
	case boardreport.FieldReporterID:
		return m.ReporterID()
	case boardreport.FieldComment:
		return m.Comment()
	case boardreport.FieldStatus:
		return m.Status()
	case boardreport.FieldCreatedAt:
		return m.CreatedAt()
	case boardreport.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BoardReportMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case boardreport.FieldBoardID:
		return m.OldBoardID(ctx)
	case boardreport.FieldReportTypeID:
		return m.OldReportTypeID(ctx)
	case boardreport.FieldReporterID:
		return m.OldReporterID(ctx)
	case boardreport.FieldComment:
		return m.OldComment(ctx)
	case boardreport.FieldStatus:
		return m.OldStatus(ctx)
	case boardreport.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case boardreport.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown BoardReport field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BoardReportMutation) SetField(name string, value ent.Value) error {
	switch name {
	case boardreport.FieldBoardID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBoardID(v)
		return nil
	case boardreport.FieldReportTypeID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReportTypeID(v)
		return nil
	case boardreport.FieldReporterID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReporterID(v)
		return nil
	case boardreport.FieldComment:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetComment(v)
		return nil
	case boardreport.FieldStatus:
		v, ok := value.(boardreport.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case boardreport.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case boardreport.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown BoardReport field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BoardReportMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BoardReportMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BoardReportMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown BoardReport numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BoardReportMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(boardreport.FieldBoardID) {
		fields = append(fields, boardreport.FieldBoardID)
	}
	if m.FieldCleared(boardreport.FieldReportTypeID) {
		fields = append(fields, boardreport.FieldReportTypeID)
	}
	if m.FieldCleared(boardreport.FieldReporterID) {
		fields = append(fields, boardreport.FieldReporterID)
	}
	if m.FieldCleared(boardreport.FieldComment) {
		fields = append(fields, boardreport.FieldComment)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BoardReportMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BoardReportMutation) ClearField(name string) error {
	switch name {
	case boardreport.FieldBoardID:
		m.ClearBoardID()
		return nil
	case boardreport.FieldReportTypeID:
		m.ClearReportTypeID()
		return nil
	case boardreport.FieldReporterID:
		m.ClearReporterID()
		return nil
	case boardreport.FieldComment:
		m.ClearComment()
		return nil
	}
	return fmt.Errorf("unknown BoardReport nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BoardReportMutation) ResetField(name string) error {
	switch name {
	case boardreport.FieldBoardID:
		m.ResetBoardID()
		return nil
	case boardreport.FieldReportTypeID:
		m.ResetReportTypeID()
		return nil
	case boardreport.FieldReporterID:
		m.ResetReporterID()
		return nil
	case boardreport.FieldComment:
		m.ResetComment()
		return nil
	case boardreport.FieldStatus:
		m.ResetStatus()
		return nil
	case boardreport.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case boardreport.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown BoardReport field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BoardReportMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.user != nil {
		edges = append(edges, boardreport.EdgeUser)
	}
	if m.board != nil {
		edges = append(edges, boardreport.EdgeBoard)
	}
	if m.report_type != nil {
		edges = append(edges, boardreport.EdgeReportType)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BoardReportMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case boardreport.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case boardreport.EdgeBoard:
		if id := m.board; id != nil {
			return []ent.Value{*id}
		}
	case boardreport.EdgeReportType:
		if id := m.report_type; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BoardReportMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BoardReportMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BoardReportMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleareduser {
		edges = append(edges, boardreport.EdgeUser)
	}
	if m.clearedboard {
		edges = append(edges, boardreport.EdgeBoard)
	}
	if m.clearedreport_type {
		edges = append(edges, boardreport.EdgeReportType)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BoardReportMutation) EdgeCleared(name string) bool {
	switch name {
	case boardreport.EdgeUser:
		return m.cleareduser
	case boardreport.EdgeBoard:
		return m.clearedboard
	case boardreport.EdgeReportType:
		return m.clearedreport_type
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BoardReportMutation) ClearEdge(name string) error {
	switch name {
	case boardreport.EdgeUser:
		m.ClearUser()
		return nil
	case boardreport.EdgeBoard:
		m.ClearBoard()
		return nil
	case boardreport.EdgeReportType:
		m.ClearReportType()
		return nil
	}
	return fmt.Errorf("unknown BoardReport unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BoardReportMutation) ResetEdge(name string) error {
	switch name {
	case boardreport.EdgeUser:
		m.ResetUser()
		return nil
	case boardreport.EdgeBoard:
		m.ResetBoard()
		return nil
	case boardreport.EdgeReportType:
		m.ResetReportType()
		return nil
	}
	return fmt.Errorf("unknown BoardReport edge %s", name)
}

// BookMarkMutation represents an operation that mutates the BookMark nodes in the graph.
type BookMarkMutation struct {
	config
	op            Op
	typ           string
	id            *int
	created_at    *time.Time
	clearedFields map[string]struct{}
	board         *int
	clearedboard  bool
	user          *int
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*BookMark, error)
	predicates    []predicate.BookMark
}

var _ ent.Mutation = (*BookMarkMutation)(nil)

// bookmarkOption allows management of the mutation configuration using functional options.
type bookmarkOption func(*BookMarkMutation)

// newBookMarkMutation creates new mutation for the BookMark entity.
func newBookMarkMutation(c config, op Op, opts ...bookmarkOption) *BookMarkMutation {
	m := &BookMarkMutation{
		config:        c,
		op:            op,
		typ:           TypeBookMark,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBookMarkID sets the ID field of the mutation.
func withBookMarkID(id int) bookmarkOption {
	return func(m *BookMarkMutation) {
		var (
			err   error
			once  sync.Once
			value *BookMark
		)
		m.oldValue = func(ctx context.Context) (*BookMark, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().BookMark.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBookMark sets the old BookMark of the mutation.
func withBookMark(node *BookMark) bookmarkOption {
	return func(m *BookMarkMutation) {
		m.oldValue = func(context.Context) (*BookMark, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BookMarkMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BookMarkMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BookMarkMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BookMarkMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().BookMark.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *BookMarkMutation) SetUserID(i int) {
	m.user = &i
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *BookMarkMutation) UserID() (r int, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the BookMark entity.
// If the BookMark object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BookMarkMutation) OldUserID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ClearUserID clears the value of the "user_id" field.
func (m *BookMarkMutation) ClearUserID() {
	m.user = nil
	m.clearedFields[bookmark.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *BookMarkMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[bookmark.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *BookMarkMutation) ResetUserID() {
	m.user = nil
	delete(m.clearedFields, bookmark.FieldUserID)
}

// SetBoardID sets the "board_id" field.
func (m *BookMarkMutation) SetBoardID(i int) {
	m.board = &i
}

// BoardID returns the value of the "board_id" field in the mutation.
func (m *BookMarkMutation) BoardID() (r int, exists bool) {
	v := m.board
	if v == nil {
		return
	}
	return *v, true
}

// OldBoardID returns the old "board_id" field's value of the BookMark entity.
// If the BookMark object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BookMarkMutation) OldBoardID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBoardID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBoardID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBoardID: %w", err)
	}
	return oldValue.BoardID, nil
}

// ClearBoardID clears the value of the "board_id" field.
func (m *BookMarkMutation) ClearBoardID() {
	m.board = nil
	m.clearedFields[bookmark.FieldBoardID] = struct{}{}
}

// BoardIDCleared returns if the "board_id" field was cleared in this mutation.
func (m *BookMarkMutation) BoardIDCleared() bool {
	_, ok := m.clearedFields[bookmark.FieldBoardID]
	return ok
}

// ResetBoardID resets all changes to the "board_id" field.
func (m *BookMarkMutation) ResetBoardID() {
	m.board = nil
	delete(m.clearedFields, bookmark.FieldBoardID)
}

// SetCreatedAt sets the "created_at" field.
func (m *BookMarkMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *BookMarkMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the BookMark entity.
// If the BookMark object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BookMarkMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *BookMarkMutation) ResetCreatedAt() {
	m.created_at = nil
}

// ClearBoard clears the "board" edge to the Board entity.
func (m *BookMarkMutation) ClearBoard() {
	m.clearedboard = true
}

// BoardCleared reports if the "board" edge to the Board entity was cleared.
func (m *BookMarkMutation) BoardCleared() bool {
	return m.BoardIDCleared() || m.clearedboard
}

// BoardIDs returns the "board" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// BoardID instead. It exists only for internal usage by the builders.
func (m *BookMarkMutation) BoardIDs() (ids []int) {
	if id := m.board; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetBoard resets all changes to the "board" edge.
func (m *BookMarkMutation) ResetBoard() {
	m.board = nil
	m.clearedboard = false
}

// ClearUser clears the "user" edge to the User entity.
func (m *BookMarkMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *BookMarkMutation) UserCleared() bool {
	return m.UserIDCleared() || m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *BookMarkMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *BookMarkMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the BookMarkMutation builder.
func (m *BookMarkMutation) Where(ps ...predicate.BookMark) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the BookMarkMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *BookMarkMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.BookMark, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *BookMarkMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *BookMarkMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (BookMark).
func (m *BookMarkMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BookMarkMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.user != nil {
		fields = append(fields, bookmark.FieldUserID)
	}
	if m.board != nil {
		fields = append(fields, bookmark.FieldBoardID)
	}
	if m.created_at != nil {
		fields = append(fields, bookmark.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BookMarkMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case bookmark.FieldUserID:
		return m.UserID()
	case bookmark.FieldBoardID:
		return m.BoardID()
	case bookmark.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BookMarkMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case bookmark.FieldUserID:
		return m.OldUserID(ctx)
	case bookmark.FieldBoardID:
		return m.OldBoardID(ctx)
	case bookmark.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown BookMark field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BookMarkMutation) SetField(name string, value ent.Value) error {
	switch name {
	case bookmark.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case bookmark.FieldBoardID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBoardID(v)
		return nil
	case bookmark.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown BookMark field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BookMarkMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BookMarkMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BookMarkMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown BookMark numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BookMarkMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(bookmark.FieldUserID) {
		fields = append(fields, bookmark.FieldUserID)
	}
	if m.FieldCleared(bookmark.FieldBoardID) {
		fields = append(fields, bookmark.FieldBoardID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BookMarkMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BookMarkMutation) ClearField(name string) error {
	switch name {
	case bookmark.FieldUserID:
		m.ClearUserID()
		return nil
	case bookmark.FieldBoardID:
		m.ClearBoardID()
		return nil
	}
	return fmt.Errorf("unknown BookMark nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BookMarkMutation) ResetField(name string) error {
	switch name {
	case bookmark.FieldUserID:
		m.ResetUserID()
		return nil
	case bookmark.FieldBoardID:
		m.ResetBoardID()
		return nil
	case bookmark.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown BookMark field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BookMarkMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.board != nil {
		edges = append(edges, bookmark.EdgeBoard)
	}
	if m.user != nil {
		edges = append(edges, bookmark.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BookMarkMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case bookmark.EdgeBoard:
		if id := m.board; id != nil {
			return []ent.Value{*id}
		}
	case bookmark.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BookMarkMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BookMarkMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BookMarkMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedboard {
		edges = append(edges, bookmark.EdgeBoard)
	}
	if m.cleareduser {
		edges = append(edges, bookmark.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BookMarkMutation) EdgeCleared(name string) bool {
	switch name {
	case bookmark.EdgeBoard:
		return m.clearedboard
	case bookmark.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BookMarkMutation) ClearEdge(name string) error {
	switch name {
	case bookmark.EdgeBoard:
		m.ClearBoard()
		return nil
	case bookmark.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown BookMark unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BookMarkMutation) ResetEdge(name string) error {
	switch name {
	case bookmark.EdgeBoard:
		m.ResetBoard()
		return nil
	case bookmark.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown BookMark edge %s", name)
}

// CategoryMutation represents an operation that mutates the Category nodes in the graph.
type CategoryMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	created_at    *time.Time
	clearedFields map[string]struct{}
	topics        map[int]struct{}
	removedtopics map[int]struct{}
	clearedtopics bool
	done          bool
	oldValue      func(context.Context) (*Category, error)
	predicates    []predicate.Category
}

var _ ent.Mutation = (*CategoryMutation)(nil)

// categoryOption allows management of the mutation configuration using functional options.
type categoryOption func(*CategoryMutation)

// newCategoryMutation creates new mutation for the Category entity.
func newCategoryMutation(c config, op Op, opts ...categoryOption) *CategoryMutation {
	m := &CategoryMutation{
		config:        c,
		op:            op,
		typ:           TypeCategory,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCategoryID sets the ID field of the mutation.
func withCategoryID(id int) categoryOption {
	return func(m *CategoryMutation) {
		var (
			err   error
			once  sync.Once
			value *Category
		)
		m.oldValue = func(ctx context.Context) (*Category, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Category.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCategory sets the old Category of the mutation.
func withCategory(node *Category) categoryOption {
	return func(m *CategoryMutation) {
		m.oldValue = func(context.Context) (*Category, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CategoryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CategoryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CategoryMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CategoryMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Category.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *CategoryMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CategoryMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Category entity.
// If the Category object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CategoryMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *CategoryMutation) ResetName() {
	m.name = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *CategoryMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CategoryMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Category entity.
// If the Category object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CategoryMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CategoryMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddTopicIDs adds the "topics" edge to the Topic entity by ids.
func (m *CategoryMutation) AddTopicIDs(ids ...int) {
	if m.topics == nil {
		m.topics = make(map[int]struct{})
	}
	for i := range ids {
		m.topics[ids[i]] = struct{}{}
	}
}

// ClearTopics clears the "topics" edge to the Topic entity.
func (m *CategoryMutation) ClearTopics() {
	m.clearedtopics = true
}

// TopicsCleared reports if the "topics" edge to the Topic entity was cleared.
func (m *CategoryMutation) TopicsCleared() bool {
	return m.clearedtopics
}

// RemoveTopicIDs removes the "topics" edge to the Topic entity by IDs.
func (m *CategoryMutation) RemoveTopicIDs(ids ...int) {
	if m.removedtopics == nil {
		m.removedtopics = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.topics, ids[i])
		m.removedtopics[ids[i]] = struct{}{}
	}
}

// RemovedTopics returns the removed IDs of the "topics" edge to the Topic entity.
func (m *CategoryMutation) RemovedTopicsIDs() (ids []int) {
	for id := range m.removedtopics {
		ids = append(ids, id)
	}
	return
}

// TopicsIDs returns the "topics" edge IDs in the mutation.
func (m *CategoryMutation) TopicsIDs() (ids []int) {
	for id := range m.topics {
		ids = append(ids, id)
	}
	return
}

// ResetTopics resets all changes to the "topics" edge.
func (m *CategoryMutation) ResetTopics() {
	m.topics = nil
	m.clearedtopics = false
	m.removedtopics = nil
}

// Where appends a list predicates to the CategoryMutation builder.
func (m *CategoryMutation) Where(ps ...predicate.Category) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CategoryMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CategoryMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Category, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CategoryMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CategoryMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Category).
func (m *CategoryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CategoryMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, category.FieldName)
	}
	if m.created_at != nil {
		fields = append(fields, category.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CategoryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case category.FieldName:
		return m.Name()
	case category.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CategoryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case category.FieldName:
		return m.OldName(ctx)
	case category.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Category field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CategoryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case category.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case category.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Category field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CategoryMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CategoryMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CategoryMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Category numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CategoryMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CategoryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CategoryMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Category nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CategoryMutation) ResetField(name string) error {
	switch name {
	case category.FieldName:
		m.ResetName()
		return nil
	case category.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Category field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CategoryMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.topics != nil {
		edges = append(edges, category.EdgeTopics)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CategoryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case category.EdgeTopics:
		ids := make([]ent.Value, 0, len(m.topics))
		for id := range m.topics {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CategoryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedtopics != nil {
		edges = append(edges, category.EdgeTopics)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CategoryMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case category.EdgeTopics:
		ids := make([]ent.Value, 0, len(m.removedtopics))
		for id := range m.removedtopics {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CategoryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedtopics {
		edges = append(edges, category.EdgeTopics)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CategoryMutation) EdgeCleared(name string) bool {
	switch name {
	case category.EdgeTopics:
		return m.clearedtopics
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CategoryMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Category unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CategoryMutation) ResetEdge(name string) error {
	switch name {
	case category.EdgeTopics:
		m.ResetTopics()
		return nil
	}
	return fmt.Errorf("unknown Category edge %s", name)
}

// CommentMutation represents an operation that mutates the Comment nodes in the graph.
type CommentMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int
	text                   *string
	like_count             *int
	addlike_count          *int
	status                 *comment.Status
	report_count           *int
	addreport_count        *int
	language_type          *string
	author_heart           *bool
	created_at             *time.Time
	updated_at             *time.Time
	clearedFields          map[string]struct{}
	board                  *int
	clearedboard           bool
	user                   *int
	cleareduser            bool
	comment_like           map[int]struct{}
	removedcomment_like    map[int]struct{}
	clearedcomment_like    bool
	comment_mention        map[int]struct{}
	removedcomment_mention map[int]struct{}
	clearedcomment_mention bool
	comment_report         map[int]struct{}
	removedcomment_report  map[int]struct{}
	clearedcomment_report  bool
	done                   bool
	oldValue               func(context.Context) (*Comment, error)
	predicates             []predicate.Comment
}

var _ ent.Mutation = (*CommentMutation)(nil)

// commentOption allows management of the mutation configuration using functional options.
type commentOption func(*CommentMutation)

// newCommentMutation creates new mutation for the Comment entity.
func newCommentMutation(c config, op Op, opts ...commentOption) *CommentMutation {
	m := &CommentMutation{
		config:        c,
		op:            op,
		typ:           TypeComment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCommentID sets the ID field of the mutation.
func withCommentID(id int) commentOption {
	return func(m *CommentMutation) {
		var (
			err   error
			once  sync.Once
			value *Comment
		)
		m.oldValue = func(ctx context.Context) (*Comment, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Comment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withComment sets the old Comment of the mutation.
func withComment(node *Comment) commentOption {
	return func(m *CommentMutation) {
		m.oldValue = func(context.Context) (*Comment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CommentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CommentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CommentMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CommentMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Comment.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetText sets the "text" field.
func (m *CommentMutation) SetText(s string) {
	m.text = &s
}

// Text returns the value of the "text" field in the mutation.
func (m *CommentMutation) Text() (r string, exists bool) {
	v := m.text
	if v == nil {
		return
	}
	return *v, true
}

// OldText returns the old "text" field's value of the Comment entity.
// If the Comment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommentMutation) OldText(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldText is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldText requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldText: %w", err)
	}
	return oldValue.Text, nil
}

// ResetText resets all changes to the "text" field.
func (m *CommentMutation) ResetText() {
	m.text = nil
}

// SetUserID sets the "user_id" field.
func (m *CommentMutation) SetUserID(i int) {
	m.user = &i
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *CommentMutation) UserID() (r int, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Comment entity.
// If the Comment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommentMutation) OldUserID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ClearUserID clears the value of the "user_id" field.
func (m *CommentMutation) ClearUserID() {
	m.user = nil
	m.clearedFields[comment.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *CommentMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[comment.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *CommentMutation) ResetUserID() {
	m.user = nil
	delete(m.clearedFields, comment.FieldUserID)
}

// SetBoardID sets the "board_id" field.
func (m *CommentMutation) SetBoardID(i int) {
	m.board = &i
}

// BoardID returns the value of the "board_id" field in the mutation.
func (m *CommentMutation) BoardID() (r int, exists bool) {
	v := m.board
	if v == nil {
		return
	}
	return *v, true
}

// OldBoardID returns the old "board_id" field's value of the Comment entity.
// If the Comment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommentMutation) OldBoardID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBoardID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBoardID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBoardID: %w", err)
	}
	return oldValue.BoardID, nil
}

// ClearBoardID clears the value of the "board_id" field.
func (m *CommentMutation) ClearBoardID() {
	m.board = nil
	m.clearedFields[comment.FieldBoardID] = struct{}{}
}

// BoardIDCleared returns if the "board_id" field was cleared in this mutation.
func (m *CommentMutation) BoardIDCleared() bool {
	_, ok := m.clearedFields[comment.FieldBoardID]
	return ok
}

// ResetBoardID resets all changes to the "board_id" field.
func (m *CommentMutation) ResetBoardID() {
	m.board = nil
	delete(m.clearedFields, comment.FieldBoardID)
}

// SetLikeCount sets the "like_count" field.
func (m *CommentMutation) SetLikeCount(i int) {
	m.like_count = &i
	m.addlike_count = nil
}

// LikeCount returns the value of the "like_count" field in the mutation.
func (m *CommentMutation) LikeCount() (r int, exists bool) {
	v := m.like_count
	if v == nil {
		return
	}
	return *v, true
}

// OldLikeCount returns the old "like_count" field's value of the Comment entity.
// If the Comment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommentMutation) OldLikeCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLikeCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLikeCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLikeCount: %w", err)
	}
	return oldValue.LikeCount, nil
}

// AddLikeCount adds i to the "like_count" field.
func (m *CommentMutation) AddLikeCount(i int) {
	if m.addlike_count != nil {
		*m.addlike_count += i
	} else {
		m.addlike_count = &i
	}
}

// AddedLikeCount returns the value that was added to the "like_count" field in this mutation.
func (m *CommentMutation) AddedLikeCount() (r int, exists bool) {
	v := m.addlike_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetLikeCount resets all changes to the "like_count" field.
func (m *CommentMutation) ResetLikeCount() {
	m.like_count = nil
	m.addlike_count = nil
}

// SetStatus sets the "status" field.
func (m *CommentMutation) SetStatus(c comment.Status) {
	m.status = &c
}

// Status returns the value of the "status" field in the mutation.
func (m *CommentMutation) Status() (r comment.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Comment entity.
// If the Comment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommentMutation) OldStatus(ctx context.Context) (v comment.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *CommentMutation) ResetStatus() {
	m.status = nil
}

// SetReportCount sets the "report_count" field.
func (m *CommentMutation) SetReportCount(i int) {
	m.report_count = &i
	m.addreport_count = nil
}

// ReportCount returns the value of the "report_count" field in the mutation.
func (m *CommentMutation) ReportCount() (r int, exists bool) {
	v := m.report_count
	if v == nil {
		return
	}
	return *v, true
}

// OldReportCount returns the old "report_count" field's value of the Comment entity.
// If the Comment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommentMutation) OldReportCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReportCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReportCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReportCount: %w", err)
	}
	return oldValue.ReportCount, nil
}

// AddReportCount adds i to the "report_count" field.
func (m *CommentMutation) AddReportCount(i int) {
	if m.addreport_count != nil {
		*m.addreport_count += i
	} else {
		m.addreport_count = &i
	}
}

// AddedReportCount returns the value that was added to the "report_count" field in this mutation.
func (m *CommentMutation) AddedReportCount() (r int, exists bool) {
	v := m.addreport_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetReportCount resets all changes to the "report_count" field.
func (m *CommentMutation) ResetReportCount() {
	m.report_count = nil
	m.addreport_count = nil
}

// SetLanguageType sets the "language_type" field.
func (m *CommentMutation) SetLanguageType(s string) {
	m.language_type = &s
}

// LanguageType returns the value of the "language_type" field in the mutation.
func (m *CommentMutation) LanguageType() (r string, exists bool) {
	v := m.language_type
	if v == nil {
		return
	}
	return *v, true
}

// OldLanguageType returns the old "language_type" field's value of the Comment entity.
// If the Comment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommentMutation) OldLanguageType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLanguageType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLanguageType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLanguageType: %w", err)
	}
	return oldValue.LanguageType, nil
}

// ResetLanguageType resets all changes to the "language_type" field.
func (m *CommentMutation) ResetLanguageType() {
	m.language_type = nil
}

// SetAuthorHeart sets the "author_heart" field.
func (m *CommentMutation) SetAuthorHeart(b bool) {
	m.author_heart = &b
}

// AuthorHeart returns the value of the "author_heart" field in the mutation.
func (m *CommentMutation) AuthorHeart() (r bool, exists bool) {
	v := m.author_heart
	if v == nil {
		return
	}
	return *v, true
}

// OldAuthorHeart returns the old "author_heart" field's value of the Comment entity.
// If the Comment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommentMutation) OldAuthorHeart(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAuthorHeart is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAuthorHeart requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAuthorHeart: %w", err)
	}
	return oldValue.AuthorHeart, nil
}

// ResetAuthorHeart resets all changes to the "author_heart" field.
func (m *CommentMutation) ResetAuthorHeart() {
	m.author_heart = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *CommentMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CommentMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Comment entity.
// If the Comment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommentMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CommentMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CommentMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CommentMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Comment entity.
// If the Comment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommentMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CommentMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// ClearBoard clears the "board" edge to the Board entity.
func (m *CommentMutation) ClearBoard() {
	m.clearedboard = true
}

// BoardCleared reports if the "board" edge to the Board entity was cleared.
func (m *CommentMutation) BoardCleared() bool {
	return m.BoardIDCleared() || m.clearedboard
}

// BoardIDs returns the "board" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// BoardID instead. It exists only for internal usage by the builders.
func (m *CommentMutation) BoardIDs() (ids []int) {
	if id := m.board; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetBoard resets all changes to the "board" edge.
func (m *CommentMutation) ResetBoard() {
	m.board = nil
	m.clearedboard = false
}

// ClearUser clears the "user" edge to the User entity.
func (m *CommentMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *CommentMutation) UserCleared() bool {
	return m.UserIDCleared() || m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *CommentMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *CommentMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// AddCommentLikeIDs adds the "comment_like" edge to the CommentLike entity by ids.
func (m *CommentMutation) AddCommentLikeIDs(ids ...int) {
	if m.comment_like == nil {
		m.comment_like = make(map[int]struct{})
	}
	for i := range ids {
		m.comment_like[ids[i]] = struct{}{}
	}
}

// ClearCommentLike clears the "comment_like" edge to the CommentLike entity.
func (m *CommentMutation) ClearCommentLike() {
	m.clearedcomment_like = true
}

// CommentLikeCleared reports if the "comment_like" edge to the CommentLike entity was cleared.
func (m *CommentMutation) CommentLikeCleared() bool {
	return m.clearedcomment_like
}

// RemoveCommentLikeIDs removes the "comment_like" edge to the CommentLike entity by IDs.
func (m *CommentMutation) RemoveCommentLikeIDs(ids ...int) {
	if m.removedcomment_like == nil {
		m.removedcomment_like = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.comment_like, ids[i])
		m.removedcomment_like[ids[i]] = struct{}{}
	}
}

// RemovedCommentLike returns the removed IDs of the "comment_like" edge to the CommentLike entity.
func (m *CommentMutation) RemovedCommentLikeIDs() (ids []int) {
	for id := range m.removedcomment_like {
		ids = append(ids, id)
	}
	return
}

// CommentLikeIDs returns the "comment_like" edge IDs in the mutation.
func (m *CommentMutation) CommentLikeIDs() (ids []int) {
	for id := range m.comment_like {
		ids = append(ids, id)
	}
	return
}

// ResetCommentLike resets all changes to the "comment_like" edge.
func (m *CommentMutation) ResetCommentLike() {
	m.comment_like = nil
	m.clearedcomment_like = false
	m.removedcomment_like = nil
}

// AddCommentMentionIDs adds the "comment_mention" edge to the CommentMention entity by ids.
func (m *CommentMutation) AddCommentMentionIDs(ids ...int) {
	if m.comment_mention == nil {
		m.comment_mention = make(map[int]struct{})
	}
	for i := range ids {
		m.comment_mention[ids[i]] = struct{}{}
	}
}

// ClearCommentMention clears the "comment_mention" edge to the CommentMention entity.
func (m *CommentMutation) ClearCommentMention() {
	m.clearedcomment_mention = true
}

// CommentMentionCleared reports if the "comment_mention" edge to the CommentMention entity was cleared.
func (m *CommentMutation) CommentMentionCleared() bool {
	return m.clearedcomment_mention
}

// RemoveCommentMentionIDs removes the "comment_mention" edge to the CommentMention entity by IDs.
func (m *CommentMutation) RemoveCommentMentionIDs(ids ...int) {
	if m.removedcomment_mention == nil {
		m.removedcomment_mention = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.comment_mention, ids[i])
		m.removedcomment_mention[ids[i]] = struct{}{}
	}
}

// RemovedCommentMention returns the removed IDs of the "comment_mention" edge to the CommentMention entity.
func (m *CommentMutation) RemovedCommentMentionIDs() (ids []int) {
	for id := range m.removedcomment_mention {
		ids = append(ids, id)
	}
	return
}

// CommentMentionIDs returns the "comment_mention" edge IDs in the mutation.
func (m *CommentMutation) CommentMentionIDs() (ids []int) {
	for id := range m.comment_mention {
		ids = append(ids, id)
	}
	return
}

// ResetCommentMention resets all changes to the "comment_mention" edge.
func (m *CommentMutation) ResetCommentMention() {
	m.comment_mention = nil
	m.clearedcomment_mention = false
	m.removedcomment_mention = nil
}

// AddCommentReportIDs adds the "comment_report" edge to the CommentReport entity by ids.
func (m *CommentMutation) AddCommentReportIDs(ids ...int) {
	if m.comment_report == nil {
		m.comment_report = make(map[int]struct{})
	}
	for i := range ids {
		m.comment_report[ids[i]] = struct{}{}
	}
}

// ClearCommentReport clears the "comment_report" edge to the CommentReport entity.
func (m *CommentMutation) ClearCommentReport() {
	m.clearedcomment_report = true
}

// CommentReportCleared reports if the "comment_report" edge to the CommentReport entity was cleared.
func (m *CommentMutation) CommentReportCleared() bool {
	return m.clearedcomment_report
}

// RemoveCommentReportIDs removes the "comment_report" edge to the CommentReport entity by IDs.
func (m *CommentMutation) RemoveCommentReportIDs(ids ...int) {
	if m.removedcomment_report == nil {
		m.removedcomment_report = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.comment_report, ids[i])
		m.removedcomment_report[ids[i]] = struct{}{}
	}
}

// RemovedCommentReport returns the removed IDs of the "comment_report" edge to the CommentReport entity.
func (m *CommentMutation) RemovedCommentReportIDs() (ids []int) {
	for id := range m.removedcomment_report {
		ids = append(ids, id)
	}
	return
}

// CommentReportIDs returns the "comment_report" edge IDs in the mutation.
func (m *CommentMutation) CommentReportIDs() (ids []int) {
	for id := range m.comment_report {
		ids = append(ids, id)
	}
	return
}

// ResetCommentReport resets all changes to the "comment_report" edge.
func (m *CommentMutation) ResetCommentReport() {
	m.comment_report = nil
	m.clearedcomment_report = false
	m.removedcomment_report = nil
}

// Where appends a list predicates to the CommentMutation builder.
func (m *CommentMutation) Where(ps ...predicate.Comment) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CommentMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CommentMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Comment, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CommentMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CommentMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Comment).
func (m *CommentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CommentMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.text != nil {
		fields = append(fields, comment.FieldText)
	}
	if m.user != nil {
		fields = append(fields, comment.FieldUserID)
	}
	if m.board != nil {
		fields = append(fields, comment.FieldBoardID)
	}
	if m.like_count != nil {
		fields = append(fields, comment.FieldLikeCount)
	}
	if m.status != nil {
		fields = append(fields, comment.FieldStatus)
	}
	if m.report_count != nil {
		fields = append(fields, comment.FieldReportCount)
	}
	if m.language_type != nil {
		fields = append(fields, comment.FieldLanguageType)
	}
	if m.author_heart != nil {
		fields = append(fields, comment.FieldAuthorHeart)
	}
	if m.created_at != nil {
		fields = append(fields, comment.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, comment.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CommentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case comment.FieldText:
		return m.Text()
	case comment.FieldUserID:
		return m.UserID()
	case comment.FieldBoardID:
		return m.BoardID()
	case comment.FieldLikeCount:
		return m.LikeCount()
	case comment.FieldStatus:
		return m.Status()
	case comment.FieldReportCount:
		return m.ReportCount()
	case comment.FieldLanguageType:
		return m.LanguageType()
	case comment.FieldAuthorHeart:
		return m.AuthorHeart()
	case comment.FieldCreatedAt:
		return m.CreatedAt()
	case comment.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CommentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case comment.FieldText:
		return m.OldText(ctx)
	case comment.FieldUserID:
		return m.OldUserID(ctx)
	case comment.FieldBoardID:
		return m.OldBoardID(ctx)
	case comment.FieldLikeCount:
		return m.OldLikeCount(ctx)
	case comment.FieldStatus:
		return m.OldStatus(ctx)
	case comment.FieldReportCount:
		return m.OldReportCount(ctx)
	case comment.FieldLanguageType:
		return m.OldLanguageType(ctx)
	case comment.FieldAuthorHeart:
		return m.OldAuthorHeart(ctx)
	case comment.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case comment.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Comment field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CommentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case comment.FieldText:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetText(v)
		return nil
	case comment.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case comment.FieldBoardID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBoardID(v)
		return nil
	case comment.FieldLikeCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLikeCount(v)
		return nil
	case comment.FieldStatus:
		v, ok := value.(comment.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case comment.FieldReportCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReportCount(v)
		return nil
	case comment.FieldLanguageType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLanguageType(v)
		return nil
	case comment.FieldAuthorHeart:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAuthorHeart(v)
		return nil
	case comment.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case comment.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Comment field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CommentMutation) AddedFields() []string {
	var fields []string
	if m.addlike_count != nil {
		fields = append(fields, comment.FieldLikeCount)
	}
	if m.addreport_count != nil {
		fields = append(fields, comment.FieldReportCount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CommentMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case comment.FieldLikeCount:
		return m.AddedLikeCount()
	case comment.FieldReportCount:
		return m.AddedReportCount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CommentMutation) AddField(name string, value ent.Value) error {
	switch name {
	case comment.FieldLikeCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLikeCount(v)
		return nil
	case comment.FieldReportCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddReportCount(v)
		return nil
	}
	return fmt.Errorf("unknown Comment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CommentMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(comment.FieldUserID) {
		fields = append(fields, comment.FieldUserID)
	}
	if m.FieldCleared(comment.FieldBoardID) {
		fields = append(fields, comment.FieldBoardID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CommentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CommentMutation) ClearField(name string) error {
	switch name {
	case comment.FieldUserID:
		m.ClearUserID()
		return nil
	case comment.FieldBoardID:
		m.ClearBoardID()
		return nil
	}
	return fmt.Errorf("unknown Comment nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CommentMutation) ResetField(name string) error {
	switch name {
	case comment.FieldText:
		m.ResetText()
		return nil
	case comment.FieldUserID:
		m.ResetUserID()
		return nil
	case comment.FieldBoardID:
		m.ResetBoardID()
		return nil
	case comment.FieldLikeCount:
		m.ResetLikeCount()
		return nil
	case comment.FieldStatus:
		m.ResetStatus()
		return nil
	case comment.FieldReportCount:
		m.ResetReportCount()
		return nil
	case comment.FieldLanguageType:
		m.ResetLanguageType()
		return nil
	case comment.FieldAuthorHeart:
		m.ResetAuthorHeart()
		return nil
	case comment.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case comment.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Comment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CommentMutation) AddedEdges() []string {
	edges := make([]string, 0, 5)
	if m.board != nil {
		edges = append(edges, comment.EdgeBoard)
	}
	if m.user != nil {
		edges = append(edges, comment.EdgeUser)
	}
	if m.comment_like != nil {
		edges = append(edges, comment.EdgeCommentLike)
	}
	if m.comment_mention != nil {
		edges = append(edges, comment.EdgeCommentMention)
	}
	if m.comment_report != nil {
		edges = append(edges, comment.EdgeCommentReport)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CommentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case comment.EdgeBoard:
		if id := m.board; id != nil {
			return []ent.Value{*id}
		}
	case comment.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case comment.EdgeCommentLike:
		ids := make([]ent.Value, 0, len(m.comment_like))
		for id := range m.comment_like {
			ids = append(ids, id)
		}
		return ids
	case comment.EdgeCommentMention:
		ids := make([]ent.Value, 0, len(m.comment_mention))
		for id := range m.comment_mention {
			ids = append(ids, id)
		}
		return ids
	case comment.EdgeCommentReport:
		ids := make([]ent.Value, 0, len(m.comment_report))
		for id := range m.comment_report {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CommentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 5)
	if m.removedcomment_like != nil {
		edges = append(edges, comment.EdgeCommentLike)
	}
	if m.removedcomment_mention != nil {
		edges = append(edges, comment.EdgeCommentMention)
	}
	if m.removedcomment_report != nil {
		edges = append(edges, comment.EdgeCommentReport)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CommentMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case comment.EdgeCommentLike:
		ids := make([]ent.Value, 0, len(m.removedcomment_like))
		for id := range m.removedcomment_like {
			ids = append(ids, id)
		}
		return ids
	case comment.EdgeCommentMention:
		ids := make([]ent.Value, 0, len(m.removedcomment_mention))
		for id := range m.removedcomment_mention {
			ids = append(ids, id)
		}
		return ids
	case comment.EdgeCommentReport:
		ids := make([]ent.Value, 0, len(m.removedcomment_report))
		for id := range m.removedcomment_report {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CommentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 5)
	if m.clearedboard {
		edges = append(edges, comment.EdgeBoard)
	}
	if m.cleareduser {
		edges = append(edges, comment.EdgeUser)
	}
	if m.clearedcomment_like {
		edges = append(edges, comment.EdgeCommentLike)
	}
	if m.clearedcomment_mention {
		edges = append(edges, comment.EdgeCommentMention)
	}
	if m.clearedcomment_report {
		edges = append(edges, comment.EdgeCommentReport)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CommentMutation) EdgeCleared(name string) bool {
	switch name {
	case comment.EdgeBoard:
		return m.clearedboard
	case comment.EdgeUser:
		return m.cleareduser
	case comment.EdgeCommentLike:
		return m.clearedcomment_like
	case comment.EdgeCommentMention:
		return m.clearedcomment_mention
	case comment.EdgeCommentReport:
		return m.clearedcomment_report
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CommentMutation) ClearEdge(name string) error {
	switch name {
	case comment.EdgeBoard:
		m.ClearBoard()
		return nil
	case comment.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Comment unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CommentMutation) ResetEdge(name string) error {
	switch name {
	case comment.EdgeBoard:
		m.ResetBoard()
		return nil
	case comment.EdgeUser:
		m.ResetUser()
		return nil
	case comment.EdgeCommentLike:
		m.ResetCommentLike()
		return nil
	case comment.EdgeCommentMention:
		m.ResetCommentMention()
		return nil
	case comment.EdgeCommentReport:
		m.ResetCommentReport()
		return nil
	}
	return fmt.Errorf("unknown Comment edge %s", name)
}

// CommentLikeMutation represents an operation that mutates the CommentLike nodes in the graph.
type CommentLikeMutation struct {
	config
	op             Op
	typ            string
	id             *int
	created_at     *time.Time
	clearedFields  map[string]struct{}
	user           *int
	cleareduser    bool
	comment        *int
	clearedcomment bool
	done           bool
	oldValue       func(context.Context) (*CommentLike, error)
	predicates     []predicate.CommentLike
}

var _ ent.Mutation = (*CommentLikeMutation)(nil)

// commentlikeOption allows management of the mutation configuration using functional options.
type commentlikeOption func(*CommentLikeMutation)

// newCommentLikeMutation creates new mutation for the CommentLike entity.
func newCommentLikeMutation(c config, op Op, opts ...commentlikeOption) *CommentLikeMutation {
	m := &CommentLikeMutation{
		config:        c,
		op:            op,
		typ:           TypeCommentLike,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCommentLikeID sets the ID field of the mutation.
func withCommentLikeID(id int) commentlikeOption {
	return func(m *CommentLikeMutation) {
		var (
			err   error
			once  sync.Once
			value *CommentLike
		)
		m.oldValue = func(ctx context.Context) (*CommentLike, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CommentLike.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCommentLike sets the old CommentLike of the mutation.
func withCommentLike(node *CommentLike) commentlikeOption {
	return func(m *CommentLikeMutation) {
		m.oldValue = func(context.Context) (*CommentLike, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CommentLikeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CommentLikeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CommentLikeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CommentLikeMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CommentLike.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *CommentLikeMutation) SetUserID(i int) {
	m.user = &i
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *CommentLikeMutation) UserID() (r int, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the CommentLike entity.
// If the CommentLike object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommentLikeMutation) OldUserID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ClearUserID clears the value of the "user_id" field.
func (m *CommentLikeMutation) ClearUserID() {
	m.user = nil
	m.clearedFields[commentlike.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *CommentLikeMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[commentlike.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *CommentLikeMutation) ResetUserID() {
	m.user = nil
	delete(m.clearedFields, commentlike.FieldUserID)
}

// SetCommentID sets the "comment_id" field.
func (m *CommentLikeMutation) SetCommentID(i int) {
	m.comment = &i
}

// CommentID returns the value of the "comment_id" field in the mutation.
func (m *CommentLikeMutation) CommentID() (r int, exists bool) {
	v := m.comment
	if v == nil {
		return
	}
	return *v, true
}

// OldCommentID returns the old "comment_id" field's value of the CommentLike entity.
// If the CommentLike object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommentLikeMutation) OldCommentID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCommentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCommentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCommentID: %w", err)
	}
	return oldValue.CommentID, nil
}

// ClearCommentID clears the value of the "comment_id" field.
func (m *CommentLikeMutation) ClearCommentID() {
	m.comment = nil
	m.clearedFields[commentlike.FieldCommentID] = struct{}{}
}

// CommentIDCleared returns if the "comment_id" field was cleared in this mutation.
func (m *CommentLikeMutation) CommentIDCleared() bool {
	_, ok := m.clearedFields[commentlike.FieldCommentID]
	return ok
}

// ResetCommentID resets all changes to the "comment_id" field.
func (m *CommentLikeMutation) ResetCommentID() {
	m.comment = nil
	delete(m.clearedFields, commentlike.FieldCommentID)
}

// SetCreatedAt sets the "created_at" field.
func (m *CommentLikeMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CommentLikeMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the CommentLike entity.
// If the CommentLike object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommentLikeMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CommentLikeMutation) ResetCreatedAt() {
	m.created_at = nil
}

// ClearUser clears the "user" edge to the User entity.
func (m *CommentLikeMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *CommentLikeMutation) UserCleared() bool {
	return m.UserIDCleared() || m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *CommentLikeMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *CommentLikeMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// ClearComment clears the "comment" edge to the Comment entity.
func (m *CommentLikeMutation) ClearComment() {
	m.clearedcomment = true
}

// CommentCleared reports if the "comment" edge to the Comment entity was cleared.
func (m *CommentLikeMutation) CommentCleared() bool {
	return m.CommentIDCleared() || m.clearedcomment
}

// CommentIDs returns the "comment" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CommentID instead. It exists only for internal usage by the builders.
func (m *CommentLikeMutation) CommentIDs() (ids []int) {
	if id := m.comment; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetComment resets all changes to the "comment" edge.
func (m *CommentLikeMutation) ResetComment() {
	m.comment = nil
	m.clearedcomment = false
}

// Where appends a list predicates to the CommentLikeMutation builder.
func (m *CommentLikeMutation) Where(ps ...predicate.CommentLike) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CommentLikeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CommentLikeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.CommentLike, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CommentLikeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CommentLikeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (CommentLike).
func (m *CommentLikeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CommentLikeMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.user != nil {
		fields = append(fields, commentlike.FieldUserID)
	}
	if m.comment != nil {
		fields = append(fields, commentlike.FieldCommentID)
	}
	if m.created_at != nil {
		fields = append(fields, commentlike.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CommentLikeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case commentlike.FieldUserID:
		return m.UserID()
	case commentlike.FieldCommentID:
		return m.CommentID()
	case commentlike.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CommentLikeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case commentlike.FieldUserID:
		return m.OldUserID(ctx)
	case commentlike.FieldCommentID:
		return m.OldCommentID(ctx)
	case commentlike.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown CommentLike field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CommentLikeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case commentlike.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case commentlike.FieldCommentID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCommentID(v)
		return nil
	case commentlike.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown CommentLike field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CommentLikeMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CommentLikeMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CommentLikeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown CommentLike numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CommentLikeMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(commentlike.FieldUserID) {
		fields = append(fields, commentlike.FieldUserID)
	}
	if m.FieldCleared(commentlike.FieldCommentID) {
		fields = append(fields, commentlike.FieldCommentID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CommentLikeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CommentLikeMutation) ClearField(name string) error {
	switch name {
	case commentlike.FieldUserID:
		m.ClearUserID()
		return nil
	case commentlike.FieldCommentID:
		m.ClearCommentID()
		return nil
	}
	return fmt.Errorf("unknown CommentLike nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CommentLikeMutation) ResetField(name string) error {
	switch name {
	case commentlike.FieldUserID:
		m.ResetUserID()
		return nil
	case commentlike.FieldCommentID:
		m.ResetCommentID()
		return nil
	case commentlike.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown CommentLike field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CommentLikeMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, commentlike.EdgeUser)
	}
	if m.comment != nil {
		edges = append(edges, commentlike.EdgeComment)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CommentLikeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case commentlike.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case commentlike.EdgeComment:
		if id := m.comment; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CommentLikeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CommentLikeMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CommentLikeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, commentlike.EdgeUser)
	}
	if m.clearedcomment {
		edges = append(edges, commentlike.EdgeComment)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CommentLikeMutation) EdgeCleared(name string) bool {
	switch name {
	case commentlike.EdgeUser:
		return m.cleareduser
	case commentlike.EdgeComment:
		return m.clearedcomment
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CommentLikeMutation) ClearEdge(name string) error {
	switch name {
	case commentlike.EdgeUser:
		m.ClearUser()
		return nil
	case commentlike.EdgeComment:
		m.ClearComment()
		return nil
	}
	return fmt.Errorf("unknown CommentLike unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CommentLikeMutation) ResetEdge(name string) error {
	switch name {
	case commentlike.EdgeUser:
		m.ResetUser()
		return nil
	case commentlike.EdgeComment:
		m.ResetComment()
		return nil
	}
	return fmt.Errorf("unknown CommentLike edge %s", name)
}

// CommentMentionMutation represents an operation that mutates the CommentMention nodes in the graph.
type CommentMentionMutation struct {
	config
	op             Op
	typ            string
	id             *int
	clearedFields  map[string]struct{}
	user           *int
	cleareduser    bool
	comment        *int
	clearedcomment bool
	done           bool
	oldValue       func(context.Context) (*CommentMention, error)
	predicates     []predicate.CommentMention
}

var _ ent.Mutation = (*CommentMentionMutation)(nil)

// commentmentionOption allows management of the mutation configuration using functional options.
type commentmentionOption func(*CommentMentionMutation)

// newCommentMentionMutation creates new mutation for the CommentMention entity.
func newCommentMentionMutation(c config, op Op, opts ...commentmentionOption) *CommentMentionMutation {
	m := &CommentMentionMutation{
		config:        c,
		op:            op,
		typ:           TypeCommentMention,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCommentMentionID sets the ID field of the mutation.
func withCommentMentionID(id int) commentmentionOption {
	return func(m *CommentMentionMutation) {
		var (
			err   error
			once  sync.Once
			value *CommentMention
		)
		m.oldValue = func(ctx context.Context) (*CommentMention, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CommentMention.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCommentMention sets the old CommentMention of the mutation.
func withCommentMention(node *CommentMention) commentmentionOption {
	return func(m *CommentMentionMutation) {
		m.oldValue = func(context.Context) (*CommentMention, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CommentMentionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CommentMentionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CommentMentionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CommentMentionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CommentMention.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCommentID sets the "comment_id" field.
func (m *CommentMentionMutation) SetCommentID(i int) {
	m.comment = &i
}

// CommentID returns the value of the "comment_id" field in the mutation.
func (m *CommentMentionMutation) CommentID() (r int, exists bool) {
	v := m.comment
	if v == nil {
		return
	}
	return *v, true
}

// OldCommentID returns the old "comment_id" field's value of the CommentMention entity.
// If the CommentMention object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommentMentionMutation) OldCommentID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCommentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCommentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCommentID: %w", err)
	}
	return oldValue.CommentID, nil
}

// ClearCommentID clears the value of the "comment_id" field.
func (m *CommentMentionMutation) ClearCommentID() {
	m.comment = nil
	m.clearedFields[commentmention.FieldCommentID] = struct{}{}
}

// CommentIDCleared returns if the "comment_id" field was cleared in this mutation.
func (m *CommentMentionMutation) CommentIDCleared() bool {
	_, ok := m.clearedFields[commentmention.FieldCommentID]
	return ok
}

// ResetCommentID resets all changes to the "comment_id" field.
func (m *CommentMentionMutation) ResetCommentID() {
	m.comment = nil
	delete(m.clearedFields, commentmention.FieldCommentID)
}

// SetUserID sets the "user_id" field.
func (m *CommentMentionMutation) SetUserID(i int) {
	m.user = &i
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *CommentMentionMutation) UserID() (r int, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the CommentMention entity.
// If the CommentMention object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommentMentionMutation) OldUserID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ClearUserID clears the value of the "user_id" field.
func (m *CommentMentionMutation) ClearUserID() {
	m.user = nil
	m.clearedFields[commentmention.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *CommentMentionMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[commentmention.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *CommentMentionMutation) ResetUserID() {
	m.user = nil
	delete(m.clearedFields, commentmention.FieldUserID)
}

// ClearUser clears the "user" edge to the User entity.
func (m *CommentMentionMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *CommentMentionMutation) UserCleared() bool {
	return m.UserIDCleared() || m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *CommentMentionMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *CommentMentionMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// ClearComment clears the "comment" edge to the Comment entity.
func (m *CommentMentionMutation) ClearComment() {
	m.clearedcomment = true
}

// CommentCleared reports if the "comment" edge to the Comment entity was cleared.
func (m *CommentMentionMutation) CommentCleared() bool {
	return m.CommentIDCleared() || m.clearedcomment
}

// CommentIDs returns the "comment" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CommentID instead. It exists only for internal usage by the builders.
func (m *CommentMentionMutation) CommentIDs() (ids []int) {
	if id := m.comment; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetComment resets all changes to the "comment" edge.
func (m *CommentMentionMutation) ResetComment() {
	m.comment = nil
	m.clearedcomment = false
}

// Where appends a list predicates to the CommentMentionMutation builder.
func (m *CommentMentionMutation) Where(ps ...predicate.CommentMention) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CommentMentionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CommentMentionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.CommentMention, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CommentMentionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CommentMentionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (CommentMention).
func (m *CommentMentionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CommentMentionMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.comment != nil {
		fields = append(fields, commentmention.FieldCommentID)
	}
	if m.user != nil {
		fields = append(fields, commentmention.FieldUserID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CommentMentionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case commentmention.FieldCommentID:
		return m.CommentID()
	case commentmention.FieldUserID:
		return m.UserID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CommentMentionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case commentmention.FieldCommentID:
		return m.OldCommentID(ctx)
	case commentmention.FieldUserID:
		return m.OldUserID(ctx)
	}
	return nil, fmt.Errorf("unknown CommentMention field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CommentMentionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case commentmention.FieldCommentID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCommentID(v)
		return nil
	case commentmention.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	}
	return fmt.Errorf("unknown CommentMention field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CommentMentionMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CommentMentionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CommentMentionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown CommentMention numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CommentMentionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(commentmention.FieldCommentID) {
		fields = append(fields, commentmention.FieldCommentID)
	}
	if m.FieldCleared(commentmention.FieldUserID) {
		fields = append(fields, commentmention.FieldUserID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CommentMentionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CommentMentionMutation) ClearField(name string) error {
	switch name {
	case commentmention.FieldCommentID:
		m.ClearCommentID()
		return nil
	case commentmention.FieldUserID:
		m.ClearUserID()
		return nil
	}
	return fmt.Errorf("unknown CommentMention nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CommentMentionMutation) ResetField(name string) error {
	switch name {
	case commentmention.FieldCommentID:
		m.ResetCommentID()
		return nil
	case commentmention.FieldUserID:
		m.ResetUserID()
		return nil
	}
	return fmt.Errorf("unknown CommentMention field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CommentMentionMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, commentmention.EdgeUser)
	}
	if m.comment != nil {
		edges = append(edges, commentmention.EdgeComment)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CommentMentionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case commentmention.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case commentmention.EdgeComment:
		if id := m.comment; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CommentMentionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CommentMentionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CommentMentionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, commentmention.EdgeUser)
	}
	if m.clearedcomment {
		edges = append(edges, commentmention.EdgeComment)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CommentMentionMutation) EdgeCleared(name string) bool {
	switch name {
	case commentmention.EdgeUser:
		return m.cleareduser
	case commentmention.EdgeComment:
		return m.clearedcomment
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CommentMentionMutation) ClearEdge(name string) error {
	switch name {
	case commentmention.EdgeUser:
		m.ClearUser()
		return nil
	case commentmention.EdgeComment:
		m.ClearComment()
		return nil
	}
	return fmt.Errorf("unknown CommentMention unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CommentMentionMutation) ResetEdge(name string) error {
	switch name {
	case commentmention.EdgeUser:
		m.ResetUser()
		return nil
	case commentmention.EdgeComment:
		m.ResetComment()
		return nil
	}
	return fmt.Errorf("unknown CommentMention edge %s", name)
}

// CommentReportMutation represents an operation that mutates the CommentReport nodes in the graph.
type CommentReportMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	desc               *string
	status             *commentreport.Status
	created_at         *time.Time
	updated_at         *time.Time
	clearedFields      map[string]struct{}
	user               *int
	cleareduser        bool
	comment            *int
	clearedcomment     bool
	report_type        *int
	clearedreport_type bool
	done               bool
	oldValue           func(context.Context) (*CommentReport, error)
	predicates         []predicate.CommentReport
}

var _ ent.Mutation = (*CommentReportMutation)(nil)

// commentreportOption allows management of the mutation configuration using functional options.
type commentreportOption func(*CommentReportMutation)

// newCommentReportMutation creates new mutation for the CommentReport entity.
func newCommentReportMutation(c config, op Op, opts ...commentreportOption) *CommentReportMutation {
	m := &CommentReportMutation{
		config:        c,
		op:            op,
		typ:           TypeCommentReport,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCommentReportID sets the ID field of the mutation.
func withCommentReportID(id int) commentreportOption {
	return func(m *CommentReportMutation) {
		var (
			err   error
			once  sync.Once
			value *CommentReport
		)
		m.oldValue = func(ctx context.Context) (*CommentReport, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CommentReport.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCommentReport sets the old CommentReport of the mutation.
func withCommentReport(node *CommentReport) commentreportOption {
	return func(m *CommentReportMutation) {
		m.oldValue = func(context.Context) (*CommentReport, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CommentReportMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CommentReportMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CommentReportMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CommentReportMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CommentReport.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCommentID sets the "comment_id" field.
func (m *CommentReportMutation) SetCommentID(i int) {
	m.comment = &i
}

// CommentID returns the value of the "comment_id" field in the mutation.
func (m *CommentReportMutation) CommentID() (r int, exists bool) {
	v := m.comment
	if v == nil {
		return
	}
	return *v, true
}

// OldCommentID returns the old "comment_id" field's value of the CommentReport entity.
// If the CommentReport object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommentReportMutation) OldCommentID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCommentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCommentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCommentID: %w", err)
	}
	return oldValue.CommentID, nil
}

// ClearCommentID clears the value of the "comment_id" field.
func (m *CommentReportMutation) ClearCommentID() {
	m.comment = nil
	m.clearedFields[commentreport.FieldCommentID] = struct{}{}
}

// CommentIDCleared returns if the "comment_id" field was cleared in this mutation.
func (m *CommentReportMutation) CommentIDCleared() bool {
	_, ok := m.clearedFields[commentreport.FieldCommentID]
	return ok
}

// ResetCommentID resets all changes to the "comment_id" field.
func (m *CommentReportMutation) ResetCommentID() {
	m.comment = nil
	delete(m.clearedFields, commentreport.FieldCommentID)
}

// SetReportTypeID sets the "report_type_id" field.
func (m *CommentReportMutation) SetReportTypeID(i int) {
	m.report_type = &i
}

// ReportTypeID returns the value of the "report_type_id" field in the mutation.
func (m *CommentReportMutation) ReportTypeID() (r int, exists bool) {
	v := m.report_type
	if v == nil {
		return
	}
	return *v, true
}

// OldReportTypeID returns the old "report_type_id" field's value of the CommentReport entity.
// If the CommentReport object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommentReportMutation) OldReportTypeID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReportTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReportTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReportTypeID: %w", err)
	}
	return oldValue.ReportTypeID, nil
}

// ClearReportTypeID clears the value of the "report_type_id" field.
func (m *CommentReportMutation) ClearReportTypeID() {
	m.report_type = nil
	m.clearedFields[commentreport.FieldReportTypeID] = struct{}{}
}

// ReportTypeIDCleared returns if the "report_type_id" field was cleared in this mutation.
func (m *CommentReportMutation) ReportTypeIDCleared() bool {
	_, ok := m.clearedFields[commentreport.FieldReportTypeID]
	return ok
}

// ResetReportTypeID resets all changes to the "report_type_id" field.
func (m *CommentReportMutation) ResetReportTypeID() {
	m.report_type = nil
	delete(m.clearedFields, commentreport.FieldReportTypeID)
}

// SetReporterID sets the "reporter_id" field.
func (m *CommentReportMutation) SetReporterID(i int) {
	m.user = &i
}

// ReporterID returns the value of the "reporter_id" field in the mutation.
func (m *CommentReportMutation) ReporterID() (r int, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldReporterID returns the old "reporter_id" field's value of the CommentReport entity.
// If the CommentReport object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommentReportMutation) OldReporterID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReporterID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReporterID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReporterID: %w", err)
	}
	return oldValue.ReporterID, nil
}

// ClearReporterID clears the value of the "reporter_id" field.
func (m *CommentReportMutation) ClearReporterID() {
	m.user = nil
	m.clearedFields[commentreport.FieldReporterID] = struct{}{}
}

// ReporterIDCleared returns if the "reporter_id" field was cleared in this mutation.
func (m *CommentReportMutation) ReporterIDCleared() bool {
	_, ok := m.clearedFields[commentreport.FieldReporterID]
	return ok
}

// ResetReporterID resets all changes to the "reporter_id" field.
func (m *CommentReportMutation) ResetReporterID() {
	m.user = nil
	delete(m.clearedFields, commentreport.FieldReporterID)
}

// SetDesc sets the "desc" field.
func (m *CommentReportMutation) SetDesc(s string) {
	m.desc = &s
}

// Desc returns the value of the "desc" field in the mutation.
func (m *CommentReportMutation) Desc() (r string, exists bool) {
	v := m.desc
	if v == nil {
		return
	}
	return *v, true
}

// OldDesc returns the old "desc" field's value of the CommentReport entity.
// If the CommentReport object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommentReportMutation) OldDesc(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDesc is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDesc requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDesc: %w", err)
	}
	return oldValue.Desc, nil
}

// ClearDesc clears the value of the "desc" field.
func (m *CommentReportMutation) ClearDesc() {
	m.desc = nil
	m.clearedFields[commentreport.FieldDesc] = struct{}{}
}

// DescCleared returns if the "desc" field was cleared in this mutation.
func (m *CommentReportMutation) DescCleared() bool {
	_, ok := m.clearedFields[commentreport.FieldDesc]
	return ok
}

// ResetDesc resets all changes to the "desc" field.
func (m *CommentReportMutation) ResetDesc() {
	m.desc = nil
	delete(m.clearedFields, commentreport.FieldDesc)
}

// SetStatus sets the "status" field.
func (m *CommentReportMutation) SetStatus(c commentreport.Status) {
	m.status = &c
}

// Status returns the value of the "status" field in the mutation.
func (m *CommentReportMutation) Status() (r commentreport.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the CommentReport entity.
// If the CommentReport object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommentReportMutation) OldStatus(ctx context.Context) (v commentreport.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *CommentReportMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *CommentReportMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CommentReportMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the CommentReport entity.
// If the CommentReport object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommentReportMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CommentReportMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CommentReportMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CommentReportMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the CommentReport entity.
// If the CommentReport object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommentReportMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CommentReportMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *CommentReportMutation) SetUserID(id int) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *CommentReportMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *CommentReportMutation) UserCleared() bool {
	return m.ReporterIDCleared() || m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *CommentReportMutation) UserID() (id int, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *CommentReportMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *CommentReportMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// ClearComment clears the "comment" edge to the Comment entity.
func (m *CommentReportMutation) ClearComment() {
	m.clearedcomment = true
}

// CommentCleared reports if the "comment" edge to the Comment entity was cleared.
func (m *CommentReportMutation) CommentCleared() bool {
	return m.CommentIDCleared() || m.clearedcomment
}

// CommentIDs returns the "comment" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CommentID instead. It exists only for internal usage by the builders.
func (m *CommentReportMutation) CommentIDs() (ids []int) {
	if id := m.comment; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetComment resets all changes to the "comment" edge.
func (m *CommentReportMutation) ResetComment() {
	m.comment = nil
	m.clearedcomment = false
}

// ClearReportType clears the "report_type" edge to the ReportType entity.
func (m *CommentReportMutation) ClearReportType() {
	m.clearedreport_type = true
}

// ReportTypeCleared reports if the "report_type" edge to the ReportType entity was cleared.
func (m *CommentReportMutation) ReportTypeCleared() bool {
	return m.ReportTypeIDCleared() || m.clearedreport_type
}

// ReportTypeIDs returns the "report_type" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ReportTypeID instead. It exists only for internal usage by the builders.
func (m *CommentReportMutation) ReportTypeIDs() (ids []int) {
	if id := m.report_type; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetReportType resets all changes to the "report_type" edge.
func (m *CommentReportMutation) ResetReportType() {
	m.report_type = nil
	m.clearedreport_type = false
}

// Where appends a list predicates to the CommentReportMutation builder.
func (m *CommentReportMutation) Where(ps ...predicate.CommentReport) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CommentReportMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CommentReportMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.CommentReport, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CommentReportMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CommentReportMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (CommentReport).
func (m *CommentReportMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CommentReportMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.comment != nil {
		fields = append(fields, commentreport.FieldCommentID)
	}
	if m.report_type != nil {
		fields = append(fields, commentreport.FieldReportTypeID)
	}
	if m.user != nil {
		fields = append(fields, commentreport.FieldReporterID)
	}
	if m.desc != nil {
		fields = append(fields, commentreport.FieldDesc)
	}
	if m.status != nil {
		fields = append(fields, commentreport.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, commentreport.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, commentreport.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CommentReportMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case commentreport.FieldCommentID:
		return m.CommentID()
	case commentreport.FieldReportTypeID:
		return m.ReportTypeID()
	case commentreport.FieldReporterID:
		return m.ReporterID()
	case commentreport.FieldDesc:
		return m.Desc()
	case commentreport.FieldStatus:
		return m.Status()
	case commentreport.FieldCreatedAt:
		return m.CreatedAt()
	case commentreport.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CommentReportMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case commentreport.FieldCommentID:
		return m.OldCommentID(ctx)
	case commentreport.FieldReportTypeID:
		return m.OldReportTypeID(ctx)
	case commentreport.FieldReporterID:
		return m.OldReporterID(ctx)
	case commentreport.FieldDesc:
		return m.OldDesc(ctx)
	case commentreport.FieldStatus:
		return m.OldStatus(ctx)
	case commentreport.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case commentreport.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown CommentReport field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CommentReportMutation) SetField(name string, value ent.Value) error {
	switch name {
	case commentreport.FieldCommentID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCommentID(v)
		return nil
	case commentreport.FieldReportTypeID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReportTypeID(v)
		return nil
	case commentreport.FieldReporterID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReporterID(v)
		return nil
	case commentreport.FieldDesc:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDesc(v)
		return nil
	case commentreport.FieldStatus:
		v, ok := value.(commentreport.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case commentreport.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case commentreport.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown CommentReport field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CommentReportMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CommentReportMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CommentReportMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown CommentReport numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CommentReportMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(commentreport.FieldCommentID) {
		fields = append(fields, commentreport.FieldCommentID)
	}
	if m.FieldCleared(commentreport.FieldReportTypeID) {
		fields = append(fields, commentreport.FieldReportTypeID)
	}
	if m.FieldCleared(commentreport.FieldReporterID) {
		fields = append(fields, commentreport.FieldReporterID)
	}
	if m.FieldCleared(commentreport.FieldDesc) {
		fields = append(fields, commentreport.FieldDesc)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CommentReportMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CommentReportMutation) ClearField(name string) error {
	switch name {
	case commentreport.FieldCommentID:
		m.ClearCommentID()
		return nil
	case commentreport.FieldReportTypeID:
		m.ClearReportTypeID()
		return nil
	case commentreport.FieldReporterID:
		m.ClearReporterID()
		return nil
	case commentreport.FieldDesc:
		m.ClearDesc()
		return nil
	}
	return fmt.Errorf("unknown CommentReport nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CommentReportMutation) ResetField(name string) error {
	switch name {
	case commentreport.FieldCommentID:
		m.ResetCommentID()
		return nil
	case commentreport.FieldReportTypeID:
		m.ResetReportTypeID()
		return nil
	case commentreport.FieldReporterID:
		m.ResetReporterID()
		return nil
	case commentreport.FieldDesc:
		m.ResetDesc()
		return nil
	case commentreport.FieldStatus:
		m.ResetStatus()
		return nil
	case commentreport.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case commentreport.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown CommentReport field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CommentReportMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.user != nil {
		edges = append(edges, commentreport.EdgeUser)
	}
	if m.comment != nil {
		edges = append(edges, commentreport.EdgeComment)
	}
	if m.report_type != nil {
		edges = append(edges, commentreport.EdgeReportType)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CommentReportMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case commentreport.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case commentreport.EdgeComment:
		if id := m.comment; id != nil {
			return []ent.Value{*id}
		}
	case commentreport.EdgeReportType:
		if id := m.report_type; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CommentReportMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CommentReportMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CommentReportMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleareduser {
		edges = append(edges, commentreport.EdgeUser)
	}
	if m.clearedcomment {
		edges = append(edges, commentreport.EdgeComment)
	}
	if m.clearedreport_type {
		edges = append(edges, commentreport.EdgeReportType)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CommentReportMutation) EdgeCleared(name string) bool {
	switch name {
	case commentreport.EdgeUser:
		return m.cleareduser
	case commentreport.EdgeComment:
		return m.clearedcomment
	case commentreport.EdgeReportType:
		return m.clearedreport_type
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CommentReportMutation) ClearEdge(name string) error {
	switch name {
	case commentreport.EdgeUser:
		m.ClearUser()
		return nil
	case commentreport.EdgeComment:
		m.ClearComment()
		return nil
	case commentreport.EdgeReportType:
		m.ClearReportType()
		return nil
	}
	return fmt.Errorf("unknown CommentReport unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CommentReportMutation) ResetEdge(name string) error {
	switch name {
	case commentreport.EdgeUser:
		m.ResetUser()
		return nil
	case commentreport.EdgeComment:
		m.ResetComment()
		return nil
	case commentreport.EdgeReportType:
		m.ResetReportType()
		return nil
	}
	return fmt.Errorf("unknown CommentReport edge %s", name)
}

// HashtagMutation represents an operation that mutates the Hashtag nodes in the graph.
type HashtagMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	value                *string
	used_count           *int
	addused_count        *int
	clearedFields        map[string]struct{}
	board_hashtag        map[int]struct{}
	removedboard_hashtag map[int]struct{}
	clearedboard_hashtag bool
	done                 bool
	oldValue             func(context.Context) (*Hashtag, error)
	predicates           []predicate.Hashtag
}

var _ ent.Mutation = (*HashtagMutation)(nil)

// hashtagOption allows management of the mutation configuration using functional options.
type hashtagOption func(*HashtagMutation)

// newHashtagMutation creates new mutation for the Hashtag entity.
func newHashtagMutation(c config, op Op, opts ...hashtagOption) *HashtagMutation {
	m := &HashtagMutation{
		config:        c,
		op:            op,
		typ:           TypeHashtag,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withHashtagID sets the ID field of the mutation.
func withHashtagID(id int) hashtagOption {
	return func(m *HashtagMutation) {
		var (
			err   error
			once  sync.Once
			value *Hashtag
		)
		m.oldValue = func(ctx context.Context) (*Hashtag, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Hashtag.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withHashtag sets the old Hashtag of the mutation.
func withHashtag(node *Hashtag) hashtagOption {
	return func(m *HashtagMutation) {
		m.oldValue = func(context.Context) (*Hashtag, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m HashtagMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m HashtagMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *HashtagMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *HashtagMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Hashtag.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetValue sets the "value" field.
func (m *HashtagMutation) SetValue(s string) {
	m.value = &s
}

// Value returns the value of the "value" field in the mutation.
func (m *HashtagMutation) Value() (r string, exists bool) {
	v := m.value
	if v == nil {
		return
	}
	return *v, true
}

// OldValue returns the old "value" field's value of the Hashtag entity.
// If the Hashtag object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HashtagMutation) OldValue(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValue: %w", err)
	}
	return oldValue.Value, nil
}

// ResetValue resets all changes to the "value" field.
func (m *HashtagMutation) ResetValue() {
	m.value = nil
}

// SetUsedCount sets the "used_count" field.
func (m *HashtagMutation) SetUsedCount(i int) {
	m.used_count = &i
	m.addused_count = nil
}

// UsedCount returns the value of the "used_count" field in the mutation.
func (m *HashtagMutation) UsedCount() (r int, exists bool) {
	v := m.used_count
	if v == nil {
		return
	}
	return *v, true
}

// OldUsedCount returns the old "used_count" field's value of the Hashtag entity.
// If the Hashtag object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HashtagMutation) OldUsedCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsedCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsedCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsedCount: %w", err)
	}
	return oldValue.UsedCount, nil
}

// AddUsedCount adds i to the "used_count" field.
func (m *HashtagMutation) AddUsedCount(i int) {
	if m.addused_count != nil {
		*m.addused_count += i
	} else {
		m.addused_count = &i
	}
}

// AddedUsedCount returns the value that was added to the "used_count" field in this mutation.
func (m *HashtagMutation) AddedUsedCount() (r int, exists bool) {
	v := m.addused_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetUsedCount resets all changes to the "used_count" field.
func (m *HashtagMutation) ResetUsedCount() {
	m.used_count = nil
	m.addused_count = nil
}

// AddBoardHashtagIDs adds the "board_hashtag" edge to the BoardHashtag entity by ids.
func (m *HashtagMutation) AddBoardHashtagIDs(ids ...int) {
	if m.board_hashtag == nil {
		m.board_hashtag = make(map[int]struct{})
	}
	for i := range ids {
		m.board_hashtag[ids[i]] = struct{}{}
	}
}

// ClearBoardHashtag clears the "board_hashtag" edge to the BoardHashtag entity.
func (m *HashtagMutation) ClearBoardHashtag() {
	m.clearedboard_hashtag = true
}

// BoardHashtagCleared reports if the "board_hashtag" edge to the BoardHashtag entity was cleared.
func (m *HashtagMutation) BoardHashtagCleared() bool {
	return m.clearedboard_hashtag
}

// RemoveBoardHashtagIDs removes the "board_hashtag" edge to the BoardHashtag entity by IDs.
func (m *HashtagMutation) RemoveBoardHashtagIDs(ids ...int) {
	if m.removedboard_hashtag == nil {
		m.removedboard_hashtag = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.board_hashtag, ids[i])
		m.removedboard_hashtag[ids[i]] = struct{}{}
	}
}

// RemovedBoardHashtag returns the removed IDs of the "board_hashtag" edge to the BoardHashtag entity.
func (m *HashtagMutation) RemovedBoardHashtagIDs() (ids []int) {
	for id := range m.removedboard_hashtag {
		ids = append(ids, id)
	}
	return
}

// BoardHashtagIDs returns the "board_hashtag" edge IDs in the mutation.
func (m *HashtagMutation) BoardHashtagIDs() (ids []int) {
	for id := range m.board_hashtag {
		ids = append(ids, id)
	}
	return
}

// ResetBoardHashtag resets all changes to the "board_hashtag" edge.
func (m *HashtagMutation) ResetBoardHashtag() {
	m.board_hashtag = nil
	m.clearedboard_hashtag = false
	m.removedboard_hashtag = nil
}

// Where appends a list predicates to the HashtagMutation builder.
func (m *HashtagMutation) Where(ps ...predicate.Hashtag) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the HashtagMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *HashtagMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Hashtag, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *HashtagMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *HashtagMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Hashtag).
func (m *HashtagMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *HashtagMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.value != nil {
		fields = append(fields, hashtag.FieldValue)
	}
	if m.used_count != nil {
		fields = append(fields, hashtag.FieldUsedCount)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *HashtagMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case hashtag.FieldValue:
		return m.Value()
	case hashtag.FieldUsedCount:
		return m.UsedCount()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *HashtagMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case hashtag.FieldValue:
		return m.OldValue(ctx)
	case hashtag.FieldUsedCount:
		return m.OldUsedCount(ctx)
	}
	return nil, fmt.Errorf("unknown Hashtag field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HashtagMutation) SetField(name string, value ent.Value) error {
	switch name {
	case hashtag.FieldValue:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValue(v)
		return nil
	case hashtag.FieldUsedCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsedCount(v)
		return nil
	}
	return fmt.Errorf("unknown Hashtag field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *HashtagMutation) AddedFields() []string {
	var fields []string
	if m.addused_count != nil {
		fields = append(fields, hashtag.FieldUsedCount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *HashtagMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case hashtag.FieldUsedCount:
		return m.AddedUsedCount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HashtagMutation) AddField(name string, value ent.Value) error {
	switch name {
	case hashtag.FieldUsedCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUsedCount(v)
		return nil
	}
	return fmt.Errorf("unknown Hashtag numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *HashtagMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *HashtagMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *HashtagMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Hashtag nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *HashtagMutation) ResetField(name string) error {
	switch name {
	case hashtag.FieldValue:
		m.ResetValue()
		return nil
	case hashtag.FieldUsedCount:
		m.ResetUsedCount()
		return nil
	}
	return fmt.Errorf("unknown Hashtag field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *HashtagMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.board_hashtag != nil {
		edges = append(edges, hashtag.EdgeBoardHashtag)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *HashtagMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case hashtag.EdgeBoardHashtag:
		ids := make([]ent.Value, 0, len(m.board_hashtag))
		for id := range m.board_hashtag {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *HashtagMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedboard_hashtag != nil {
		edges = append(edges, hashtag.EdgeBoardHashtag)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *HashtagMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case hashtag.EdgeBoardHashtag:
		ids := make([]ent.Value, 0, len(m.removedboard_hashtag))
		for id := range m.removedboard_hashtag {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *HashtagMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedboard_hashtag {
		edges = append(edges, hashtag.EdgeBoardHashtag)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *HashtagMutation) EdgeCleared(name string) bool {
	switch name {
	case hashtag.EdgeBoardHashtag:
		return m.clearedboard_hashtag
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *HashtagMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Hashtag unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *HashtagMutation) ResetEdge(name string) error {
	switch name {
	case hashtag.EdgeBoardHashtag:
		m.ResetBoardHashtag()
		return nil
	}
	return fmt.Errorf("unknown Hashtag edge %s", name)
}

// ReportTypeMutation represents an operation that mutates the ReportType nodes in the graph.
type ReportTypeMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int
	description           *string
	in_active             *bool
	order_num             *int
	addorder_num          *int
	clearedFields         map[string]struct{}
	comment_report        *int
	clearedcomment_report bool
	board_report          *int
	clearedboard_report   bool
	done                  bool
	oldValue              func(context.Context) (*ReportType, error)
	predicates            []predicate.ReportType
}

var _ ent.Mutation = (*ReportTypeMutation)(nil)

// reporttypeOption allows management of the mutation configuration using functional options.
type reporttypeOption func(*ReportTypeMutation)

// newReportTypeMutation creates new mutation for the ReportType entity.
func newReportTypeMutation(c config, op Op, opts ...reporttypeOption) *ReportTypeMutation {
	m := &ReportTypeMutation{
		config:        c,
		op:            op,
		typ:           TypeReportType,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withReportTypeID sets the ID field of the mutation.
func withReportTypeID(id int) reporttypeOption {
	return func(m *ReportTypeMutation) {
		var (
			err   error
			once  sync.Once
			value *ReportType
		)
		m.oldValue = func(ctx context.Context) (*ReportType, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ReportType.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withReportType sets the old ReportType of the mutation.
func withReportType(node *ReportType) reporttypeOption {
	return func(m *ReportTypeMutation) {
		m.oldValue = func(context.Context) (*ReportType, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ReportTypeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ReportTypeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ReportTypeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ReportTypeMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ReportType.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDescription sets the "description" field.
func (m *ReportTypeMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ReportTypeMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the ReportType entity.
// If the ReportType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReportTypeMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *ReportTypeMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[reporttype.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *ReportTypeMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[reporttype.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *ReportTypeMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, reporttype.FieldDescription)
}

// SetInActive sets the "in_active" field.
func (m *ReportTypeMutation) SetInActive(b bool) {
	m.in_active = &b
}

// InActive returns the value of the "in_active" field in the mutation.
func (m *ReportTypeMutation) InActive() (r bool, exists bool) {
	v := m.in_active
	if v == nil {
		return
	}
	return *v, true
}

// OldInActive returns the old "in_active" field's value of the ReportType entity.
// If the ReportType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReportTypeMutation) OldInActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInActive: %w", err)
	}
	return oldValue.InActive, nil
}

// ResetInActive resets all changes to the "in_active" field.
func (m *ReportTypeMutation) ResetInActive() {
	m.in_active = nil
}

// SetOrderNum sets the "order_num" field.
func (m *ReportTypeMutation) SetOrderNum(i int) {
	m.order_num = &i
	m.addorder_num = nil
}

// OrderNum returns the value of the "order_num" field in the mutation.
func (m *ReportTypeMutation) OrderNum() (r int, exists bool) {
	v := m.order_num
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderNum returns the old "order_num" field's value of the ReportType entity.
// If the ReportType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReportTypeMutation) OldOrderNum(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderNum is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderNum requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderNum: %w", err)
	}
	return oldValue.OrderNum, nil
}

// AddOrderNum adds i to the "order_num" field.
func (m *ReportTypeMutation) AddOrderNum(i int) {
	if m.addorder_num != nil {
		*m.addorder_num += i
	} else {
		m.addorder_num = &i
	}
}

// AddedOrderNum returns the value that was added to the "order_num" field in this mutation.
func (m *ReportTypeMutation) AddedOrderNum() (r int, exists bool) {
	v := m.addorder_num
	if v == nil {
		return
	}
	return *v, true
}

// ResetOrderNum resets all changes to the "order_num" field.
func (m *ReportTypeMutation) ResetOrderNum() {
	m.order_num = nil
	m.addorder_num = nil
}

// SetCommentReportID sets the "comment_report" edge to the CommentReport entity by id.
func (m *ReportTypeMutation) SetCommentReportID(id int) {
	m.comment_report = &id
}

// ClearCommentReport clears the "comment_report" edge to the CommentReport entity.
func (m *ReportTypeMutation) ClearCommentReport() {
	m.clearedcomment_report = true
}

// CommentReportCleared reports if the "comment_report" edge to the CommentReport entity was cleared.
func (m *ReportTypeMutation) CommentReportCleared() bool {
	return m.clearedcomment_report
}

// CommentReportID returns the "comment_report" edge ID in the mutation.
func (m *ReportTypeMutation) CommentReportID() (id int, exists bool) {
	if m.comment_report != nil {
		return *m.comment_report, true
	}
	return
}

// CommentReportIDs returns the "comment_report" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CommentReportID instead. It exists only for internal usage by the builders.
func (m *ReportTypeMutation) CommentReportIDs() (ids []int) {
	if id := m.comment_report; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCommentReport resets all changes to the "comment_report" edge.
func (m *ReportTypeMutation) ResetCommentReport() {
	m.comment_report = nil
	m.clearedcomment_report = false
}

// SetBoardReportID sets the "board_report" edge to the BoardReport entity by id.
func (m *ReportTypeMutation) SetBoardReportID(id int) {
	m.board_report = &id
}

// ClearBoardReport clears the "board_report" edge to the BoardReport entity.
func (m *ReportTypeMutation) ClearBoardReport() {
	m.clearedboard_report = true
}

// BoardReportCleared reports if the "board_report" edge to the BoardReport entity was cleared.
func (m *ReportTypeMutation) BoardReportCleared() bool {
	return m.clearedboard_report
}

// BoardReportID returns the "board_report" edge ID in the mutation.
func (m *ReportTypeMutation) BoardReportID() (id int, exists bool) {
	if m.board_report != nil {
		return *m.board_report, true
	}
	return
}

// BoardReportIDs returns the "board_report" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// BoardReportID instead. It exists only for internal usage by the builders.
func (m *ReportTypeMutation) BoardReportIDs() (ids []int) {
	if id := m.board_report; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetBoardReport resets all changes to the "board_report" edge.
func (m *ReportTypeMutation) ResetBoardReport() {
	m.board_report = nil
	m.clearedboard_report = false
}

// Where appends a list predicates to the ReportTypeMutation builder.
func (m *ReportTypeMutation) Where(ps ...predicate.ReportType) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ReportTypeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ReportTypeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ReportType, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ReportTypeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ReportTypeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ReportType).
func (m *ReportTypeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ReportTypeMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.description != nil {
		fields = append(fields, reporttype.FieldDescription)
	}
	if m.in_active != nil {
		fields = append(fields, reporttype.FieldInActive)
	}
	if m.order_num != nil {
		fields = append(fields, reporttype.FieldOrderNum)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ReportTypeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case reporttype.FieldDescription:
		return m.Description()
	case reporttype.FieldInActive:
		return m.InActive()
	case reporttype.FieldOrderNum:
		return m.OrderNum()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ReportTypeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case reporttype.FieldDescription:
		return m.OldDescription(ctx)
	case reporttype.FieldInActive:
		return m.OldInActive(ctx)
	case reporttype.FieldOrderNum:
		return m.OldOrderNum(ctx)
	}
	return nil, fmt.Errorf("unknown ReportType field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ReportTypeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case reporttype.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case reporttype.FieldInActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInActive(v)
		return nil
	case reporttype.FieldOrderNum:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderNum(v)
		return nil
	}
	return fmt.Errorf("unknown ReportType field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ReportTypeMutation) AddedFields() []string {
	var fields []string
	if m.addorder_num != nil {
		fields = append(fields, reporttype.FieldOrderNum)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ReportTypeMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case reporttype.FieldOrderNum:
		return m.AddedOrderNum()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ReportTypeMutation) AddField(name string, value ent.Value) error {
	switch name {
	case reporttype.FieldOrderNum:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrderNum(v)
		return nil
	}
	return fmt.Errorf("unknown ReportType numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ReportTypeMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(reporttype.FieldDescription) {
		fields = append(fields, reporttype.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ReportTypeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ReportTypeMutation) ClearField(name string) error {
	switch name {
	case reporttype.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown ReportType nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ReportTypeMutation) ResetField(name string) error {
	switch name {
	case reporttype.FieldDescription:
		m.ResetDescription()
		return nil
	case reporttype.FieldInActive:
		m.ResetInActive()
		return nil
	case reporttype.FieldOrderNum:
		m.ResetOrderNum()
		return nil
	}
	return fmt.Errorf("unknown ReportType field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ReportTypeMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.comment_report != nil {
		edges = append(edges, reporttype.EdgeCommentReport)
	}
	if m.board_report != nil {
		edges = append(edges, reporttype.EdgeBoardReport)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ReportTypeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case reporttype.EdgeCommentReport:
		if id := m.comment_report; id != nil {
			return []ent.Value{*id}
		}
	case reporttype.EdgeBoardReport:
		if id := m.board_report; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ReportTypeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ReportTypeMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ReportTypeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedcomment_report {
		edges = append(edges, reporttype.EdgeCommentReport)
	}
	if m.clearedboard_report {
		edges = append(edges, reporttype.EdgeBoardReport)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ReportTypeMutation) EdgeCleared(name string) bool {
	switch name {
	case reporttype.EdgeCommentReport:
		return m.clearedcomment_report
	case reporttype.EdgeBoardReport:
		return m.clearedboard_report
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ReportTypeMutation) ClearEdge(name string) error {
	switch name {
	case reporttype.EdgeCommentReport:
		m.ClearCommentReport()
		return nil
	case reporttype.EdgeBoardReport:
		m.ClearBoardReport()
		return nil
	}
	return fmt.Errorf("unknown ReportType unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ReportTypeMutation) ResetEdge(name string) error {
	switch name {
	case reporttype.EdgeCommentReport:
		m.ResetCommentReport()
		return nil
	case reporttype.EdgeBoardReport:
		m.ResetBoardReport()
		return nil
	}
	return fmt.Errorf("unknown ReportType edge %s", name)
}

// TopicMutation represents an operation that mutates the Topic nodes in the graph.
type TopicMutation struct {
	config
	op              Op
	typ             string
	id              *int
	name            *string
	created_at      *time.Time
	clearedFields   map[string]struct{}
	boards          map[int]struct{}
	removedboards   map[int]struct{}
	clearedboards   bool
	category        *int
	clearedcategory bool
	done            bool
	oldValue        func(context.Context) (*Topic, error)
	predicates      []predicate.Topic
}

var _ ent.Mutation = (*TopicMutation)(nil)

// topicOption allows management of the mutation configuration using functional options.
type topicOption func(*TopicMutation)

// newTopicMutation creates new mutation for the Topic entity.
func newTopicMutation(c config, op Op, opts ...topicOption) *TopicMutation {
	m := &TopicMutation{
		config:        c,
		op:            op,
		typ:           TypeTopic,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTopicID sets the ID field of the mutation.
func withTopicID(id int) topicOption {
	return func(m *TopicMutation) {
		var (
			err   error
			once  sync.Once
			value *Topic
		)
		m.oldValue = func(ctx context.Context) (*Topic, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Topic.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTopic sets the old Topic of the mutation.
func withTopic(node *Topic) topicOption {
	return func(m *TopicMutation) {
		m.oldValue = func(context.Context) (*Topic, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TopicMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TopicMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TopicMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TopicMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Topic.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCategoryID sets the "category_id" field.
func (m *TopicMutation) SetCategoryID(i int) {
	m.category = &i
}

// CategoryID returns the value of the "category_id" field in the mutation.
func (m *TopicMutation) CategoryID() (r int, exists bool) {
	v := m.category
	if v == nil {
		return
	}
	return *v, true
}

// OldCategoryID returns the old "category_id" field's value of the Topic entity.
// If the Topic object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TopicMutation) OldCategoryID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCategoryID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCategoryID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCategoryID: %w", err)
	}
	return oldValue.CategoryID, nil
}

// ClearCategoryID clears the value of the "category_id" field.
func (m *TopicMutation) ClearCategoryID() {
	m.category = nil
	m.clearedFields[topic.FieldCategoryID] = struct{}{}
}

// CategoryIDCleared returns if the "category_id" field was cleared in this mutation.
func (m *TopicMutation) CategoryIDCleared() bool {
	_, ok := m.clearedFields[topic.FieldCategoryID]
	return ok
}

// ResetCategoryID resets all changes to the "category_id" field.
func (m *TopicMutation) ResetCategoryID() {
	m.category = nil
	delete(m.clearedFields, topic.FieldCategoryID)
}

// SetName sets the "name" field.
func (m *TopicMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TopicMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Topic entity.
// If the Topic object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TopicMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *TopicMutation) ResetName() {
	m.name = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *TopicMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TopicMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Topic entity.
// If the Topic object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TopicMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TopicMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddBoardIDs adds the "boards" edge to the Board entity by ids.
func (m *TopicMutation) AddBoardIDs(ids ...int) {
	if m.boards == nil {
		m.boards = make(map[int]struct{})
	}
	for i := range ids {
		m.boards[ids[i]] = struct{}{}
	}
}

// ClearBoards clears the "boards" edge to the Board entity.
func (m *TopicMutation) ClearBoards() {
	m.clearedboards = true
}

// BoardsCleared reports if the "boards" edge to the Board entity was cleared.
func (m *TopicMutation) BoardsCleared() bool {
	return m.clearedboards
}

// RemoveBoardIDs removes the "boards" edge to the Board entity by IDs.
func (m *TopicMutation) RemoveBoardIDs(ids ...int) {
	if m.removedboards == nil {
		m.removedboards = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.boards, ids[i])
		m.removedboards[ids[i]] = struct{}{}
	}
}

// RemovedBoards returns the removed IDs of the "boards" edge to the Board entity.
func (m *TopicMutation) RemovedBoardsIDs() (ids []int) {
	for id := range m.removedboards {
		ids = append(ids, id)
	}
	return
}

// BoardsIDs returns the "boards" edge IDs in the mutation.
func (m *TopicMutation) BoardsIDs() (ids []int) {
	for id := range m.boards {
		ids = append(ids, id)
	}
	return
}

// ResetBoards resets all changes to the "boards" edge.
func (m *TopicMutation) ResetBoards() {
	m.boards = nil
	m.clearedboards = false
	m.removedboards = nil
}

// ClearCategory clears the "category" edge to the Category entity.
func (m *TopicMutation) ClearCategory() {
	m.clearedcategory = true
}

// CategoryCleared reports if the "category" edge to the Category entity was cleared.
func (m *TopicMutation) CategoryCleared() bool {
	return m.CategoryIDCleared() || m.clearedcategory
}

// CategoryIDs returns the "category" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CategoryID instead. It exists only for internal usage by the builders.
func (m *TopicMutation) CategoryIDs() (ids []int) {
	if id := m.category; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCategory resets all changes to the "category" edge.
func (m *TopicMutation) ResetCategory() {
	m.category = nil
	m.clearedcategory = false
}

// Where appends a list predicates to the TopicMutation builder.
func (m *TopicMutation) Where(ps ...predicate.Topic) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TopicMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TopicMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Topic, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TopicMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TopicMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Topic).
func (m *TopicMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TopicMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.category != nil {
		fields = append(fields, topic.FieldCategoryID)
	}
	if m.name != nil {
		fields = append(fields, topic.FieldName)
	}
	if m.created_at != nil {
		fields = append(fields, topic.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TopicMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case topic.FieldCategoryID:
		return m.CategoryID()
	case topic.FieldName:
		return m.Name()
	case topic.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TopicMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case topic.FieldCategoryID:
		return m.OldCategoryID(ctx)
	case topic.FieldName:
		return m.OldName(ctx)
	case topic.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Topic field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TopicMutation) SetField(name string, value ent.Value) error {
	switch name {
	case topic.FieldCategoryID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCategoryID(v)
		return nil
	case topic.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case topic.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Topic field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TopicMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TopicMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TopicMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Topic numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TopicMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(topic.FieldCategoryID) {
		fields = append(fields, topic.FieldCategoryID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TopicMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TopicMutation) ClearField(name string) error {
	switch name {
	case topic.FieldCategoryID:
		m.ClearCategoryID()
		return nil
	}
	return fmt.Errorf("unknown Topic nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TopicMutation) ResetField(name string) error {
	switch name {
	case topic.FieldCategoryID:
		m.ResetCategoryID()
		return nil
	case topic.FieldName:
		m.ResetName()
		return nil
	case topic.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Topic field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TopicMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.boards != nil {
		edges = append(edges, topic.EdgeBoards)
	}
	if m.category != nil {
		edges = append(edges, topic.EdgeCategory)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TopicMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case topic.EdgeBoards:
		ids := make([]ent.Value, 0, len(m.boards))
		for id := range m.boards {
			ids = append(ids, id)
		}
		return ids
	case topic.EdgeCategory:
		if id := m.category; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TopicMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedboards != nil {
		edges = append(edges, topic.EdgeBoards)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TopicMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case topic.EdgeBoards:
		ids := make([]ent.Value, 0, len(m.removedboards))
		for id := range m.removedboards {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TopicMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedboards {
		edges = append(edges, topic.EdgeBoards)
	}
	if m.clearedcategory {
		edges = append(edges, topic.EdgeCategory)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TopicMutation) EdgeCleared(name string) bool {
	switch name {
	case topic.EdgeBoards:
		return m.clearedboards
	case topic.EdgeCategory:
		return m.clearedcategory
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TopicMutation) ClearEdge(name string) error {
	switch name {
	case topic.EdgeCategory:
		m.ClearCategory()
		return nil
	}
	return fmt.Errorf("unknown Topic unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TopicMutation) ResetEdge(name string) error {
	switch name {
	case topic.EdgeBoards:
		m.ResetBoards()
		return nil
	case topic.EdgeCategory:
		m.ResetCategory()
		return nil
	}
	return fmt.Errorf("unknown Topic edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int
	email                  *string
	password               *string
	name                   *string
	created_at             *time.Time
	clearedFields          map[string]struct{}
	boards                 map[int]struct{}
	removedboards          map[int]struct{}
	clearedboards          bool
	board_like             map[int]struct{}
	removedboard_like      map[int]struct{}
	clearedboard_like      bool
	book_marks             map[int]struct{}
	removedbook_marks      map[int]struct{}
	clearedbook_marks      bool
	comment_like           map[int]struct{}
	removedcomment_like    map[int]struct{}
	clearedcomment_like    bool
	comments               map[int]struct{}
	removedcomments        map[int]struct{}
	clearedcomments        bool
	comment_mention        map[int]struct{}
	removedcomment_mention map[int]struct{}
	clearedcomment_mention bool
	board_report           map[int]struct{}
	removedboard_report    map[int]struct{}
	clearedboard_report    bool
	comment_report         map[int]struct{}
	removedcomment_report  map[int]struct{}
	clearedcomment_report  bool
	done                   bool
	oldValue               func(context.Context) (*User, error)
	predicates             []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddBoardIDs adds the "boards" edge to the Board entity by ids.
func (m *UserMutation) AddBoardIDs(ids ...int) {
	if m.boards == nil {
		m.boards = make(map[int]struct{})
	}
	for i := range ids {
		m.boards[ids[i]] = struct{}{}
	}
}

// ClearBoards clears the "boards" edge to the Board entity.
func (m *UserMutation) ClearBoards() {
	m.clearedboards = true
}

// BoardsCleared reports if the "boards" edge to the Board entity was cleared.
func (m *UserMutation) BoardsCleared() bool {
	return m.clearedboards
}

// RemoveBoardIDs removes the "boards" edge to the Board entity by IDs.
func (m *UserMutation) RemoveBoardIDs(ids ...int) {
	if m.removedboards == nil {
		m.removedboards = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.boards, ids[i])
		m.removedboards[ids[i]] = struct{}{}
	}
}

// RemovedBoards returns the removed IDs of the "boards" edge to the Board entity.
func (m *UserMutation) RemovedBoardsIDs() (ids []int) {
	for id := range m.removedboards {
		ids = append(ids, id)
	}
	return
}

// BoardsIDs returns the "boards" edge IDs in the mutation.
func (m *UserMutation) BoardsIDs() (ids []int) {
	for id := range m.boards {
		ids = append(ids, id)
	}
	return
}

// ResetBoards resets all changes to the "boards" edge.
func (m *UserMutation) ResetBoards() {
	m.boards = nil
	m.clearedboards = false
	m.removedboards = nil
}

// AddBoardLikeIDs adds the "board_like" edge to the BoardLike entity by ids.
func (m *UserMutation) AddBoardLikeIDs(ids ...int) {
	if m.board_like == nil {
		m.board_like = make(map[int]struct{})
	}
	for i := range ids {
		m.board_like[ids[i]] = struct{}{}
	}
}

// ClearBoardLike clears the "board_like" edge to the BoardLike entity.
func (m *UserMutation) ClearBoardLike() {
	m.clearedboard_like = true
}

// BoardLikeCleared reports if the "board_like" edge to the BoardLike entity was cleared.
func (m *UserMutation) BoardLikeCleared() bool {
	return m.clearedboard_like
}

// RemoveBoardLikeIDs removes the "board_like" edge to the BoardLike entity by IDs.
func (m *UserMutation) RemoveBoardLikeIDs(ids ...int) {
	if m.removedboard_like == nil {
		m.removedboard_like = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.board_like, ids[i])
		m.removedboard_like[ids[i]] = struct{}{}
	}
}

// RemovedBoardLike returns the removed IDs of the "board_like" edge to the BoardLike entity.
func (m *UserMutation) RemovedBoardLikeIDs() (ids []int) {
	for id := range m.removedboard_like {
		ids = append(ids, id)
	}
	return
}

// BoardLikeIDs returns the "board_like" edge IDs in the mutation.
func (m *UserMutation) BoardLikeIDs() (ids []int) {
	for id := range m.board_like {
		ids = append(ids, id)
	}
	return
}

// ResetBoardLike resets all changes to the "board_like" edge.
func (m *UserMutation) ResetBoardLike() {
	m.board_like = nil
	m.clearedboard_like = false
	m.removedboard_like = nil
}

// AddBookMarkIDs adds the "book_marks" edge to the BookMark entity by ids.
func (m *UserMutation) AddBookMarkIDs(ids ...int) {
	if m.book_marks == nil {
		m.book_marks = make(map[int]struct{})
	}
	for i := range ids {
		m.book_marks[ids[i]] = struct{}{}
	}
}

// ClearBookMarks clears the "book_marks" edge to the BookMark entity.
func (m *UserMutation) ClearBookMarks() {
	m.clearedbook_marks = true
}

// BookMarksCleared reports if the "book_marks" edge to the BookMark entity was cleared.
func (m *UserMutation) BookMarksCleared() bool {
	return m.clearedbook_marks
}

// RemoveBookMarkIDs removes the "book_marks" edge to the BookMark entity by IDs.
func (m *UserMutation) RemoveBookMarkIDs(ids ...int) {
	if m.removedbook_marks == nil {
		m.removedbook_marks = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.book_marks, ids[i])
		m.removedbook_marks[ids[i]] = struct{}{}
	}
}

// RemovedBookMarks returns the removed IDs of the "book_marks" edge to the BookMark entity.
func (m *UserMutation) RemovedBookMarksIDs() (ids []int) {
	for id := range m.removedbook_marks {
		ids = append(ids, id)
	}
	return
}

// BookMarksIDs returns the "book_marks" edge IDs in the mutation.
func (m *UserMutation) BookMarksIDs() (ids []int) {
	for id := range m.book_marks {
		ids = append(ids, id)
	}
	return
}

// ResetBookMarks resets all changes to the "book_marks" edge.
func (m *UserMutation) ResetBookMarks() {
	m.book_marks = nil
	m.clearedbook_marks = false
	m.removedbook_marks = nil
}

// AddCommentLikeIDs adds the "comment_like" edge to the CommentLike entity by ids.
func (m *UserMutation) AddCommentLikeIDs(ids ...int) {
	if m.comment_like == nil {
		m.comment_like = make(map[int]struct{})
	}
	for i := range ids {
		m.comment_like[ids[i]] = struct{}{}
	}
}

// ClearCommentLike clears the "comment_like" edge to the CommentLike entity.
func (m *UserMutation) ClearCommentLike() {
	m.clearedcomment_like = true
}

// CommentLikeCleared reports if the "comment_like" edge to the CommentLike entity was cleared.
func (m *UserMutation) CommentLikeCleared() bool {
	return m.clearedcomment_like
}

// RemoveCommentLikeIDs removes the "comment_like" edge to the CommentLike entity by IDs.
func (m *UserMutation) RemoveCommentLikeIDs(ids ...int) {
	if m.removedcomment_like == nil {
		m.removedcomment_like = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.comment_like, ids[i])
		m.removedcomment_like[ids[i]] = struct{}{}
	}
}

// RemovedCommentLike returns the removed IDs of the "comment_like" edge to the CommentLike entity.
func (m *UserMutation) RemovedCommentLikeIDs() (ids []int) {
	for id := range m.removedcomment_like {
		ids = append(ids, id)
	}
	return
}

// CommentLikeIDs returns the "comment_like" edge IDs in the mutation.
func (m *UserMutation) CommentLikeIDs() (ids []int) {
	for id := range m.comment_like {
		ids = append(ids, id)
	}
	return
}

// ResetCommentLike resets all changes to the "comment_like" edge.
func (m *UserMutation) ResetCommentLike() {
	m.comment_like = nil
	m.clearedcomment_like = false
	m.removedcomment_like = nil
}

// AddCommentIDs adds the "comments" edge to the Comment entity by ids.
func (m *UserMutation) AddCommentIDs(ids ...int) {
	if m.comments == nil {
		m.comments = make(map[int]struct{})
	}
	for i := range ids {
		m.comments[ids[i]] = struct{}{}
	}
}

// ClearComments clears the "comments" edge to the Comment entity.
func (m *UserMutation) ClearComments() {
	m.clearedcomments = true
}

// CommentsCleared reports if the "comments" edge to the Comment entity was cleared.
func (m *UserMutation) CommentsCleared() bool {
	return m.clearedcomments
}

// RemoveCommentIDs removes the "comments" edge to the Comment entity by IDs.
func (m *UserMutation) RemoveCommentIDs(ids ...int) {
	if m.removedcomments == nil {
		m.removedcomments = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.comments, ids[i])
		m.removedcomments[ids[i]] = struct{}{}
	}
}

// RemovedComments returns the removed IDs of the "comments" edge to the Comment entity.
func (m *UserMutation) RemovedCommentsIDs() (ids []int) {
	for id := range m.removedcomments {
		ids = append(ids, id)
	}
	return
}

// CommentsIDs returns the "comments" edge IDs in the mutation.
func (m *UserMutation) CommentsIDs() (ids []int) {
	for id := range m.comments {
		ids = append(ids, id)
	}
	return
}

// ResetComments resets all changes to the "comments" edge.
func (m *UserMutation) ResetComments() {
	m.comments = nil
	m.clearedcomments = false
	m.removedcomments = nil
}

// AddCommentMentionIDs adds the "comment_mention" edge to the CommentMention entity by ids.
func (m *UserMutation) AddCommentMentionIDs(ids ...int) {
	if m.comment_mention == nil {
		m.comment_mention = make(map[int]struct{})
	}
	for i := range ids {
		m.comment_mention[ids[i]] = struct{}{}
	}
}

// ClearCommentMention clears the "comment_mention" edge to the CommentMention entity.
func (m *UserMutation) ClearCommentMention() {
	m.clearedcomment_mention = true
}

// CommentMentionCleared reports if the "comment_mention" edge to the CommentMention entity was cleared.
func (m *UserMutation) CommentMentionCleared() bool {
	return m.clearedcomment_mention
}

// RemoveCommentMentionIDs removes the "comment_mention" edge to the CommentMention entity by IDs.
func (m *UserMutation) RemoveCommentMentionIDs(ids ...int) {
	if m.removedcomment_mention == nil {
		m.removedcomment_mention = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.comment_mention, ids[i])
		m.removedcomment_mention[ids[i]] = struct{}{}
	}
}

// RemovedCommentMention returns the removed IDs of the "comment_mention" edge to the CommentMention entity.
func (m *UserMutation) RemovedCommentMentionIDs() (ids []int) {
	for id := range m.removedcomment_mention {
		ids = append(ids, id)
	}
	return
}

// CommentMentionIDs returns the "comment_mention" edge IDs in the mutation.
func (m *UserMutation) CommentMentionIDs() (ids []int) {
	for id := range m.comment_mention {
		ids = append(ids, id)
	}
	return
}

// ResetCommentMention resets all changes to the "comment_mention" edge.
func (m *UserMutation) ResetCommentMention() {
	m.comment_mention = nil
	m.clearedcomment_mention = false
	m.removedcomment_mention = nil
}

// AddBoardReportIDs adds the "board_report" edge to the BoardReport entity by ids.
func (m *UserMutation) AddBoardReportIDs(ids ...int) {
	if m.board_report == nil {
		m.board_report = make(map[int]struct{})
	}
	for i := range ids {
		m.board_report[ids[i]] = struct{}{}
	}
}

// ClearBoardReport clears the "board_report" edge to the BoardReport entity.
func (m *UserMutation) ClearBoardReport() {
	m.clearedboard_report = true
}

// BoardReportCleared reports if the "board_report" edge to the BoardReport entity was cleared.
func (m *UserMutation) BoardReportCleared() bool {
	return m.clearedboard_report
}

// RemoveBoardReportIDs removes the "board_report" edge to the BoardReport entity by IDs.
func (m *UserMutation) RemoveBoardReportIDs(ids ...int) {
	if m.removedboard_report == nil {
		m.removedboard_report = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.board_report, ids[i])
		m.removedboard_report[ids[i]] = struct{}{}
	}
}

// RemovedBoardReport returns the removed IDs of the "board_report" edge to the BoardReport entity.
func (m *UserMutation) RemovedBoardReportIDs() (ids []int) {
	for id := range m.removedboard_report {
		ids = append(ids, id)
	}
	return
}

// BoardReportIDs returns the "board_report" edge IDs in the mutation.
func (m *UserMutation) BoardReportIDs() (ids []int) {
	for id := range m.board_report {
		ids = append(ids, id)
	}
	return
}

// ResetBoardReport resets all changes to the "board_report" edge.
func (m *UserMutation) ResetBoardReport() {
	m.board_report = nil
	m.clearedboard_report = false
	m.removedboard_report = nil
}

// AddCommentReportIDs adds the "comment_report" edge to the CommentReport entity by ids.
func (m *UserMutation) AddCommentReportIDs(ids ...int) {
	if m.comment_report == nil {
		m.comment_report = make(map[int]struct{})
	}
	for i := range ids {
		m.comment_report[ids[i]] = struct{}{}
	}
}

// ClearCommentReport clears the "comment_report" edge to the CommentReport entity.
func (m *UserMutation) ClearCommentReport() {
	m.clearedcomment_report = true
}

// CommentReportCleared reports if the "comment_report" edge to the CommentReport entity was cleared.
func (m *UserMutation) CommentReportCleared() bool {
	return m.clearedcomment_report
}

// RemoveCommentReportIDs removes the "comment_report" edge to the CommentReport entity by IDs.
func (m *UserMutation) RemoveCommentReportIDs(ids ...int) {
	if m.removedcomment_report == nil {
		m.removedcomment_report = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.comment_report, ids[i])
		m.removedcomment_report[ids[i]] = struct{}{}
	}
}

// RemovedCommentReport returns the removed IDs of the "comment_report" edge to the CommentReport entity.
func (m *UserMutation) RemovedCommentReportIDs() (ids []int) {
	for id := range m.removedcomment_report {
		ids = append(ids, id)
	}
	return
}

// CommentReportIDs returns the "comment_report" edge IDs in the mutation.
func (m *UserMutation) CommentReportIDs() (ids []int) {
	for id := range m.comment_report {
		ids = append(ids, id)
	}
	return
}

// ResetCommentReport resets all changes to the "comment_report" edge.
func (m *UserMutation) ResetCommentReport() {
	m.comment_report = nil
	m.clearedcomment_report = false
	m.removedcomment_report = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldEmail:
		return m.Email()
	case user.FieldPassword:
		return m.Password()
	case user.FieldName:
		return m.Name()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 8)
	if m.boards != nil {
		edges = append(edges, user.EdgeBoards)
	}
	if m.board_like != nil {
		edges = append(edges, user.EdgeBoardLike)
	}
	if m.book_marks != nil {
		edges = append(edges, user.EdgeBookMarks)
	}
	if m.comment_like != nil {
		edges = append(edges, user.EdgeCommentLike)
	}
	if m.comments != nil {
		edges = append(edges, user.EdgeComments)
	}
	if m.comment_mention != nil {
		edges = append(edges, user.EdgeCommentMention)
	}
	if m.board_report != nil {
		edges = append(edges, user.EdgeBoardReport)
	}
	if m.comment_report != nil {
		edges = append(edges, user.EdgeCommentReport)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeBoards:
		ids := make([]ent.Value, 0, len(m.boards))
		for id := range m.boards {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeBoardLike:
		ids := make([]ent.Value, 0, len(m.board_like))
		for id := range m.board_like {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeBookMarks:
		ids := make([]ent.Value, 0, len(m.book_marks))
		for id := range m.book_marks {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeCommentLike:
		ids := make([]ent.Value, 0, len(m.comment_like))
		for id := range m.comment_like {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeComments:
		ids := make([]ent.Value, 0, len(m.comments))
		for id := range m.comments {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeCommentMention:
		ids := make([]ent.Value, 0, len(m.comment_mention))
		for id := range m.comment_mention {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeBoardReport:
		ids := make([]ent.Value, 0, len(m.board_report))
		for id := range m.board_report {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeCommentReport:
		ids := make([]ent.Value, 0, len(m.comment_report))
		for id := range m.comment_report {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 8)
	if m.removedboards != nil {
		edges = append(edges, user.EdgeBoards)
	}
	if m.removedboard_like != nil {
		edges = append(edges, user.EdgeBoardLike)
	}
	if m.removedbook_marks != nil {
		edges = append(edges, user.EdgeBookMarks)
	}
	if m.removedcomment_like != nil {
		edges = append(edges, user.EdgeCommentLike)
	}
	if m.removedcomments != nil {
		edges = append(edges, user.EdgeComments)
	}
	if m.removedcomment_mention != nil {
		edges = append(edges, user.EdgeCommentMention)
	}
	if m.removedboard_report != nil {
		edges = append(edges, user.EdgeBoardReport)
	}
	if m.removedcomment_report != nil {
		edges = append(edges, user.EdgeCommentReport)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeBoards:
		ids := make([]ent.Value, 0, len(m.removedboards))
		for id := range m.removedboards {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeBoardLike:
		ids := make([]ent.Value, 0, len(m.removedboard_like))
		for id := range m.removedboard_like {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeBookMarks:
		ids := make([]ent.Value, 0, len(m.removedbook_marks))
		for id := range m.removedbook_marks {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeCommentLike:
		ids := make([]ent.Value, 0, len(m.removedcomment_like))
		for id := range m.removedcomment_like {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeComments:
		ids := make([]ent.Value, 0, len(m.removedcomments))
		for id := range m.removedcomments {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeCommentMention:
		ids := make([]ent.Value, 0, len(m.removedcomment_mention))
		for id := range m.removedcomment_mention {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeBoardReport:
		ids := make([]ent.Value, 0, len(m.removedboard_report))
		for id := range m.removedboard_report {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeCommentReport:
		ids := make([]ent.Value, 0, len(m.removedcomment_report))
		for id := range m.removedcomment_report {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 8)
	if m.clearedboards {
		edges = append(edges, user.EdgeBoards)
	}
	if m.clearedboard_like {
		edges = append(edges, user.EdgeBoardLike)
	}
	if m.clearedbook_marks {
		edges = append(edges, user.EdgeBookMarks)
	}
	if m.clearedcomment_like {
		edges = append(edges, user.EdgeCommentLike)
	}
	if m.clearedcomments {
		edges = append(edges, user.EdgeComments)
	}
	if m.clearedcomment_mention {
		edges = append(edges, user.EdgeCommentMention)
	}
	if m.clearedboard_report {
		edges = append(edges, user.EdgeBoardReport)
	}
	if m.clearedcomment_report {
		edges = append(edges, user.EdgeCommentReport)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeBoards:
		return m.clearedboards
	case user.EdgeBoardLike:
		return m.clearedboard_like
	case user.EdgeBookMarks:
		return m.clearedbook_marks
	case user.EdgeCommentLike:
		return m.clearedcomment_like
	case user.EdgeComments:
		return m.clearedcomments
	case user.EdgeCommentMention:
		return m.clearedcomment_mention
	case user.EdgeBoardReport:
		return m.clearedboard_report
	case user.EdgeCommentReport:
		return m.clearedcomment_report
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeBoards:
		m.ResetBoards()
		return nil
	case user.EdgeBoardLike:
		m.ResetBoardLike()
		return nil
	case user.EdgeBookMarks:
		m.ResetBookMarks()
		return nil
	case user.EdgeCommentLike:
		m.ResetCommentLike()
		return nil
	case user.EdgeComments:
		m.ResetComments()
		return nil
	case user.EdgeCommentMention:
		m.ResetCommentMention()
		return nil
	case user.EdgeBoardReport:
		m.ResetBoardReport()
		return nil
	case user.EdgeCommentReport:
		m.ResetCommentReport()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
