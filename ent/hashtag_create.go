// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/leeeeeoy/go_study/ent/boardhashtag"
	"github.com/leeeeeoy/go_study/ent/hashtag"
)

// HashtagCreate is the builder for creating a Hashtag entity.
type HashtagCreate struct {
	config
	mutation *HashtagMutation
	hooks    []Hook
}

// SetValue sets the "value" field.
func (hc *HashtagCreate) SetValue(s string) *HashtagCreate {
	hc.mutation.SetValue(s)
	return hc
}

// SetUsedCount sets the "used_count" field.
func (hc *HashtagCreate) SetUsedCount(i int) *HashtagCreate {
	hc.mutation.SetUsedCount(i)
	return hc
}

// SetNillableUsedCount sets the "used_count" field if the given value is not nil.
func (hc *HashtagCreate) SetNillableUsedCount(i *int) *HashtagCreate {
	if i != nil {
		hc.SetUsedCount(*i)
	}
	return hc
}

// AddBoardHashtagIDs adds the "board_hashtag" edge to the BoardHashtag entity by IDs.
func (hc *HashtagCreate) AddBoardHashtagIDs(ids ...int) *HashtagCreate {
	hc.mutation.AddBoardHashtagIDs(ids...)
	return hc
}

// AddBoardHashtag adds the "board_hashtag" edges to the BoardHashtag entity.
func (hc *HashtagCreate) AddBoardHashtag(b ...*BoardHashtag) *HashtagCreate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return hc.AddBoardHashtagIDs(ids...)
}

// Mutation returns the HashtagMutation object of the builder.
func (hc *HashtagCreate) Mutation() *HashtagMutation {
	return hc.mutation
}

// Save creates the Hashtag in the database.
func (hc *HashtagCreate) Save(ctx context.Context) (*Hashtag, error) {
	hc.defaults()
	return withHooks(ctx, hc.sqlSave, hc.mutation, hc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hc *HashtagCreate) SaveX(ctx context.Context) *Hashtag {
	v, err := hc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hc *HashtagCreate) Exec(ctx context.Context) error {
	_, err := hc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hc *HashtagCreate) ExecX(ctx context.Context) {
	if err := hc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hc *HashtagCreate) defaults() {
	if _, ok := hc.mutation.UsedCount(); !ok {
		v := hashtag.DefaultUsedCount
		hc.mutation.SetUsedCount(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hc *HashtagCreate) check() error {
	if _, ok := hc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "Hashtag.value"`)}
	}
	if _, ok := hc.mutation.UsedCount(); !ok {
		return &ValidationError{Name: "used_count", err: errors.New(`ent: missing required field "Hashtag.used_count"`)}
	}
	return nil
}

func (hc *HashtagCreate) sqlSave(ctx context.Context) (*Hashtag, error) {
	if err := hc.check(); err != nil {
		return nil, err
	}
	_node, _spec := hc.createSpec()
	if err := sqlgraph.CreateNode(ctx, hc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	hc.mutation.id = &_node.ID
	hc.mutation.done = true
	return _node, nil
}

func (hc *HashtagCreate) createSpec() (*Hashtag, *sqlgraph.CreateSpec) {
	var (
		_node = &Hashtag{config: hc.config}
		_spec = sqlgraph.NewCreateSpec(hashtag.Table, sqlgraph.NewFieldSpec(hashtag.FieldID, field.TypeInt))
	)
	if value, ok := hc.mutation.Value(); ok {
		_spec.SetField(hashtag.FieldValue, field.TypeString, value)
		_node.Value = value
	}
	if value, ok := hc.mutation.UsedCount(); ok {
		_spec.SetField(hashtag.FieldUsedCount, field.TypeInt, value)
		_node.UsedCount = value
	}
	if nodes := hc.mutation.BoardHashtagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hashtag.BoardHashtagTable,
			Columns: []string{hashtag.BoardHashtagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(boardhashtag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// HashtagCreateBulk is the builder for creating many Hashtag entities in bulk.
type HashtagCreateBulk struct {
	config
	builders []*HashtagCreate
}

// Save creates the Hashtag entities in the database.
func (hcb *HashtagCreateBulk) Save(ctx context.Context) ([]*Hashtag, error) {
	specs := make([]*sqlgraph.CreateSpec, len(hcb.builders))
	nodes := make([]*Hashtag, len(hcb.builders))
	mutators := make([]Mutator, len(hcb.builders))
	for i := range hcb.builders {
		func(i int, root context.Context) {
			builder := hcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HashtagMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hcb *HashtagCreateBulk) SaveX(ctx context.Context) []*Hashtag {
	v, err := hcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hcb *HashtagCreateBulk) Exec(ctx context.Context) error {
	_, err := hcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hcb *HashtagCreateBulk) ExecX(ctx context.Context) {
	if err := hcb.Exec(ctx); err != nil {
		panic(err)
	}
}
