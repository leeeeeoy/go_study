// Code generated by ent, DO NOT EDIT.

package reporttype

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the reporttype type in the database.
	Label = "report_type"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldInActive holds the string denoting the in_active field in the database.
	FieldInActive = "in_active"
	// FieldOrderNum holds the string denoting the order_num field in the database.
	FieldOrderNum = "order_num"
	// EdgeCommentReport holds the string denoting the comment_report edge name in mutations.
	EdgeCommentReport = "comment_report"
	// EdgeBoardReport holds the string denoting the board_report edge name in mutations.
	EdgeBoardReport = "board_report"
	// Table holds the table name of the reporttype in the database.
	Table = "report_types"
	// CommentReportTable is the table that holds the comment_report relation/edge.
	CommentReportTable = "comment_reports"
	// CommentReportInverseTable is the table name for the CommentReport entity.
	// It exists in this package in order to avoid circular dependency with the "commentreport" package.
	CommentReportInverseTable = "comment_reports"
	// CommentReportColumn is the table column denoting the comment_report relation/edge.
	CommentReportColumn = "report_type_id"
	// BoardReportTable is the table that holds the board_report relation/edge.
	BoardReportTable = "board_reports"
	// BoardReportInverseTable is the table name for the BoardReport entity.
	// It exists in this package in order to avoid circular dependency with the "boardreport" package.
	BoardReportInverseTable = "board_reports"
	// BoardReportColumn is the table column denoting the board_report relation/edge.
	BoardReportColumn = "report_type_id"
)

// Columns holds all SQL columns for reporttype fields.
var Columns = []string{
	FieldID,
	FieldDescription,
	FieldInActive,
	FieldOrderNum,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultInActive holds the default value on creation for the "in_active" field.
	DefaultInActive bool
)

// OrderOption defines the ordering options for the ReportType queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByInActive orders the results by the in_active field.
func ByInActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInActive, opts...).ToFunc()
}

// ByOrderNum orders the results by the order_num field.
func ByOrderNum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderNum, opts...).ToFunc()
}

// ByCommentReportField orders the results by comment_report field.
func ByCommentReportField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCommentReportStep(), sql.OrderByField(field, opts...))
	}
}

// ByBoardReportField orders the results by board_report field.
func ByBoardReportField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBoardReportStep(), sql.OrderByField(field, opts...))
	}
}
func newCommentReportStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CommentReportInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, CommentReportTable, CommentReportColumn),
	)
}
func newBoardReportStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BoardReportInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, BoardReportTable, BoardReportColumn),
	)
}
