// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/leeeeeoy/go_study/ent/boardhashtag"
	"github.com/leeeeeoy/go_study/ent/hashtag"
	"github.com/leeeeeoy/go_study/ent/predicate"
)

// HashtagUpdate is the builder for updating Hashtag entities.
type HashtagUpdate struct {
	config
	hooks    []Hook
	mutation *HashtagMutation
}

// Where appends a list predicates to the HashtagUpdate builder.
func (hu *HashtagUpdate) Where(ps ...predicate.Hashtag) *HashtagUpdate {
	hu.mutation.Where(ps...)
	return hu
}

// SetValue sets the "value" field.
func (hu *HashtagUpdate) SetValue(s string) *HashtagUpdate {
	hu.mutation.SetValue(s)
	return hu
}

// SetUsedCount sets the "used_count" field.
func (hu *HashtagUpdate) SetUsedCount(i int) *HashtagUpdate {
	hu.mutation.ResetUsedCount()
	hu.mutation.SetUsedCount(i)
	return hu
}

// SetNillableUsedCount sets the "used_count" field if the given value is not nil.
func (hu *HashtagUpdate) SetNillableUsedCount(i *int) *HashtagUpdate {
	if i != nil {
		hu.SetUsedCount(*i)
	}
	return hu
}

// AddUsedCount adds i to the "used_count" field.
func (hu *HashtagUpdate) AddUsedCount(i int) *HashtagUpdate {
	hu.mutation.AddUsedCount(i)
	return hu
}

// AddBoardHashtagIDs adds the "board_hashtag" edge to the BoardHashtag entity by IDs.
func (hu *HashtagUpdate) AddBoardHashtagIDs(ids ...int) *HashtagUpdate {
	hu.mutation.AddBoardHashtagIDs(ids...)
	return hu
}

// AddBoardHashtag adds the "board_hashtag" edges to the BoardHashtag entity.
func (hu *HashtagUpdate) AddBoardHashtag(b ...*BoardHashtag) *HashtagUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return hu.AddBoardHashtagIDs(ids...)
}

// Mutation returns the HashtagMutation object of the builder.
func (hu *HashtagUpdate) Mutation() *HashtagMutation {
	return hu.mutation
}

// ClearBoardHashtag clears all "board_hashtag" edges to the BoardHashtag entity.
func (hu *HashtagUpdate) ClearBoardHashtag() *HashtagUpdate {
	hu.mutation.ClearBoardHashtag()
	return hu
}

// RemoveBoardHashtagIDs removes the "board_hashtag" edge to BoardHashtag entities by IDs.
func (hu *HashtagUpdate) RemoveBoardHashtagIDs(ids ...int) *HashtagUpdate {
	hu.mutation.RemoveBoardHashtagIDs(ids...)
	return hu
}

// RemoveBoardHashtag removes "board_hashtag" edges to BoardHashtag entities.
func (hu *HashtagUpdate) RemoveBoardHashtag(b ...*BoardHashtag) *HashtagUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return hu.RemoveBoardHashtagIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hu *HashtagUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, hu.sqlSave, hu.mutation, hu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hu *HashtagUpdate) SaveX(ctx context.Context) int {
	affected, err := hu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hu *HashtagUpdate) Exec(ctx context.Context) error {
	_, err := hu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hu *HashtagUpdate) ExecX(ctx context.Context) {
	if err := hu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (hu *HashtagUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(hashtag.Table, hashtag.Columns, sqlgraph.NewFieldSpec(hashtag.FieldID, field.TypeInt))
	if ps := hu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hu.mutation.Value(); ok {
		_spec.SetField(hashtag.FieldValue, field.TypeString, value)
	}
	if value, ok := hu.mutation.UsedCount(); ok {
		_spec.SetField(hashtag.FieldUsedCount, field.TypeInt, value)
	}
	if value, ok := hu.mutation.AddedUsedCount(); ok {
		_spec.AddField(hashtag.FieldUsedCount, field.TypeInt, value)
	}
	if hu.mutation.BoardHashtagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hashtag.BoardHashtagTable,
			Columns: []string{hashtag.BoardHashtagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(boardhashtag.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.RemovedBoardHashtagIDs(); len(nodes) > 0 && !hu.mutation.BoardHashtagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hashtag.BoardHashtagTable,
			Columns: []string{hashtag.BoardHashtagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(boardhashtag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.BoardHashtagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hashtag.BoardHashtagTable,
			Columns: []string{hashtag.BoardHashtagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(boardhashtag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hashtag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	hu.mutation.done = true
	return n, nil
}

// HashtagUpdateOne is the builder for updating a single Hashtag entity.
type HashtagUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HashtagMutation
}

// SetValue sets the "value" field.
func (huo *HashtagUpdateOne) SetValue(s string) *HashtagUpdateOne {
	huo.mutation.SetValue(s)
	return huo
}

// SetUsedCount sets the "used_count" field.
func (huo *HashtagUpdateOne) SetUsedCount(i int) *HashtagUpdateOne {
	huo.mutation.ResetUsedCount()
	huo.mutation.SetUsedCount(i)
	return huo
}

// SetNillableUsedCount sets the "used_count" field if the given value is not nil.
func (huo *HashtagUpdateOne) SetNillableUsedCount(i *int) *HashtagUpdateOne {
	if i != nil {
		huo.SetUsedCount(*i)
	}
	return huo
}

// AddUsedCount adds i to the "used_count" field.
func (huo *HashtagUpdateOne) AddUsedCount(i int) *HashtagUpdateOne {
	huo.mutation.AddUsedCount(i)
	return huo
}

// AddBoardHashtagIDs adds the "board_hashtag" edge to the BoardHashtag entity by IDs.
func (huo *HashtagUpdateOne) AddBoardHashtagIDs(ids ...int) *HashtagUpdateOne {
	huo.mutation.AddBoardHashtagIDs(ids...)
	return huo
}

// AddBoardHashtag adds the "board_hashtag" edges to the BoardHashtag entity.
func (huo *HashtagUpdateOne) AddBoardHashtag(b ...*BoardHashtag) *HashtagUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return huo.AddBoardHashtagIDs(ids...)
}

// Mutation returns the HashtagMutation object of the builder.
func (huo *HashtagUpdateOne) Mutation() *HashtagMutation {
	return huo.mutation
}

// ClearBoardHashtag clears all "board_hashtag" edges to the BoardHashtag entity.
func (huo *HashtagUpdateOne) ClearBoardHashtag() *HashtagUpdateOne {
	huo.mutation.ClearBoardHashtag()
	return huo
}

// RemoveBoardHashtagIDs removes the "board_hashtag" edge to BoardHashtag entities by IDs.
func (huo *HashtagUpdateOne) RemoveBoardHashtagIDs(ids ...int) *HashtagUpdateOne {
	huo.mutation.RemoveBoardHashtagIDs(ids...)
	return huo
}

// RemoveBoardHashtag removes "board_hashtag" edges to BoardHashtag entities.
func (huo *HashtagUpdateOne) RemoveBoardHashtag(b ...*BoardHashtag) *HashtagUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return huo.RemoveBoardHashtagIDs(ids...)
}

// Where appends a list predicates to the HashtagUpdate builder.
func (huo *HashtagUpdateOne) Where(ps ...predicate.Hashtag) *HashtagUpdateOne {
	huo.mutation.Where(ps...)
	return huo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (huo *HashtagUpdateOne) Select(field string, fields ...string) *HashtagUpdateOne {
	huo.fields = append([]string{field}, fields...)
	return huo
}

// Save executes the query and returns the updated Hashtag entity.
func (huo *HashtagUpdateOne) Save(ctx context.Context) (*Hashtag, error) {
	return withHooks(ctx, huo.sqlSave, huo.mutation, huo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (huo *HashtagUpdateOne) SaveX(ctx context.Context) *Hashtag {
	node, err := huo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (huo *HashtagUpdateOne) Exec(ctx context.Context) error {
	_, err := huo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (huo *HashtagUpdateOne) ExecX(ctx context.Context) {
	if err := huo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (huo *HashtagUpdateOne) sqlSave(ctx context.Context) (_node *Hashtag, err error) {
	_spec := sqlgraph.NewUpdateSpec(hashtag.Table, hashtag.Columns, sqlgraph.NewFieldSpec(hashtag.FieldID, field.TypeInt))
	id, ok := huo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Hashtag.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := huo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hashtag.FieldID)
		for _, f := range fields {
			if !hashtag.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != hashtag.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := huo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := huo.mutation.Value(); ok {
		_spec.SetField(hashtag.FieldValue, field.TypeString, value)
	}
	if value, ok := huo.mutation.UsedCount(); ok {
		_spec.SetField(hashtag.FieldUsedCount, field.TypeInt, value)
	}
	if value, ok := huo.mutation.AddedUsedCount(); ok {
		_spec.AddField(hashtag.FieldUsedCount, field.TypeInt, value)
	}
	if huo.mutation.BoardHashtagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hashtag.BoardHashtagTable,
			Columns: []string{hashtag.BoardHashtagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(boardhashtag.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.RemovedBoardHashtagIDs(); len(nodes) > 0 && !huo.mutation.BoardHashtagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hashtag.BoardHashtagTable,
			Columns: []string{hashtag.BoardHashtagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(boardhashtag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.BoardHashtagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hashtag.BoardHashtagTable,
			Columns: []string{hashtag.BoardHashtagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(boardhashtag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Hashtag{config: huo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, huo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hashtag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	huo.mutation.done = true
	return _node, nil
}
