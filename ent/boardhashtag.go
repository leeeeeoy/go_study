// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/leeeeeoy/go_study/ent/board"
	"github.com/leeeeeoy/go_study/ent/boardhashtag"
	"github.com/leeeeeoy/go_study/ent/hashtag"
)

// BoardHashtag is the model entity for the BoardHashtag schema.
type BoardHashtag struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// BoardID holds the value of the "board_id" field.
	BoardID int `json:"board_id,omitempty"`
	// HashtagID holds the value of the "hashtag_id" field.
	HashtagID int `json:"hashtag_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BoardHashtagQuery when eager-loading is set.
	Edges        BoardHashtagEdges `json:"edges"`
	selectValues sql.SelectValues
}

// BoardHashtagEdges holds the relations/edges for other nodes in the graph.
type BoardHashtagEdges struct {
	// Board holds the value of the board edge.
	Board *Board `json:"board,omitempty"`
	// Hashtag holds the value of the hashtag edge.
	Hashtag *Hashtag `json:"hashtag,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// BoardOrErr returns the Board value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BoardHashtagEdges) BoardOrErr() (*Board, error) {
	if e.loadedTypes[0] {
		if e.Board == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: board.Label}
		}
		return e.Board, nil
	}
	return nil, &NotLoadedError{edge: "board"}
}

// HashtagOrErr returns the Hashtag value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BoardHashtagEdges) HashtagOrErr() (*Hashtag, error) {
	if e.loadedTypes[1] {
		if e.Hashtag == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: hashtag.Label}
		}
		return e.Hashtag, nil
	}
	return nil, &NotLoadedError{edge: "hashtag"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BoardHashtag) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case boardhashtag.FieldID, boardhashtag.FieldBoardID, boardhashtag.FieldHashtagID:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BoardHashtag fields.
func (bh *BoardHashtag) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case boardhashtag.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			bh.ID = int(value.Int64)
		case boardhashtag.FieldBoardID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field board_id", values[i])
			} else if value.Valid {
				bh.BoardID = int(value.Int64)
			}
		case boardhashtag.FieldHashtagID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field hashtag_id", values[i])
			} else if value.Valid {
				bh.HashtagID = int(value.Int64)
			}
		default:
			bh.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BoardHashtag.
// This includes values selected through modifiers, order, etc.
func (bh *BoardHashtag) Value(name string) (ent.Value, error) {
	return bh.selectValues.Get(name)
}

// QueryBoard queries the "board" edge of the BoardHashtag entity.
func (bh *BoardHashtag) QueryBoard() *BoardQuery {
	return NewBoardHashtagClient(bh.config).QueryBoard(bh)
}

// QueryHashtag queries the "hashtag" edge of the BoardHashtag entity.
func (bh *BoardHashtag) QueryHashtag() *HashtagQuery {
	return NewBoardHashtagClient(bh.config).QueryHashtag(bh)
}

// Update returns a builder for updating this BoardHashtag.
// Note that you need to call BoardHashtag.Unwrap() before calling this method if this BoardHashtag
// was returned from a transaction, and the transaction was committed or rolled back.
func (bh *BoardHashtag) Update() *BoardHashtagUpdateOne {
	return NewBoardHashtagClient(bh.config).UpdateOne(bh)
}

// Unwrap unwraps the BoardHashtag entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bh *BoardHashtag) Unwrap() *BoardHashtag {
	_tx, ok := bh.config.driver.(*txDriver)
	if !ok {
		panic("ent: BoardHashtag is not a transactional entity")
	}
	bh.config.driver = _tx.drv
	return bh
}

// String implements the fmt.Stringer.
func (bh *BoardHashtag) String() string {
	var builder strings.Builder
	builder.WriteString("BoardHashtag(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bh.ID))
	builder.WriteString("board_id=")
	builder.WriteString(fmt.Sprintf("%v", bh.BoardID))
	builder.WriteString(", ")
	builder.WriteString("hashtag_id=")
	builder.WriteString(fmt.Sprintf("%v", bh.HashtagID))
	builder.WriteByte(')')
	return builder.String()
}

// BoardHashtags is a parsable slice of BoardHashtag.
type BoardHashtags []*BoardHashtag
