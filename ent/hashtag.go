// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/leeeeeoy/go_study/ent/hashtag"
)

// Hashtag is the model entity for the Hashtag schema.
type Hashtag struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Value holds the value of the "value" field.
	Value string `json:"value,omitempty"`
	// UsedCount holds the value of the "used_count" field.
	UsedCount int `json:"used_count,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HashtagQuery when eager-loading is set.
	Edges        HashtagEdges `json:"edges"`
	selectValues sql.SelectValues
}

// HashtagEdges holds the relations/edges for other nodes in the graph.
type HashtagEdges struct {
	// BoardHashtag holds the value of the board_hashtag edge.
	BoardHashtag []*BoardHashtag `json:"board_hashtag,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// BoardHashtagOrErr returns the BoardHashtag value or an error if the edge
// was not loaded in eager-loading.
func (e HashtagEdges) BoardHashtagOrErr() ([]*BoardHashtag, error) {
	if e.loadedTypes[0] {
		return e.BoardHashtag, nil
	}
	return nil, &NotLoadedError{edge: "board_hashtag"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Hashtag) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case hashtag.FieldID, hashtag.FieldUsedCount:
			values[i] = new(sql.NullInt64)
		case hashtag.FieldValue:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Hashtag fields.
func (h *Hashtag) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case hashtag.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			h.ID = int(value.Int64)
		case hashtag.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				h.Value = value.String
			}
		case hashtag.FieldUsedCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field used_count", values[i])
			} else if value.Valid {
				h.UsedCount = int(value.Int64)
			}
		default:
			h.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the Hashtag.
// This includes values selected through modifiers, order, etc.
func (h *Hashtag) GetValue(name string) (ent.Value, error) {
	return h.selectValues.Get(name)
}

// QueryBoardHashtag queries the "board_hashtag" edge of the Hashtag entity.
func (h *Hashtag) QueryBoardHashtag() *BoardHashtagQuery {
	return NewHashtagClient(h.config).QueryBoardHashtag(h)
}

// Update returns a builder for updating this Hashtag.
// Note that you need to call Hashtag.Unwrap() before calling this method if this Hashtag
// was returned from a transaction, and the transaction was committed or rolled back.
func (h *Hashtag) Update() *HashtagUpdateOne {
	return NewHashtagClient(h.config).UpdateOne(h)
}

// Unwrap unwraps the Hashtag entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (h *Hashtag) Unwrap() *Hashtag {
	_tx, ok := h.config.driver.(*txDriver)
	if !ok {
		panic("ent: Hashtag is not a transactional entity")
	}
	h.config.driver = _tx.drv
	return h
}

// String implements the fmt.Stringer.
func (h *Hashtag) String() string {
	var builder strings.Builder
	builder.WriteString("Hashtag(")
	builder.WriteString(fmt.Sprintf("id=%v, ", h.ID))
	builder.WriteString("value=")
	builder.WriteString(h.Value)
	builder.WriteString(", ")
	builder.WriteString("used_count=")
	builder.WriteString(fmt.Sprintf("%v", h.UsedCount))
	builder.WriteByte(')')
	return builder.String()
}

// Hashtags is a parsable slice of Hashtag.
type Hashtags []*Hashtag
