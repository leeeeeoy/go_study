// Code generated by ent, DO NOT EDIT.

package hashtag

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the hashtag type in the database.
	Label = "hashtag"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldValue holds the string denoting the value field in the database.
	FieldValue = "value"
	// FieldUsedCount holds the string denoting the used_count field in the database.
	FieldUsedCount = "used_count"
	// EdgeBoardHashtag holds the string denoting the board_hashtag edge name in mutations.
	EdgeBoardHashtag = "board_hashtag"
	// Table holds the table name of the hashtag in the database.
	Table = "hashtags"
	// BoardHashtagTable is the table that holds the board_hashtag relation/edge.
	BoardHashtagTable = "board_hashtags"
	// BoardHashtagInverseTable is the table name for the BoardHashtag entity.
	// It exists in this package in order to avoid circular dependency with the "boardhashtag" package.
	BoardHashtagInverseTable = "board_hashtags"
	// BoardHashtagColumn is the table column denoting the board_hashtag relation/edge.
	BoardHashtagColumn = "hashtag_id"
)

// Columns holds all SQL columns for hashtag fields.
var Columns = []string{
	FieldID,
	FieldValue,
	FieldUsedCount,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUsedCount holds the default value on creation for the "used_count" field.
	DefaultUsedCount int
)

// OrderOption defines the ordering options for the Hashtag queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByValue orders the results by the value field.
func ByValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValue, opts...).ToFunc()
}

// ByUsedCount orders the results by the used_count field.
func ByUsedCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsedCount, opts...).ToFunc()
}

// ByBoardHashtagCount orders the results by board_hashtag count.
func ByBoardHashtagCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBoardHashtagStep(), opts...)
	}
}

// ByBoardHashtag orders the results by board_hashtag terms.
func ByBoardHashtag(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBoardHashtagStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newBoardHashtagStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BoardHashtagInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, BoardHashtagTable, BoardHashtagColumn),
	)
}
