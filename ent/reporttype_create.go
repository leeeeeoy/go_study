// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/leeeeeoy/go_study/ent/boardreport"
	"github.com/leeeeeoy/go_study/ent/commentreport"
	"github.com/leeeeeoy/go_study/ent/reporttype"
)

// ReportTypeCreate is the builder for creating a ReportType entity.
type ReportTypeCreate struct {
	config
	mutation *ReportTypeMutation
	hooks    []Hook
}

// SetDescription sets the "description" field.
func (rtc *ReportTypeCreate) SetDescription(s string) *ReportTypeCreate {
	rtc.mutation.SetDescription(s)
	return rtc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (rtc *ReportTypeCreate) SetNillableDescription(s *string) *ReportTypeCreate {
	if s != nil {
		rtc.SetDescription(*s)
	}
	return rtc
}

// SetInActive sets the "in_active" field.
func (rtc *ReportTypeCreate) SetInActive(b bool) *ReportTypeCreate {
	rtc.mutation.SetInActive(b)
	return rtc
}

// SetNillableInActive sets the "in_active" field if the given value is not nil.
func (rtc *ReportTypeCreate) SetNillableInActive(b *bool) *ReportTypeCreate {
	if b != nil {
		rtc.SetInActive(*b)
	}
	return rtc
}

// SetOrderNum sets the "order_num" field.
func (rtc *ReportTypeCreate) SetOrderNum(i int) *ReportTypeCreate {
	rtc.mutation.SetOrderNum(i)
	return rtc
}

// SetCommentReportID sets the "comment_report" edge to the CommentReport entity by ID.
func (rtc *ReportTypeCreate) SetCommentReportID(id int) *ReportTypeCreate {
	rtc.mutation.SetCommentReportID(id)
	return rtc
}

// SetNillableCommentReportID sets the "comment_report" edge to the CommentReport entity by ID if the given value is not nil.
func (rtc *ReportTypeCreate) SetNillableCommentReportID(id *int) *ReportTypeCreate {
	if id != nil {
		rtc = rtc.SetCommentReportID(*id)
	}
	return rtc
}

// SetCommentReport sets the "comment_report" edge to the CommentReport entity.
func (rtc *ReportTypeCreate) SetCommentReport(c *CommentReport) *ReportTypeCreate {
	return rtc.SetCommentReportID(c.ID)
}

// SetBoardReportID sets the "board_report" edge to the BoardReport entity by ID.
func (rtc *ReportTypeCreate) SetBoardReportID(id int) *ReportTypeCreate {
	rtc.mutation.SetBoardReportID(id)
	return rtc
}

// SetNillableBoardReportID sets the "board_report" edge to the BoardReport entity by ID if the given value is not nil.
func (rtc *ReportTypeCreate) SetNillableBoardReportID(id *int) *ReportTypeCreate {
	if id != nil {
		rtc = rtc.SetBoardReportID(*id)
	}
	return rtc
}

// SetBoardReport sets the "board_report" edge to the BoardReport entity.
func (rtc *ReportTypeCreate) SetBoardReport(b *BoardReport) *ReportTypeCreate {
	return rtc.SetBoardReportID(b.ID)
}

// Mutation returns the ReportTypeMutation object of the builder.
func (rtc *ReportTypeCreate) Mutation() *ReportTypeMutation {
	return rtc.mutation
}

// Save creates the ReportType in the database.
func (rtc *ReportTypeCreate) Save(ctx context.Context) (*ReportType, error) {
	rtc.defaults()
	return withHooks(ctx, rtc.sqlSave, rtc.mutation, rtc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rtc *ReportTypeCreate) SaveX(ctx context.Context) *ReportType {
	v, err := rtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rtc *ReportTypeCreate) Exec(ctx context.Context) error {
	_, err := rtc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rtc *ReportTypeCreate) ExecX(ctx context.Context) {
	if err := rtc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rtc *ReportTypeCreate) defaults() {
	if _, ok := rtc.mutation.InActive(); !ok {
		v := reporttype.DefaultInActive
		rtc.mutation.SetInActive(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rtc *ReportTypeCreate) check() error {
	if _, ok := rtc.mutation.InActive(); !ok {
		return &ValidationError{Name: "in_active", err: errors.New(`ent: missing required field "ReportType.in_active"`)}
	}
	if _, ok := rtc.mutation.OrderNum(); !ok {
		return &ValidationError{Name: "order_num", err: errors.New(`ent: missing required field "ReportType.order_num"`)}
	}
	return nil
}

func (rtc *ReportTypeCreate) sqlSave(ctx context.Context) (*ReportType, error) {
	if err := rtc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rtc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rtc.mutation.id = &_node.ID
	rtc.mutation.done = true
	return _node, nil
}

func (rtc *ReportTypeCreate) createSpec() (*ReportType, *sqlgraph.CreateSpec) {
	var (
		_node = &ReportType{config: rtc.config}
		_spec = sqlgraph.NewCreateSpec(reporttype.Table, sqlgraph.NewFieldSpec(reporttype.FieldID, field.TypeInt))
	)
	if value, ok := rtc.mutation.Description(); ok {
		_spec.SetField(reporttype.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := rtc.mutation.InActive(); ok {
		_spec.SetField(reporttype.FieldInActive, field.TypeBool, value)
		_node.InActive = value
	}
	if value, ok := rtc.mutation.OrderNum(); ok {
		_spec.SetField(reporttype.FieldOrderNum, field.TypeInt, value)
		_node.OrderNum = value
	}
	if nodes := rtc.mutation.CommentReportIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   reporttype.CommentReportTable,
			Columns: []string{reporttype.CommentReportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commentreport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rtc.mutation.BoardReportIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   reporttype.BoardReportTable,
			Columns: []string{reporttype.BoardReportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(boardreport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ReportTypeCreateBulk is the builder for creating many ReportType entities in bulk.
type ReportTypeCreateBulk struct {
	config
	builders []*ReportTypeCreate
}

// Save creates the ReportType entities in the database.
func (rtcb *ReportTypeCreateBulk) Save(ctx context.Context) ([]*ReportType, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rtcb.builders))
	nodes := make([]*ReportType, len(rtcb.builders))
	mutators := make([]Mutator, len(rtcb.builders))
	for i := range rtcb.builders {
		func(i int, root context.Context) {
			builder := rtcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReportTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rtcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rtcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rtcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rtcb *ReportTypeCreateBulk) SaveX(ctx context.Context) []*ReportType {
	v, err := rtcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rtcb *ReportTypeCreateBulk) Exec(ctx context.Context) error {
	_, err := rtcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rtcb *ReportTypeCreateBulk) ExecX(ctx context.Context) {
	if err := rtcb.Exec(ctx); err != nil {
		panic(err)
	}
}
