// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: query.sql

package tutorial

import (
	"context"

	"github.com/google/uuid"
)

const getUserById = `-- name: GetUserById :one
SELECT id, email, password, username, created_at FROM users WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (*User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Username,
		&i.CreatedAt,
	)
	return &i, err
}

const signInByEmail = `-- name: SignInByEmail :one
SELECT id, email, password, username, created_at FROM users WHERE email = $1 AND "password"=$2 LIMIT 1
`

type SignInByEmailParams struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) SignInByEmail(ctx context.Context, arg *SignInByEmailParams) (*User, error) {
	row := q.db.QueryRowContext(ctx, signInByEmail, arg.Email, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Username,
		&i.CreatedAt,
	)
	return &i, err
}
